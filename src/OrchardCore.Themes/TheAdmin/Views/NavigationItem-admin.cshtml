@{
    TagBuilder li = Tag(Model, "li");

    // Morphing the shape to keep Model untouched
    Model.Metadata.Alternates.Clear();
    Model.Metadata.Type = "NavigationItemLink";
    Model.Metadata.Alternates.Add("NavigationItemLink_Id__" + Model.Id);

    if ((bool)Model.Selected)
    {
        li.AddCssClass("active");
    }

    // Render sub-items (MenuItem)
    if (Model.HasItems)
    {
        li.AddCssClass("has-items");
        li.Attributes["id"] = null;
        var figure = new TagBuilder("figure");
        figure.Attributes["aria-labelledby"] = "figcaption";
        var figCaption = new TagBuilder("figcaption");
        figCaption.Attributes["data-toggle"] = "collapse";
        figCaption.Attributes["data-target"] = "#m" + Model.GetHashCode().ToString();
        figCaption.Attributes["aria-expanded"] = "false";
        figCaption.Attributes["aria-controls"] = "m" + Model.GetHashCode().ToString();
        figCaption.Attributes["role"] = "legend";
        figCaption.TagRenderMode = TagRenderMode.Normal;

        var ul = new TagBuilder("ul");
        ul.Attributes["Id"] = "m" + Model.GetHashCode().ToString();

        if ((bool)Model.Selected)
        {
            figCaption.Attributes["aria-expanded"] = "true";
            ul.AddCssClass("collapse show");
        }
        else
        {
            figCaption.Attributes["aria-expanded"] = "false";
            ul.AddCssClass("collapse");
        }

        foreach (var item in Model)
        {
            ul.InnerHtml.AppendHtml(await DisplayAsync(item));
        }

        figCaption.InnerHtml.AppendHtml(await DisplayAsync(Model));
        figure.InnerHtml.AppendHtml(figCaption);
        figure.InnerHtml.AppendHtml(ul);

        li.InnerHtml.AppendHtml(figure);
    }
    else
    {
        li.InnerHtml.AppendHtml(await DisplayAsync(Model));
    }
}

@li
