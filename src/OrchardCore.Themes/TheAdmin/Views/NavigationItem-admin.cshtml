@{
    TagBuilder li = Tag(Model, "li");

    // Morphing the shape to keep Model untouched
    Model.Metadata.Alternates.Clear();
    Model.Metadata.Type = "NavigationItemLink";
    Model.Metadata.Alternates.Add("NavigationItemLink_Id__" + Model.Id);

    if ((bool)Model.Selected)
    {
        li.AddCssClass("active");
    }

    // Render sub-items (MenuItem)
    if (Model.HasItems)
    {
        li.AddCssClass("has-items");
        var figure = new TagBuilder("figure");
        var figCaption = new TagBuilder("figcaption");
        figCaption.AddCssClass("item-label");
        figCaption.Attributes["data-toggle"] = "collapse";
        figCaption.Attributes["data-target"] = "#m" + Model.GetHashCode().ToString();
        figCaption.Attributes["aria-expanded"] = "false";
        figCaption.Attributes["aria-controls"] = "m" + Model.GetHashCode().ToString();
        figCaption.Attributes["role"] = "button";
        figCaption.TagRenderMode = TagRenderMode.Normal;

        var ul = new TagBuilder("ul");
        ul.Attributes["Id"] = "m" + Model.GetHashCode().ToString();

        if ((bool)Model.Selected)
        {
            figCaption.Attributes["aria-expanded"] = "true";
            ul.AddCssClass("collapse show");
        }
        else
        {
            figCaption.Attributes["aria-expanded"] = "false";
            ul.AddCssClass("collapse");
        }

        foreach (var item in Model)
        {
            ul.InnerHtml.AppendHtml(await DisplayAsync(item));
        }

        figCaption.InnerHtml.AppendHtml(await DisplayAsync(Model));
        figure.InnerHtml.AppendHtml(figCaption);
        figure.InnerHtml.AppendHtml(ul);

        li.InnerHtml.AppendHtml(figure);
    }
    else
    {
        li.InnerHtml.AppendHtml(await DisplayAsync(Model));
    }
}

@li


@*@{
        TagBuilder tag = Tag(Model, "li");

        // Morphing the shape to keep Model untouched
        Model.Metadata.Alternates.Clear();
        Model.Metadata.Type = "NavigationItemLink";

        // Render sub-items (MenuItem)
        if (Model.HasItems)
        {
            tag.AddCssClass("has-children");

            var id = "id" + Model.GetHashCode();

            if (Model.Level == 1)
            {
                // Radio
                var radio = new TagBuilder("input");
                radio.Attributes["type"] = "radio";
                radio.Attributes["id"] = id;
                radio.Attributes["name"] = "top";
                radio.TagRenderMode = TagRenderMode.SelfClosing;
                tag.InnerHtml.AppendHtml(radio);
            }
            else
            {
                // Checkbox
                var checkbox = new TagBuilder("input");
                checkbox.Attributes["type"] = "checkbox";
                checkbox.Attributes["id"] = id;
                checkbox.TagRenderMode = TagRenderMode.SelfClosing;
                tag.InnerHtml.AppendHtml(checkbox);
            }

            // Label
            var label = new TagBuilder("label");
            label.Attributes["for"] = id;
            label.InnerHtml.AppendHtml("<span>" + Model.Text + "</span>");
            label.TagRenderMode = TagRenderMode.Normal;
            tag.InnerHtml.AppendHtml(label);

            tag.InnerHtml.AppendHtml("<ul>");
            foreach (var item in Model)
            {
                tag.InnerHtml.AppendHtml(await DisplayAsync(item));
            }
            tag.InnerHtml.AppendHtml("</ul>");
        }
        else
        {
            tag.InnerHtml.AppendHtml(await DisplayAsync(Model));
        }
    }
    @tag*@