@using Microsoft.AspNetCore.Html
@using Orchard.ContentManagement
@using Orchard.ContentManagement.Metadata
@using Orchard.ContentManagement.MetaData
@using Orchard.Contents
@inject IContentManager ContentManager
@inject IContentDefinitionManager ContentDefinitionManager

@{
    var returnUrl = Context.Request.Path;

    ContentItem contentItem = Model.ContentItem;
    var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
    var hasDraft = contentItem.HasDraft();
    var contentType = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType).DisplayName;
    var metadata = ContentManager.PopulateAspect<ContentItemMetadata>(contentItem);
    var url = Url.Action(metadata.DisplayRouteValues["action"].ToString(), metadata.DisplayRouteValues);
}
    <div class="properties">
        <div class="related float-xs-right">
            @await DisplayAsync(Model.Actions)
            
            <a edit-for="@contentItem" class="btn btn-primary btn-sm">@T["Edit"]</a>

            <div class="btn-group">
                <button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T["Actions"]
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    
                    @if (hasDraft)
                    {
                        <a asp-action="Publish" asp-controller="Admin" asp-route-area="Orchard.Contents" asp-route-contentItemId="@contentItem.ContentItemId" itemprop="UnsafeUrl" class="dropdown-item btn-sm">@T["Publish Draft"]</a>
                    }

                    @if (hasPublished)
                    {
                        <a display-for="@contentItem" class="dropdown-item btn-sm" itemprop="">@T["View"]</a>
                    }

                    <div class="dropdown-divider"></div>
                    
                    @if (hasDraft)
                    {
                        <a asp-action="DiscardDraft" asp-controller="Admin" asp-route-area="Orchard.Contents" asp-route-contentItemId="@contentItem.ContentItemId" itemprop="UnsafeUrl RemoveUrl" class="dropdown-item btn-sm">@T["Discard Draft"]</a>
                    }

                    @if (hasPublished)
                    {
                        <a asp-action="Unpublish" asp-controller="Admin" asp-route-area="Orchard.Contents" asp-route-contentItemId="@contentItem.ContentItemId" itemprop="UnsafeUrl RemoveUrl" class="dropdown-item btn-sm">@T["Unpublish"]</a>
                    }

                    @* This removes the draft and published versions, not necessary as both actions are already available separately *@
                    @*<a remove-for="@contentItem" class="dropdown-item btn-sm" itemprop="RemoveUrl UnsafeUrl">@T["Remove"]</a>*@

                </div>
            </div>


            @*@if (Authorizer.Authorize(Permissions.EditContent, contentItem)) {
                @Html.ItemEditLink(T("Edit").Text, contentItem)@T(" | ")
            }
            @if (Authorizer.Authorize(Permissions.DeleteContent, contentItem)) {
                @Html.Link(T("Delete").Text, Url.ItemRemoveUrl(contentItem, new {returnUrl}), new {itemprop = "RemoveUrl UnsafeUrl"})
            }*@
        </div>

        <input type="checkbox" value="@contentItem.Id" name="itemIds"/>
        <a admin-for="@contentItem"/> 

            @if (Model.Header != null)
            {
                <div class="header">@await DisplayAsync(Model.Header)</div>
            }

            <div class="metadata">
            @if (hasPublished)
            {
                <span class="tag tag-success" title="@T["Published"]">
                    <i class="fa fa-check" aria-hidden="true"></i> @T["Published"]
                </span>
            }

            @if (hasDraft)
            {
                <span class="tag tag-primary" title="@T["Draft"]">
                    <i class="fa fa-pencil" aria-hidden="true"></i> @T["Draft"]
                </span>
            }

            @if (contentItem.ModifiedUtc.HasValue)
            {
                <div>
                    <span class="hint">@T["Last modified {0} by {1}", (object)(await DisplayAsync(New.TimeSpan(Utc: contentItem.ModifiedUtc))), contentItem.ModifiedBy]</span>
                </div>
            }
            @await DisplayAsync(Model.Meta)
        </div>
</div>

    @if (Model.Content != null)
    {
    <div class="primary">@await DisplayAsync(Model.Content)</div>
    }
