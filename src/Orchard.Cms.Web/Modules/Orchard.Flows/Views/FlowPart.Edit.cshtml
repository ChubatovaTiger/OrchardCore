@using Orchard.ContentManagement.Metadata.Settings;
@using Orchard.Flows.ViewModels;

@model FlowPartEditViewModel

@inject IContentManager ContentManager
@inject Orchard.ContentManagement.MetaData.IContentDefinitionManager ContentDefinitionManager
@inject Orchard.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.Settings.ToObject<ContentTypeSettings>().Stereotype == "Widget");
}

<script asp-name="jquery-ui" at="Foot"></script>

<fieldset class="form-group">
    <div id="widgetPlaceholder">
        @{ var index = -1; var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }
        @foreach (var widget in Model.FlowPart.Widgets)
        {
            index++;
            <div class="widget-template">
                @{ 
                    var widgetEditor = await ContentItemDisplayManager.BuildEditorAsync(widget, Model.Updater, "", "FlowPart." + index);
                    widgetEditor.Metadata.Alternates.Add("Widget_Edit__Flow");
                }
                    
                @await DisplayAsync(widgetEditor)

                @{ this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix; }
                <input type="hidden" asp-for="Indexes" value="@index" />
                <input type="hidden" asp-for="ContentTypes" value="@widget.ContentType" />
            </div>
        }
    </div>

    <div class="btn-group ">
        <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @T["Add Widget"]
        </button>
        <div class="dropdown-menu">
            @foreach (var type in widgetContentTypes)
            {
                <a class="dropdown-item add-widget  btn-sm" data-widget-type="@type.Name" href="#">@type.DisplayName</a>
            }
        </div>
    </div>

    <input type="hidden" id="buildEditorUrl" value="@Url.Action("BuildEditor", "Admin", new { area = "Orchard.Flows"  })" />
    <input type="hidden" id="indexesName" value="@Html.NameFor(x => x.Indexes)" />
    <input type="hidden" id="contentTypesName" value="@Html.NameFor(x => x.ContentTypes)" />


    <div style="display:none">
        @foreach (var type in widgetContentTypes)
        {
            // Render a mock widget so that its resources are included in the page
            var contentItem = ContentManager.New(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, "", Guid.NewGuid().ToString()));
        }
    </div>

    <script at="Foot">
        var index = @Model.FlowPart.Widgets.Count;
        var createEditorUrl = $('#buildEditorUrl').attr("value");
        var indexesName = $('#indexesName').attr("value");
        var contentTypesName = $('#contentTypesName').attr("value");
        var widgetTemplate = function (data, index, contentType) {
            return '<div class="widget-template">' + data + '<input type="hidden" name="' + indexesName + '" value="' + index + '" /><input type="hidden" name="' + contentTypesName + '" value="' + contentType + '" /></div>';
        }

        $('.add-widget').on('click', function (event) {
            var type = $(this).data("widget-type");
            $.ajax({
                url: createEditorUrl + "/" + type + "?prefix=" + "FlowPart." + index
            })
            .done(function (data) {
                var result = JSON.parse(data);
                $('#widgetPlaceholder').append(widgetTemplate(result.Content, index, type));

                var dom = $(result.Scripts); 
                dom.filter('script').each(function(){
                    $.globalEval(this.text || this.textContent || this.innerHTML || '');
                });

                index++;
            });
        })

        $(document).on('click', '.insert-widget', function (event) {
            var type = $(this).data("widget-type");
            var target = $(this).closest('.widget-template');
            $.ajax({
                url: createEditorUrl + "/" + type + "?prefix=" + "FlowPart." + index
            })
            .done(function (data) {
                var result = JSON.parse(data);
                $(widgetTemplate(result.Content, index, type)).insertBefore(target);

                var dom = $(result.Scripts); 
                dom.filter('script').each(function(){
                    $.globalEval(this.text || this.textContent || this.innerHTML || '');
                });

                index++;
            });
        })

        $(document).on('click', '.widget-delete', function() {
            $(this).closest('.widget-template').remove();
            $(document).trigger('contentpreview:render');
        });

        $("#widgetPlaceholder").sortable({
            handle: ".widget-editor-header",
            stop: function( event, ui ) { $(document).trigger('contentpreview:render'); },
            cursor: "move"
        });

        $(document).on('change', '.widget-editor-footer label', function () {
            $(document).trigger('contentpreview:render');
        });
    </script>
</fieldset>