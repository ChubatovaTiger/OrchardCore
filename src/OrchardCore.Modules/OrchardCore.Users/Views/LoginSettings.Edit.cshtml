@model OrchardCore.Users.Models.LoginSettings

<script asp-name="codemirror" depends-on="admin" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>


<div class="form-group" asp-validation-class-for="UseSiteTheme">
    <div class="custom-control custom-checkbox">
        <input type="checkbox" class="custom-control-input" asp-for="UseSiteTheme" />
        <span asp-validation-for="UseSiteTheme"></span>
        <label class="custom-control-label" asp-for="UseSiteTheme">@T["Use site theme for login page"]</label>
        <span class="hint">— @T["Requires an active site theme."]</span>
    </div>
</div>

<div class="form-group" asp-validation-class-for="DisableLocalUsersAuthentication">
    <div class="custom-control custom-checkbox">
        <input type="checkbox" class="custom-control-input" asp-for="DisableLocalUsersAuthentication" />
        <span asp-validation-for="DisableLocalUsersAuthentication"></span>
        <label class="custom-control-label" asp-for="DisableLocalUsersAuthentication">@T["Disable local users authentication"]</label>
        <span class="hint">— @T["Allow users to authenticate only using their external provider credentials."]</span>
    </div>
</div>

<div class="form-group" asp-validation-class-for="MapExternalUsersScript">
    <label asp-for="MapExternalUsersScript">@T["Script"]</label>
    <textarea asp-for="MapExternalUsersScript" rows="1" class="form-control content-preview-text"></textarea>
    <span class="hint">@T["Write code to return a list of Roles based on the external claims."]</span>
</div>

<script at="Foot">
$(function () {
    var textArea = document.getElementById('@Html.IdFor(x => x.MapExternalUsersScript)');
    debugger;
    if (textArea == null) {
        return;
    }

    var editor = CodeMirror.fromTextArea(textArea, {
        autoRefresh: true,
        lineNumbers: true,
        styleActiveLine: true,
        matchBrackets: true,
        mode: { name: "javascript" },
    });

    if (editor.doc.lineCount() == 1) {
        editor.doc.setValue('function transformClaims(incomingToken) {\n\n}');
        editor.markText({ line: 0, ch: 0 }, { line: 0 }, { readOnly: true });
        editor.markText({ line: 2, ch: 0 }, { line: 2 }, { readOnly: true });
    };


    // listen for the beforeChange event, test the changed line number, and cancel
    //editor.on('beforeChange', function (cm, change) {
    //    if (change.from.line == 0 ) {
    //        change.cancel();
    //    }
    //});

});
</script>