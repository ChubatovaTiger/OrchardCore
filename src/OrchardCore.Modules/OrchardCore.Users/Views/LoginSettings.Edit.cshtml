@model OrchardCore.Users.Models.LoginSettings

<script asp-name="codemirror" depends-on="admin" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>


<div class="form-group" asp-validation-class-for="UseSiteTheme">
    <div class="custom-control custom-checkbox">
        <input type="checkbox" class="custom-control-input" asp-for="UseSiteTheme" />
        <span asp-validation-for="UseSiteTheme"></span>
        <label class="custom-control-label" asp-for="UseSiteTheme">@T["Use site theme for login page"]</label>
        <span class="hint">— @T["Requires an active site theme."]</span>
    </div>
</div>

<div class="form-group" asp-validation-class-for="SyncRolesFromExternalProviders">
    <div class="custom-control custom-checkbox">
        <input type="checkbox" class="custom-control-input" asp-for="SyncRolesFromExternalProviders" />
        <span asp-validation-for="SyncRolesFromExternalProviders"></span>
        <label class="custom-control-label" asp-for="SyncRolesFromExternalProviders">@T["Use a script to define user roles based on external provider claims"]</label>
        <span class="hint">— @T["On multiple providers, return false if you do not want to sync the roles."]</span>
    </div>
</div>

<div class="form-group" asp-validation-class-for="GetRolesScript">
    <textarea asp-for="GetRolesScript" rows="1" class="form-control content-preview-text"></textarea>
</div>

<script at="Foot">
$(function () {
    var textArea = document.getElementById('@Html.IdFor(x => x.GetRolesScript)');
    var syncRolesCheckbox = document.getElementById('@Html.IdFor(x => x.SyncRolesFromExternalProviders)');

    if (textArea == null) {
        return;
    }

    var editor = CodeMirror.fromTextArea(textArea, {
        autoRefresh: true,
        lineNumbers: true,
        styleActiveLine: true,
        matchBrackets: true,
        mode: { name: "javascript" },
        readOnly: 'nocursor'
    });

    if (editor.doc.lineCount() == 1) {
        editor.doc.setValue('/*****************************************************************************\n' +
                            ' Use the claims variable to inspect the external identity claims and\n'+
                            ' return a list of roles.Each claim has the following properties\n' +
                            ' { Issuer, OriginalIssuer, Properties, Type, Value, ValueType }\n' +
                            ' You can use log(level, text) to append to OrchardCore log file\n' +
                            ' The provider variable holds the provider id of the claims\n' +
                            ' The script must return a list of roles or false if no sync should occur\n' +
                            '*****************************************************************************/\n');
        editor.markText({ line: 0, ch: 0 }, { line: 8 }, { readOnly: true });
    };

    $('#@Html.IdFor(x => x.GetRolesScript)').data('editor', editor);


    function toggleEditorState() {
        var editor = $('#@Html.IdFor(x => x.GetRolesScript)').data('editor');
        if (editor.options.readOnly === "nocursor") {
            editor.options.readOnly = false;
        } else {
            editor.options.readOnly = "nocursor";
        }
    }

    syncRolesCheckbox.addEventListener("change", toggleEditorState);


});
</script>