@model SummaryAdminUserViewModel
@using OrchardCore.Entities
@using OrchardCore.Users.Models
@using Microsoft.AspNetCore.Identity
@using OrchardCore.Users
@inject UserManager<IUser> UserManager
@inject IAuthorizationService AuthorizationService
@{
    var user = Model.User as User;
    var currentUser = user.UserName == User.Identity.Name;
    var canEdit = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.EditUsers, user);
    var isLockedOut = await UserManager.IsLockedOutAsync(user);
}

@if (canEdit)
{
    <a asp-action="Edit" asp-route-id="@user.UserId" class="btn btn-primary btn-sm">@T["Edit"]</a>

    <a asp-action="EditPassword" asp-route-id="@user.UserId" class="btn btn-secondary btn-sm">@T["Edit Password"]</a>
    if (isLockedOut)
    {
        <a asp-action="Unlock" asp-route-id="@user.UserId" class="btn btn-danger btn-sm" data-url-af="RemoveUrl UnsafeUrl" data-title="@T["Unlock user"]" data-message="@T["Are you sure you want to unlock this user?"]">@T["Unlock"]</a>
    }
}

@if (!currentUser && await AuthorizationService.AuthorizeAsync(User, CommonPermissions.DeleteUsers, user))
{
    <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@user.UserId" data-url-af="RemoveUrl UnsafeUrl">@T["Delete"]</a>
}

@if (canEdit && !user.EmailConfirmed && Site.As<RegistrationSettings>().UsersMustValidateEmail)
{
    <form method="post" class="d-inline-block" class="no-multisubmit">
        <input name="id" type="hidden" value="@user.UserId" />
        <button asp-action="SendVerificationEmail" asp-controller="Registration" class="btn btn-info btn-sm">@T["Send verification email"]</button>
    </form>
}
