@model dynamic
@addTagHelper "*, OrchardCore.Resources"
@addTagHelper "*, OrchardCore.Demo"

@Model.Line

@*
    The way it is done from a View is to use a DisplayHelper which is created for
    each view. It return an IHtmlString
*@
@await DisplayAsync(Model)

@*
    We can still call the DisplHelper with methods
*@
@await New.Bar()

@*
    Or attribute shapes
*@
@await New.Baz(text: "Foo")

<shape type="Baz" text="Hello" count="3" />
<baz text="Bertrand" count="4" />

<shape type="EmbedContentInShape">
    The inner HTML of the <code>&lt;shape&gt;</code> tag helper is converted into HTML and then passed to the shape as
    the <code>IHtmlContent Content</code> model property.
    <shape type="TestContentPartA" Line="Sample Data" Creating="Now" Processing="Later" />
    Even other shapes!
</shape>

<shape type="EmbedContentInShape" content="If an attribute called 'Content' already exists, it takes priority to preserve backwards compatibility.">
    This content is ignored.
</shape>