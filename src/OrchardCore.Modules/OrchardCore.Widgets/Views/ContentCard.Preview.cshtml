@using OrchardCore.DisplayManagement.Shapes;

@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@{
    var contentItem = (IContent)Model.ContentItem;
    var contentTypeDisplayText = ContentDefinitionManager.GetTypeDefinition((string)Model.ContentItem.ContentType).DisplayName;
    var contentItemDisplayText = contentItem.ContentItem.DisplayText;
}
<div class="widget widget-editor card my-1 @(Model.Inline != true ? "collapsed" : "")">
    <div class="widget-editor-header card-header text-muted py-1 pl-3 pr-1" >
        @if (Model.CanMove != false)
        {
            <div class="widget-editor-handle"><i class="fas fa-arrows-alt"></i></div>
        }

        <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-collapse mr-2"><i class="fa fa-angle-down" aria-hidden="true"></i></button>
        <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-expand mr-2"><i class="fa fa-angle-right" aria-hidden="true"></i></button>

        @*Display Default Header text for all Content Card*@
        <div class="widget-card-title">
            <span data-card-bind="Title">@T["{0}", contentItemDisplayText]</span>
            <span class="badge badge-primary">@contentTypeDisplayText</span>
        </div>

    </div>
    
    @if (Model.Content != null && Model.Content is Shape && Model.Content.Items.Count > 0)
    {
        <div class="widget-editor-body card-body px-2 py-1">
            <div class="w-100">
                @await DisplayAsync(Model.Content)
            </div>
        </div>
    }    
</div>
