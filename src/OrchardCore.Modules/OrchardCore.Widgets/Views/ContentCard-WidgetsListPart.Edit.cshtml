@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement.Metadata.Settings;
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager

@{
    var contentType = ContentDefinitionManager.GetTypeDefinition((string)Model.ContentItem.ContentType).DisplayName;
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == "Widget");
}

<div class="widget widget-editor card my-1 @(Model.Inline != true ? "collapsed" : "")">
    <div class="widget-editor-header card-header text-muted  py-1 pl-3 pr-1">
        @if (Model.CanMove != false)
        {
            <div class="widget-editor-handle"><i class="fas fa-arrows-alt"></i></div>
        }
        @if (Model.IsCollapsible != false)
        {
            <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-collapse mr-2"><i class="fa fa-angle-down" aria-hidden="true"></i></button>
            <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-expand mr-2"><i class="fa fa-angle-right" aria-hidden="true"></i></button>
        }
        @contentType
        <div class="btn-group btn-group-sm float-right" role="group">
            @if (Model.CanInsert != false)
            {
                @* Todo: Inject to Footer via ContentCard Driver  *@
                @await DisplayAsync(await New.ToolInsertWidget(
                CanInsert: Model.CanInsert,
                AppendWidget: false,
                ShowInsertLabel : false,
                TargetId: Model.TargetId,
                BuildEditorRouteValues: new RouteValueDictionary(new
                {
                    area = "OrchardCore.Widgets",
                    prefixesName = Model.PrefixesName,
                    contentTypesName = Model.ContentTypesName,
                    zonesName = Model.ZonesName,
                    zone = Model.ZoneValue,
                    targetId = Model.TargetId,
                    parentContentType =Model.ParentContentType,
                    partName = Model.CollectionPartName
                })))
            }

            @if (Model.CanDelete != false)
            {
                <button type="button" class="btn btn-danger widget-delete" data-title="@T["Delete"]" data-message="@T["Are you sure you want to remove this item?"]"><i class="fa fa-trash" aria-hidden="true"></i></button>
            }
        </div>
    </div>
    <div class="widget-editor-body card-body px-2 py-2">
        <div class="w-100">
            @if (Model.ContentEditor != null)
            {
                @await DisplayAsync(Model.ContentEditor)
            }
        </div>
     </div>
    @if (Model.Footer != null)
    {
        <div class="widget-editor-footer card-footer text-muted px-1 py-1">
                @await DisplayAsync(Model.Footer)
        </div>
    }
</div>
