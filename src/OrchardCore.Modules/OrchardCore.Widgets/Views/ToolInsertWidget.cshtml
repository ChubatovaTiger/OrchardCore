@using System.Web;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement;
@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.ContentManagement.Metadata.Models;
@using OrchardCore.DisplayManagement.ModelBinding;

@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager
@inject IContentManager ContentManager


@{
    async Task RegisterResourceAsync(ContentTypeDefinition type)
    {
        if (Context.Items["InsertToolWidget.AllWidget.Edit:" + type.Name] == null)
        {
            Context.Items["InsertToolWidget.AllWidget.Edit:" + type.Name] = new object();

            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            var updater = new NullModelUpdater();
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, updater, true, "", Guid.NewGuid().ToString("n")));
        }
    }

    IEnumerable<ContentTypeDefinition> widgetContentTypes = Model.WidgetContentTypes as IEnumerable<ContentTypeDefinition>;

    if (widgetContentTypes == null)
    {
        if (Context.Items["InsertToolWidget.AllWidget.Edit"] == null)
        {
            // Get All widget definitions
            widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == "Widget");

            // Register resources for all widgets
            foreach (var type in widgetContentTypes)
            {
                await RegisterResourceAsync(type);
            }

            // Save in context for current request
            Context.Items["InsertToolWidget.AllWidget.Edit"] = widgetContentTypes;

        }
        else
        {
            // Get from context for current request
            widgetContentTypes = (IEnumerable<ContentTypeDefinition>)Context.Items["InsertToolWidget.AllWidget.Edit"];
        }
    }


    var widgetTitle = Model.AppendWidget == true ? T["Add Item"] : T["Insert Item"];
    RouteValueDictionary routes = Model.BuildEditorRouteValues ?? new RouteValueDictionary();
}
@if (Model.CanInsert != false)
{
    <div class="btn-group">

        <button type="button" title="@widgetTitle" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="fa fa-plus" aria-hidden="true"></i>
            @if (Model.AppendWidget == true)
            {
                <span>@widgetTitle</span>
            }
        </button>
        <div class="dropdown-menu dropdown-menu-right">
            @foreach (var type in widgetContentTypes.OrderBy(w => w.DisplayName))
            {
                await RegisterResourceAsync(type);
                routes["id"] = type.Name;
                var buildEditorUrl = @Url.Action("BuildEditor", "Admin", routes);

                <a class="dropdown-item btn-sm tool-insert-widget"
                   data-append="@Model.AppendWidget"
                   data-widget-type="@type.Name"
                   data-target-id="@Model.TargetId"
                   data-buildeditorurl="@buildEditorUrl"
                   href="javascript:;">@type.DisplayName</a>
            }
        </div>
    </div>
}