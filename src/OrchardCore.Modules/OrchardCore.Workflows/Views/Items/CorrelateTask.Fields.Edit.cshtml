@using OrchardCore.Workflows.ViewModels
@model CorrelateTaskViewModel

<div class="form-group mb-3">
    <div class="custom-control custom-checkbox">
        <input type="checkbox" class="custom-control-input" asp-for="IsLiquidSyntax" checked="@Model.IsLiquidSyntax" />
        <label class="custom-control-label" asp-for="IsLiquidSyntax">@T["Is Liquid syntax"]</label>
        <span class="hint dashed">
            @T["Choose between Liquid or JavaScript support."]
        </span>
    </div>
</div>

<div class="mb-3" asp-validation-class-for="Value">
    <label asp-for="Value" class="form-label">@T["Value"]</label>
    <input type="hidden" asp-for="Value" class="form-control"/>
    <div id="@Html.IdFor(x => x.Value)_editor" asp-for="Text" class="form-control"></div>
    <span asp-validation-for="Value"></span>
    <span id="liquid_hint" class="hint @(Model.IsLiquidSyntax ? "" : "d-none")">@T["The value to correlate workflow instances with. With Liquid support."]</span>
    <span id="javascript_hint" class="hint @(Model.IsLiquidSyntax ? "d-none" : "")">@T["The value to correlate workflow instances with. With JavaScript support."]</span>
</div>
<script asp-name="monaco" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    document.addEventListener('DOMContentLoaded', function () {
        require(['vs/editor/editor.main'], function () {
            var settings = {
                "automaticLayout": true,
                "language": "@(Model.IsLiquidSyntax ? "liquid" : "javascript")"
            };

            var html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(x => x.Value)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.Value)');

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });

            $('#@Html.IdFor(x => x.IsLiquidSyntax)').on('change', function() {
                if ($(this).is(":checked")) {
                    monaco.editor.setModelLanguage(editor.getModel(), 'liquid');
                    document.getElementById('javascript_hint').classList.add('d-none');
                    document.getElementById('liquid_hint').classList.remove('d-none');
                } else {
                    monaco.editor.setModelLanguage(editor.getModel(), 'javascript');
                    document.getElementById('liquid_hint').classList.add('d-none');
                    document.getElementById('javascript_hint').classList.remove('d-none');
                }
            });
        });
    });
</script>

