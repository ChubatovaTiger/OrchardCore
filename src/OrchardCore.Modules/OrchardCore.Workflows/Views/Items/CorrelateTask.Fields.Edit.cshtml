@using OrchardCore.Workflows.ViewModels
@model CorrelateTaskViewModel

<div class="form-group mb-3" asp-validation-class-for="Syntax">
    <label asp-for="Syntax" class="form-label">@T["Syntax"]</label>
    <select asp-for="Syntax" class="form-select">
        <option>JavaScript</option>
        <option>Liquid</option>
    </select>
    <span asp-validation-for="Syntax"></span>
    <span class="hint">@T["Choose between Liquid or JavaScript syntax."]</span>
</div>

<div class="mb-3" asp-validation-class-for="Value">
    <label asp-for="Value" class="form-label">@T["Value"]</label>
    <input type="hidden" asp-for="Value" />
    <div id="@Html.IdFor(x => x.Value)_editor" asp-for="Value" class="form-control" style="min-height: 100px;"></div>
    <span asp-validation-for="Value"></span>
    <span id="liquid_hint" class="hint @(Model.Syntax == "Liquid" ? "" : "d-none")">@T["The value to correlate workflow instances with. With Liquid support."]</span>
    <span id="javascript_hint" class="hint @(Model.Syntax == "JavaScript" ? "d-none" : "")">@T["The value to correlate workflow instances with. With JavaScript support."]</span>
</div>
<script asp-name="monaco" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    document.addEventListener('DOMContentLoaded', function () {
        require(['vs/editor/editor.main'], function () {
            var settings = {
                "automaticLayout": true,
                "language": "@(Model.Syntax.ToLowerInvariant())"
            };

            var html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(x => x.Value)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.Value)');

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });

            document.getElementById('@Html.IdFor(x => x.Syntax)').addEventListener("change", (e) => {
                var syntax = e.target.value.toLowerCase();
                monaco.editor.setModelLanguage(editor.getModel(), syntax);
                if (syntax == 'javascript') {
                    document.getElementById('liquid_hint').classList.add('d-none');
                    document.getElementById('javascript_hint').classList.remove('d-none');
                } else {
                    document.getElementById('javascript_hint').classList.add('d-none');
                    document.getElementById('liquid_hint').classList.remove('d-none');
                }
            });
        });
    });
</script>

