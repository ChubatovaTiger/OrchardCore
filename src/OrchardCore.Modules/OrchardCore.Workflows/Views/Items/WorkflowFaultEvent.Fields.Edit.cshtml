@using OrchardCore.Workflows.Models
@model WorkflowFaultViewModel
 

 
 <div class="form-group" asp-validation-class-for="ErrorFilter">
    <label asp-for="ErrorFilter">@T["Trigger Condition"]</label>
    <div id="@Html.IdFor(x => x.ErrorFilter)_editor" asp-for="Text" style="min-height: 400px;" class="form-control"></div>
     <textarea asp-for="ErrorFilter" hidden>@Html.Raw(Model.ErrorFilter)</textarea>
    <span asp-validation-for="ErrorFilter"></span>
    <span class="hint">@T["A collection of workflow names that need to return a collection of strings. Javascript syntax."]</span><br />
    <span class="hint">@T["Get error information： input('{0}')",WorkflowFaultModel.WorkflowFaultInputKey]</span><br />
    <span class="hint">@T["Contains the following attributes："]</span><br />
    <span class="hint">@T["{0}：workflow Id",nameof( WorkflowFaultModel.WorkflowId)]</span><br />
    <span class="hint">@T["{0}：Workflow name",nameof( WorkflowFaultModel.WorkflowName)]</span><br />
    <span class="hint">@T["{0}：Number of executed nodes",nameof( WorkflowFaultModel.ExcutedActivityCount)]</span><br />
    <span class="hint">@T["{0}：The name of the node",nameof( WorkflowFaultModel.ActivityDisplayName)]</span><br />
    <span class="hint">@T["{0}：Node Type Name",nameof( WorkflowFaultModel.ActivityTypeName)]</span><br />
    <span class="hint">@T["{0}：Node Id",nameof( WorkflowFaultModel.ActivityId)]</span><br />
    <span class="hint">@T["{0}：Exception Information Summary",nameof( WorkflowFaultModel.ErrorMessage)]</span><br />
    <span class="hint">@T["{0}：Exception Details",nameof( WorkflowFaultModel.ExceptionDetails)]</span><br />
    <span class="hint">@T["{0}：Contains error messages manually raised by workflow nodes",nameof( WorkflowFaultModel.FaultMessage)]</span><br />
    
</div>

<script asp-name="monaco" depends-on="admin" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    $(document).ready(function () {
        require(['vs/editor/editor.main'], function () {
            var settings=  {
                  "automaticLayout": true,
                  "language": "javascript"
                };

            var html = document.getElementsByTagName("html")[0];
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.theme;
                if (theme === "darkmode") {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(x => x.ErrorFilter)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.ErrorFilter)');

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });
        });
    });
</script>



