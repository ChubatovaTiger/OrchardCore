/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
var WorkflowEditor = /** @class */ (function () {
    function WorkflowEditor(container, workflowDefinitionData, deleteActivityPrompt) {
        var _this = this;
        this.container = container;
        this.serialize = function () {
            var allActivityElements = $(this.container).find('.activity');
            var workflow = {
                activities: [],
                transitions: []
            };
            // Collect activity positions.
            for (var i = 0; i < allActivityElements.length; i++) {
                var activityElementQuery = $(allActivityElements[i]);
                var activityId = activityElementQuery.data('activity-id');
                var activityIsStart = activityElementQuery.data('activity-start');
                var activityPosition = activityElementQuery.position();
                workflow.activities.push({
                    id: activityId,
                    isStart: activityIsStart,
                    x: activityPosition.left,
                    y: activityPosition.top
                });
            }
            // Collect activity connections.
            var allConnections = this.jsPlumbInstance.getConnections();
            for (var i = 0; i < allConnections.length; i++) {
                var connection = allConnections[i];
                var sourceEndpoint = connection.endpoints[0];
                var sourceOutcomeName = sourceEndpoint.getParameters().outcome.name;
                var sourceActivityId = $(connection.source).data('activity-id');
                var destinationActivityId = $(connection.target).data('activity-id');
                workflow.transitions.push({
                    sourceActivityId: sourceActivityId,
                    destinationActivityId: destinationActivityId,
                    sourceOutcomeName: sourceOutcomeName
                });
            }
            return JSON.stringify(workflow);
        };
        jsPlumb.ready(function () {
            var plumber = jsPlumb.getInstance({
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                ConnectionOverlays: [
                    ['Arrow', {
                            location: 1,
                            visible: true,
                            width: 11,
                            length: 11
                        }],
                    ['Label', {
                            location: 0.5,
                            id: 'label',
                            cssClass: 'connection-label'
                        }]
                ],
                Container: container
            });
            var getSourceEndpointOptions = function (activity, outcome) {
                // The definition of source endpoints.
                return {
                    endpoint: 'Dot',
                    anchor: 'Continuous',
                    paintStyle: {
                        stroke: '#7AB02C',
                        fill: '#7AB02C',
                        radius: 7,
                        strokeWidth: 1
                    },
                    isSource: true,
                    connector: ['Flowchart', { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],
                    connectorStyle: {
                        strokeWidth: 2,
                        stroke: '#999999',
                        joinstyle: 'round',
                        outlineStroke: 'white',
                        outlineWidth: 2
                    },
                    hoverPaintStyle: {
                        fill: '#216477',
                        stroke: '#216477'
                    },
                    connectorHoverStyle: {
                        strokeWidth: 3,
                        stroke: '#216477',
                        outlineWidth: 5,
                        outlineStroke: 'white'
                    },
                    dragOptions: {},
                    overlays: [
                        ['Label', {
                                location: [0.5, 1.5],
                                //label: outcome.displayName,
                                cssClass: 'endpointSourceLabel',
                                visible: true
                            }]
                    ],
                    uuid: activity.id + "-" + outcome.name,
                    parameters: {
                        outcome: outcome
                    }
                };
            };
            // Listen for new connections.
            plumber.bind('connection', function (connInfo, originalEvent) {
                var connection = connInfo.connection;
                var outcome = connection.getParameters().outcome;
                var label = connection.getOverlay('label');
                label.setLabel(outcome.displayName);
            });
            var activityElements = $(container).find('.activity');
            // Suspend drawing and initialize.
            plumber.batch(function () {
                var workflowModel = workflowDefinitionData;
                var workflowId = workflowModel.id;
                activityElements.each(function (index, activityElement) {
                    var activityElementQuery = $(activityElement);
                    var activityId = activityElementQuery.data('activity-id');
                    // Make the activity draggable.
                    plumber.draggable(activityElement, { grid: [10, 10], });
                    // Configure the activity as a target.
                    plumber.makeTarget(activityElement, {
                        dropOptions: { hoverClass: 'hover' },
                        anchor: 'Continuous',
                        endpoint: ['Blank', { radius: 8 }]
                    });
                    // Add source endpoints.
                    var activity = $.grep(workflowModel.activities, function (x) { return x.id == activityId; })[0];
                    var hasMultipleOutcomes = activity.outcomes.length > 1;
                    for (var _i = 0, _a = activity.outcomes; _i < _a.length; _i++) {
                        var outcome = _a[_i];
                        var sourceEndpointOptions = getSourceEndpointOptions(activity, outcome);
                        plumber.addEndpoint(activityElement, sourceEndpointOptions);
                    }
                });
                // Connect activities.
                for (var _i = 0, _a = workflowModel.transitions; _i < _a.length; _i++) {
                    var transitionModel = _a[_i];
                    var sourceEndpointUuid = transitionModel.sourceActivityId + "-" + transitionModel.sourceOutcomeName;
                    var sourceEndpoint = plumber.getEndpoint(sourceEndpointUuid);
                    var destinationElementId = "activity-" + workflowId + "-" + transitionModel.destinationActivityId;
                    plumber.connect({
                        source: sourceEndpoint,
                        target: destinationElementId
                    });
                }
                plumber.bind('contextmenu', function (component, originalEvent) {
                });
                plumber.bind('connectionDrag', function (connection) {
                    console.log('connection ' + connection.id + ' is being dragged. suspendedElement is ', connection.suspendedElement, ' of type ', connection.suspendedElementType);
                });
                plumber.bind('connectionDragStop', function (connection) {
                    console.log('connection ' + connection.id + ' was dragged');
                });
                plumber.bind('connectionMoved', function (params) {
                    console.log('connection ' + params.connection.id + ' was moved');
                });
            });
            // Initialize popovers.
            activityElements.popover({
                trigger: 'manual',
                html: true,
                content: function () {
                    var activityElement = $(this);
                    var content = activityElement.find('.activity-commands').clone().show();
                    var startButton = content.find('.activity-start-action');
                    var isStart = activityElement.data('activity-start') === true;
                    startButton.attr('aria-pressed', activityElement.data('activity-start'));
                    startButton.toggleClass('active', isStart);
                    content.on('click', '.activity-start-action', function (e) {
                        e.preventDefault();
                        var button = $(e.currentTarget);
                        button.button('toggle');
                        var isStart = button.is('.active');
                        activityElement.data('activity-start', isStart);
                        activityElement.toggleClass('activity-start', isStart);
                    });
                    content.on('click', '.activity-delete-action', function (e) {
                        e.preventDefault();
                        if (!confirm(deleteActivityPrompt)) {
                            return;
                        }
                        plumber.remove(activityElement);
                        activityElement.popover('dispose');
                    });
                    return content.get(0);
                }
            });
            $(container).on('click', '.activity', function (e) {
                if (_this.isDragging) {
                    return;
                }
                // if any other popovers are visible, hide them
                if (_this.isPopoverVisible) {
                    activityElements.popover('hide');
                }
                var sender = $(e.currentTarget);
                sender.popover('show');
                // handle clicking on the popover itself.
                $('.popover').off('click').on('click', function (e2) {
                    e2.stopPropagation();
                });
                e.stopPropagation();
                _this.isPopoverVisible = true;
            });
            $(container).on('dblclick', '.activity', function (e) {
                var sender = $(e.currentTarget);
                sender.find('.activity-edit-action').get(0).click();
            });
            // Hide all popovers when clicking anywhere but on an activity.
            $('body').on('click', function (e) {
                activityElements.popover('hide');
                _this.isPopoverVisible = false;
            });
            _this.jsPlumbInstance = plumber;
        });
    }
    return WorkflowEditor;
}());
$.fn.workflowEditor = function () {
    this.each(function (index, element) {
        var $element = $(element);
        var workflowDefinitionData = $element.data('workflow-definition');
        var deleteActivityPrompt = $element.data('workflow-delete-activity-prompt');
        $element.data('workflowEditor', new WorkflowEditor(element, workflowDefinitionData, deleteActivityPrompt));
    });
    return this;
};
$(document).ready(function () {
    var workflowEditor = $('.workflow-editor-canvas').workflowEditor().data('workflowEditor');
    $('#workflowEditorForm').on('submit', function (s, e) {
        var state = workflowEditor.serialize();
        $('#workflowStateInput').val(state);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
