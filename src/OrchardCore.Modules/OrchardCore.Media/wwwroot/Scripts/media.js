/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * jQuery File Upload Plugin
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2010, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define, require */

/* eslint-disable new-cap */
(function (factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    // Register as an anonymous AMD module:
    define(['jquery', 'jquery-ui/ui/widget'], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node/CommonJS:
    factory(require('jquery'), require('./vendor/jquery.ui.widget'));
  } else {
    // Browser globals:
    factory(window.jQuery);
  }
})(function ($) {
  'use strict'; // Detect file input support, based on
  // https://viljamis.com/2012/file-upload-support-on-mobile/

  $.support.fileInput = !(new RegExp( // Handle devices which give false positives for the feature detection:
  '(Android (1\\.[0156]|2\\.[01]))' + '|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' + '|(w(eb)?OSBrowser)|(webOS)' + '|(Kindle/(1\\.0|2\\.[05]|3\\.0))').test(window.navigator.userAgent) || // Feature detection for all other devices:
  $('<input type="file"/>').prop('disabled')); // The FileReader API is not actually used, but works as feature detection,
  // as some Safari versions (5?) support XHR file uploads via the FormData API,
  // but not non-multipart XHR file uploads.
  // window.XMLHttpRequestUpload is not available on IE10, so we check for
  // window.ProgressEvent instead to detect XHR2 file upload capability:

  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
  $.support.xhrFormDataFileUpload = !!window.FormData; // Detect support for Blob slicing (required for chunked uploads):

  $.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
  /**
   * Helper function to create drag handlers for dragover/dragenter/dragleave
   *
   * @param {string} type Event type
   * @returns {Function} Drag handler
   */

  function getDragHandler(type) {
    var isDragOver = type === 'dragover';
    return function (e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var dataTransfer = e.dataTransfer;

      if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 && this._trigger(type, $.Event(type, {
        delegatedEvent: e
      })) !== false) {
        e.preventDefault();

        if (isDragOver) {
          dataTransfer.dropEffect = 'copy';
        }
      }
    };
  } // The fileupload widget listens for change events on file input fields defined
  // via fileInput setting and paste or drop events of the given dropZone.
  // In addition to the default jQuery Widget methods, the fileupload widget
  // exposes the "add" and "send" methods, to add or directly send files using
  // the fileupload API.
  // By default, files added via file input selection, paste, drag & drop or
  // "add" method are uploaded immediately, but it is possible to override
  // the "add" callback option to queue file uploads.


  $.widget('blueimp.fileupload', {
    options: {
      // The drop target element(s), by the default the complete document.
      // Set to null to disable drag & drop support:
      dropZone: $(document),
      // The paste target element(s), by the default undefined.
      // Set to a DOM node or jQuery object to enable file pasting:
      pasteZone: undefined,
      // The file input field(s), that are listened to for change events.
      // If undefined, it is set to the file input fields inside
      // of the widget element on plugin initialization.
      // Set to null to disable the change listener.
      fileInput: undefined,
      // By default, the file input field is replaced with a clone after
      // each input field change event. This is required for iframe transport
      // queues and allows change events to be fired for the same file
      // selection, but can be disabled by setting the following option to false:
      replaceFileInput: true,
      // The parameter name for the file form data (the request argument name).
      // If undefined or empty, the name property of the file input field is
      // used, or "files[]" if the file input name property is also empty,
      // can be a string or an array of strings:
      paramName: undefined,
      // By default, each file of a selection is uploaded using an individual
      // request for XHR type uploads. Set to false to upload file
      // selections in one request each:
      singleFileUploads: true,
      // To limit the number of files uploaded with one XHR request,
      // set the following option to an integer greater than 0:
      limitMultiFileUploads: undefined,
      // The following option limits the number of files uploaded with one
      // XHR request to keep the request size under or equal to the defined
      // limit in bytes:
      limitMultiFileUploadSize: undefined,
      // Multipart file uploads add a number of bytes to each uploaded file,
      // therefore the following option adds an overhead for each file used
      // in the limitMultiFileUploadSize configuration:
      limitMultiFileUploadSizeOverhead: 512,
      // Set the following option to true to issue all file upload requests
      // in a sequential order:
      sequentialUploads: false,
      // To limit the number of concurrent uploads,
      // set the following option to an integer greater than 0:
      limitConcurrentUploads: undefined,
      // Set the following option to true to force iframe transport uploads:
      forceIframeTransport: false,
      // Set the following option to the location of a redirect url on the
      // origin server, for cross-domain iframe transport uploads:
      redirect: undefined,
      // The parameter name for the redirect url, sent as part of the form
      // data and set to 'redirect' if this option is empty:
      redirectParamName: undefined,
      // Set the following option to the location of a postMessage window,
      // to enable postMessage transport uploads:
      postMessage: undefined,
      // By default, XHR file uploads are sent as multipart/form-data.
      // The iframe transport is always using multipart/form-data.
      // Set to false to enable non-multipart XHR uploads:
      multipart: true,
      // To upload large files in smaller chunks, set the following option
      // to a preferred maximum chunk size. If set to 0, null or undefined,
      // or the browser does not support the required Blob API, files will
      // be uploaded as a whole.
      maxChunkSize: undefined,
      // When a non-multipart upload or a chunked multipart upload has been
      // aborted, this option can be used to resume the upload by setting
      // it to the size of the already uploaded bytes. This option is most
      // useful when modifying the options object inside of the "add" or
      // "send" callbacks, as the options are cloned for each file upload.
      uploadedBytes: undefined,
      // By default, failed (abort or error) file uploads are removed from the
      // global progress calculation. Set the following option to false to
      // prevent recalculating the global progress data:
      recalculateProgress: true,
      // Interval in milliseconds to calculate and trigger progress events:
      progressInterval: 100,
      // Interval in milliseconds to calculate progress bitrate:
      bitrateInterval: 500,
      // By default, uploads are started automatically when adding files:
      autoUpload: true,
      // By default, duplicate file names are expected to be handled on
      // the server-side. If this is not possible (e.g. when uploading
      // files directly to Amazon S3), the following option can be set to
      // an empty object or an object mapping existing filenames, e.g.:
      // { "image.jpg": true, "image (1).jpg": true }
      // If it is set, all files will be uploaded with unique filenames,
      // adding increasing number suffixes if necessary, e.g.:
      // "image (2).jpg"
      uniqueFilenames: undefined,
      // Error and info messages:
      messages: {
        uploadedBytes: 'Uploaded bytes exceed file size'
      },
      // Translation function, gets the message key to be translated
      // and an object with context specific data as arguments:
      i18n: function i18n(message, context) {
        // eslint-disable-next-line no-param-reassign
        message = this.messages[message] || message.toString();

        if (context) {
          $.each(context, function (key, value) {
            // eslint-disable-next-line no-param-reassign
            message = message.replace('{' + key + '}', value);
          });
        }

        return message;
      },
      // Additional form data to be sent along with the file uploads can be set
      // using this option, which accepts an array of objects with name and
      // value properties, a function returning such an array, a FormData
      // object (for XHR file uploads), or a simple object.
      // The form of the first fileInput is given as parameter to the function:
      formData: function formData(form) {
        return form.serializeArray();
      },
      // The add callback is invoked as soon as files are added to the fileupload
      // widget (via file input selection, drag & drop, paste or add API call).
      // If the singleFileUploads option is enabled, this callback will be
      // called once for each file in the selection for XHR file uploads, else
      // once for each file selection.
      //
      // The upload starts when the submit method is invoked on the data parameter.
      // The data object contains a files property holding the added files
      // and allows you to override plugin options as well as define ajax settings.
      //
      // Listeners for this callback can also be bound the following way:
      // .on('fileuploadadd', func);
      //
      // data.submit() returns a Promise object and allows to attach additional
      // handlers using jQuery's Deferred callbacks:
      // data.submit().done(func).fail(func).always(func);
      add: function add(e, data) {
        if (e.isDefaultPrevented()) {
          return false;
        }

        if (data.autoUpload || data.autoUpload !== false && $(this).fileupload('option', 'autoUpload')) {
          data.process().done(function () {
            data.submit();
          });
        }
      },
      // Other callbacks:
      // Callback for the submit event of each file upload:
      // submit: function (e, data) {}, // .on('fileuploadsubmit', func);
      // Callback for the start of each file upload request:
      // send: function (e, data) {}, // .on('fileuploadsend', func);
      // Callback for successful uploads:
      // done: function (e, data) {}, // .on('fileuploaddone', func);
      // Callback for failed (abort or error) uploads:
      // fail: function (e, data) {}, // .on('fileuploadfail', func);
      // Callback for completed (success, abort or error) requests:
      // always: function (e, data) {}, // .on('fileuploadalways', func);
      // Callback for upload progress events:
      // progress: function (e, data) {}, // .on('fileuploadprogress', func);
      // Callback for global upload progress events:
      // progressall: function (e, data) {}, // .on('fileuploadprogressall', func);
      // Callback for uploads start, equivalent to the global ajaxStart event:
      // start: function (e) {}, // .on('fileuploadstart', func);
      // Callback for uploads stop, equivalent to the global ajaxStop event:
      // stop: function (e) {}, // .on('fileuploadstop', func);
      // Callback for change events of the fileInput(s):
      // change: function (e, data) {}, // .on('fileuploadchange', func);
      // Callback for paste events to the pasteZone(s):
      // paste: function (e, data) {}, // .on('fileuploadpaste', func);
      // Callback for drop events of the dropZone(s):
      // drop: function (e, data) {}, // .on('fileuploaddrop', func);
      // Callback for dragover events of the dropZone(s):
      // dragover: function (e) {}, // .on('fileuploaddragover', func);
      // Callback before the start of each chunk upload request (before form data initialization):
      // chunkbeforesend: function (e, data) {}, // .on('fileuploadchunkbeforesend', func);
      // Callback for the start of each chunk upload request:
      // chunksend: function (e, data) {}, // .on('fileuploadchunksend', func);
      // Callback for successful chunk uploads:
      // chunkdone: function (e, data) {}, // .on('fileuploadchunkdone', func);
      // Callback for failed (abort or error) chunk uploads:
      // chunkfail: function (e, data) {}, // .on('fileuploadchunkfail', func);
      // Callback for completed (success, abort or error) chunk upload requests:
      // chunkalways: function (e, data) {}, // .on('fileuploadchunkalways', func);
      // The plugin options are used as settings object for the ajax calls.
      // The following are jQuery ajax settings required for the file uploads:
      processData: false,
      contentType: false,
      cache: false,
      timeout: 0
    },
    // jQuery versions before 1.8 require promise.pipe if the return value is
    // used, as promise.then in older versions has a different behavior, see:
    // https://blog.jquery.com/2012/08/09/jquery-1-8-released/
    // https://bugs.jquery.com/ticket/11010
    // https://github.com/blueimp/jQuery-File-Upload/pull/3435
    _promisePipe: function () {
      var parts = $.fn.jquery.split('.');
      return Number(parts[0]) > 1 || Number(parts[1]) > 7 ? 'then' : 'pipe';
    }(),
    // A list of options that require reinitializing event listeners and/or
    // special initialization code:
    _specialOptions: ['fileInput', 'dropZone', 'pasteZone', 'multipart', 'forceIframeTransport'],
    _blobSlice: $.support.blobSlice && function () {
      var slice = this.slice || this.webkitSlice || this.mozSlice;
      return slice.apply(this, arguments);
    },
    _BitrateTimer: function _BitrateTimer() {
      this.timestamp = Date.now ? Date.now() : new Date().getTime();
      this.loaded = 0;
      this.bitrate = 0;

      this.getBitrate = function (now, loaded, interval) {
        var timeDiff = now - this.timestamp;

        if (!this.bitrate || !interval || timeDiff > interval) {
          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
          this.loaded = loaded;
          this.timestamp = now;
        }

        return this.bitrate;
      };
    },
    _isXHRUpload: function _isXHRUpload(options) {
      return !options.forceIframeTransport && (!options.multipart && $.support.xhrFileUpload || $.support.xhrFormDataFileUpload);
    },
    _getFormData: function _getFormData(options) {
      var formData;

      if ($.type(options.formData) === 'function') {
        return options.formData(options.form);
      }

      if ($.isArray(options.formData)) {
        return options.formData;
      }

      if ($.type(options.formData) === 'object') {
        formData = [];
        $.each(options.formData, function (name, value) {
          formData.push({
            name: name,
            value: value
          });
        });
        return formData;
      }

      return [];
    },
    _getTotal: function _getTotal(files) {
      var total = 0;
      $.each(files, function (index, file) {
        total += file.size || 1;
      });
      return total;
    },
    _initProgressObject: function _initProgressObject(obj) {
      var progress = {
        loaded: 0,
        total: 0,
        bitrate: 0
      };

      if (obj._progress) {
        $.extend(obj._progress, progress);
      } else {
        obj._progress = progress;
      }
    },
    _initResponseObject: function _initResponseObject(obj) {
      var prop;

      if (obj._response) {
        for (prop in obj._response) {
          if (Object.prototype.hasOwnProperty.call(obj._response, prop)) {
            delete obj._response[prop];
          }
        }
      } else {
        obj._response = {};
      }
    },
    _onProgress: function _onProgress(e, data) {
      if (e.lengthComputable) {
        var now = Date.now ? Date.now() : new Date().getTime(),
            loaded;

        if (data._time && data.progressInterval && now - data._time < data.progressInterval && e.loaded !== e.total) {
          return;
        }

        data._time = now;
        loaded = Math.floor(e.loaded / e.total * (data.chunkSize || data._progress.total)) + (data.uploadedBytes || 0); // Add the difference from the previously loaded state
        // to the global loaded counter:

        this._progress.loaded += loaded - data._progress.loaded;
        this._progress.bitrate = this._bitrateTimer.getBitrate(now, this._progress.loaded, data.bitrateInterval);
        data._progress.loaded = data.loaded = loaded;
        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval); // Trigger a custom progress event with a total data property set
        // to the file size(s) of the current upload and a loaded data
        // property calculated accordingly:

        this._trigger('progress', $.Event('progress', {
          delegatedEvent: e
        }), data); // Trigger a global progress event for all current file uploads,
        // including ajax calls queued for sequential file uploads:


        this._trigger('progressall', $.Event('progressall', {
          delegatedEvent: e
        }), this._progress);
      }
    },
    _initProgressListener: function _initProgressListener(options) {
      var that = this,
          xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr(); // Accesss to the native XHR object is required to add event listeners
      // for the upload progress event:

      if (xhr.upload) {
        $(xhr.upload).on('progress', function (e) {
          var oe = e.originalEvent; // Make sure the progress event properties get copied over:

          e.lengthComputable = oe.lengthComputable;
          e.loaded = oe.loaded;
          e.total = oe.total;

          that._onProgress(e, options);
        });

        options.xhr = function () {
          return xhr;
        };
      }
    },
    _deinitProgressListener: function _deinitProgressListener(options) {
      var xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();

      if (xhr.upload) {
        $(xhr.upload).off('progress');
      }
    },
    _isInstanceOf: function _isInstanceOf(type, obj) {
      // Cross-frame instanceof check
      return Object.prototype.toString.call(obj) === '[object ' + type + ']';
    },
    _getUniqueFilename: function _getUniqueFilename(name, map) {
      // eslint-disable-next-line no-param-reassign
      name = String(name);

      if (map[name]) {
        // eslint-disable-next-line no-param-reassign
        name = name.replace(/(?: \(([\d]+)\))?(\.[^.]+)?$/, function (_, p1, p2) {
          var index = p1 ? Number(p1) + 1 : 1;
          var ext = p2 || '';
          return ' (' + index + ')' + ext;
        });
        return this._getUniqueFilename(name, map);
      }

      map[name] = true;
      return name;
    },
    _initXHRData: function _initXHRData(options) {
      var that = this,
          formData,
          file = options.files[0],
          // Ignore non-multipart setting if not supported:
      multipart = options.multipart || !$.support.xhrFileUpload,
          paramName = $.type(options.paramName) === 'array' ? options.paramName[0] : options.paramName;
      options.headers = $.extend({}, options.headers);

      if (options.contentRange) {
        options.headers['Content-Range'] = options.contentRange;
      }

      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {
        options.headers['Content-Disposition'] = 'attachment; filename="' + encodeURI(file.uploadName || file.name) + '"';
      }

      if (!multipart) {
        options.contentType = file.type || 'application/octet-stream';
        options.data = options.blob || file;
      } else if ($.support.xhrFormDataFileUpload) {
        if (options.postMessage) {
          // window.postMessage does not allow sending FormData
          // objects, so we just add the File/Blob objects to
          // the formData array and let the postMessage window
          // create the FormData object out of this array:
          formData = this._getFormData(options);

          if (options.blob) {
            formData.push({
              name: paramName,
              value: options.blob
            });
          } else {
            $.each(options.files, function (index, file) {
              formData.push({
                name: $.type(options.paramName) === 'array' && options.paramName[index] || paramName,
                value: file
              });
            });
          }
        } else {
          if (that._isInstanceOf('FormData', options.formData)) {
            formData = options.formData;
          } else {
            formData = new FormData();
            $.each(this._getFormData(options), function (index, field) {
              formData.append(field.name, field.value);
            });
          }

          if (options.blob) {
            formData.append(paramName, options.blob, file.uploadName || file.name);
          } else {
            $.each(options.files, function (index, file) {
              // This check allows the tests to run with
              // dummy objects:
              if (that._isInstanceOf('File', file) || that._isInstanceOf('Blob', file)) {
                var fileName = file.uploadName || file.name;

                if (options.uniqueFilenames) {
                  fileName = that._getUniqueFilename(fileName, options.uniqueFilenames);
                }

                formData.append($.type(options.paramName) === 'array' && options.paramName[index] || paramName, file, fileName);
              }
            });
          }
        }

        options.data = formData;
      } // Blob reference is not needed anymore, free memory:


      options.blob = null;
    },
    _initIframeSettings: function _initIframeSettings(options) {
      var targetHost = $('<a></a>').prop('href', options.url).prop('host'); // Setting the dataType to iframe enables the iframe transport:

      options.dataType = 'iframe ' + (options.dataType || ''); // The iframe transport accepts a serialized array as form data:

      options.formData = this._getFormData(options); // Add redirect url to form data on cross-domain uploads:

      if (options.redirect && targetHost && targetHost !== location.host) {
        options.formData.push({
          name: options.redirectParamName || 'redirect',
          value: options.redirect
        });
      }
    },
    _initDataSettings: function _initDataSettings(options) {
      if (this._isXHRUpload(options)) {
        if (!this._chunkedUpload(options, true)) {
          if (!options.data) {
            this._initXHRData(options);
          }

          this._initProgressListener(options);
        }

        if (options.postMessage) {
          // Setting the dataType to postmessage enables the
          // postMessage transport:
          options.dataType = 'postmessage ' + (options.dataType || '');
        }
      } else {
        this._initIframeSettings(options);
      }
    },
    _getParamName: function _getParamName(options) {
      var fileInput = $(options.fileInput),
          paramName = options.paramName;

      if (!paramName) {
        paramName = [];
        fileInput.each(function () {
          var input = $(this),
              name = input.prop('name') || 'files[]',
              i = (input.prop('files') || [1]).length;

          while (i) {
            paramName.push(name);
            i -= 1;
          }
        });

        if (!paramName.length) {
          paramName = [fileInput.prop('name') || 'files[]'];
        }
      } else if (!$.isArray(paramName)) {
        paramName = [paramName];
      }

      return paramName;
    },
    _initFormSettings: function _initFormSettings(options) {
      // Retrieve missing options from the input field and the
      // associated form, if available:
      if (!options.form || !options.form.length) {
        options.form = $(options.fileInput.prop('form')); // If the given file input doesn't have an associated form,
        // use the default widget file input's form:

        if (!options.form.length) {
          options.form = $(this.options.fileInput.prop('form'));
        }
      }

      options.paramName = this._getParamName(options);

      if (!options.url) {
        options.url = options.form.prop('action') || location.href;
      } // The HTTP request method must be "POST" or "PUT":


      options.type = (options.type || $.type(options.form.prop('method')) === 'string' && options.form.prop('method') || '').toUpperCase();

      if (options.type !== 'POST' && options.type !== 'PUT' && options.type !== 'PATCH') {
        options.type = 'POST';
      }

      if (!options.formAcceptCharset) {
        options.formAcceptCharset = options.form.attr('accept-charset');
      }
    },
    _getAJAXSettings: function _getAJAXSettings(data) {
      var options = $.extend({}, this.options, data);

      this._initFormSettings(options);

      this._initDataSettings(options);

      return options;
    },
    // jQuery 1.6 doesn't provide .state(),
    // while jQuery 1.8+ removed .isRejected() and .isResolved():
    _getDeferredState: function _getDeferredState(deferred) {
      if (deferred.state) {
        return deferred.state();
      }

      if (deferred.isResolved()) {
        return 'resolved';
      }

      if (deferred.isRejected()) {
        return 'rejected';
      }

      return 'pending';
    },
    // Maps jqXHR callbacks to the equivalent
    // methods of the given Promise object:
    _enhancePromise: function _enhancePromise(promise) {
      promise.success = promise.done;
      promise.error = promise.fail;
      promise.complete = promise.always;
      return promise;
    },
    // Creates and returns a Promise object enhanced with
    // the jqXHR methods abort, success, error and complete:
    _getXHRPromise: function _getXHRPromise(resolveOrReject, context, args) {
      var dfd = $.Deferred(),
          promise = dfd.promise(); // eslint-disable-next-line no-param-reassign

      context = context || this.options.context || promise;

      if (resolveOrReject === true) {
        dfd.resolveWith(context, args);
      } else if (resolveOrReject === false) {
        dfd.rejectWith(context, args);
      }

      promise.abort = dfd.promise;
      return this._enhancePromise(promise);
    },
    // Adds convenience methods to the data callback argument:
    _addConvenienceMethods: function _addConvenienceMethods(e, data) {
      var that = this,
          getPromise = function getPromise(args) {
        return $.Deferred().resolveWith(that, args).promise();
      };

      data.process = function (resolveFunc, rejectFunc) {
        if (resolveFunc || rejectFunc) {
          data._processQueue = this._processQueue = (this._processQueue || getPromise([this]))[that._promisePipe](function () {
            if (data.errorThrown) {
              return $.Deferred().rejectWith(that, [data]).promise();
            }

            return getPromise(arguments);
          })[that._promisePipe](resolveFunc, rejectFunc);
        }

        return this._processQueue || getPromise([this]);
      };

      data.submit = function () {
        if (this.state() !== 'pending') {
          data.jqXHR = this.jqXHR = that._trigger('submit', $.Event('submit', {
            delegatedEvent: e
          }), this) !== false && that._onSend(e, this);
        }

        return this.jqXHR || that._getXHRPromise();
      };

      data.abort = function () {
        if (this.jqXHR) {
          return this.jqXHR.abort();
        }

        this.errorThrown = 'abort';

        that._trigger('fail', null, this);

        return that._getXHRPromise(false);
      };

      data.state = function () {
        if (this.jqXHR) {
          return that._getDeferredState(this.jqXHR);
        }

        if (this._processQueue) {
          return that._getDeferredState(this._processQueue);
        }
      };

      data.processing = function () {
        return !this.jqXHR && this._processQueue && that._getDeferredState(this._processQueue) === 'pending';
      };

      data.progress = function () {
        return this._progress;
      };

      data.response = function () {
        return this._response;
      };
    },
    // Parses the Range header from the server response
    // and returns the uploaded bytes:
    _getUploadedBytes: function _getUploadedBytes(jqXHR) {
      var range = jqXHR.getResponseHeader('Range'),
          parts = range && range.split('-'),
          upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);
      return upperBytesPos && upperBytesPos + 1;
    },
    // Uploads a file in multiple, sequential requests
    // by splitting the file up in multiple blob chunks.
    // If the second parameter is true, only tests if the file
    // should be uploaded in chunks, but does not invoke any
    // upload requests:
    _chunkedUpload: function _chunkedUpload(options, testOnly) {
      options.uploadedBytes = options.uploadedBytes || 0;

      var that = this,
          file = options.files[0],
          fs = file.size,
          ub = options.uploadedBytes,
          mcs = options.maxChunkSize || fs,
          slice = this._blobSlice,
          dfd = $.Deferred(),
          promise = dfd.promise(),
          jqXHR,
          _upload;

      if (!(this._isXHRUpload(options) && slice && (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)) || options.data) {
        return false;
      }

      if (testOnly) {
        return true;
      }

      if (ub >= fs) {
        file.error = options.i18n('uploadedBytes');
        return this._getXHRPromise(false, options.context, [null, 'error', file.error]);
      } // The chunk upload method:


      _upload = function upload() {
        // Clone the options object for each chunk upload:
        var o = $.extend({}, options),
            currentLoaded = o._progress.loaded;
        o.blob = slice.call(file, ub, ub + ($.type(mcs) === 'function' ? mcs(o) : mcs), file.type); // Store the current chunk size, as the blob itself
        // will be dereferenced after data processing:

        o.chunkSize = o.blob.size; // Expose the chunk bytes position range:

        o.contentRange = 'bytes ' + ub + '-' + (ub + o.chunkSize - 1) + '/' + fs; // Trigger chunkbeforesend to allow form data to be updated for this chunk

        that._trigger('chunkbeforesend', null, o); // Process the upload data (the blob and potential form data):


        that._initXHRData(o); // Add progress listeners for this chunk upload:


        that._initProgressListener(o);

        jqXHR = (that._trigger('chunksend', null, o) !== false && $.ajax(o) || that._getXHRPromise(false, o.context)).done(function (result, textStatus, jqXHR) {
          ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize; // Create a progress event if no final progress event
          // with loaded equaling total has been triggered
          // for this chunk:

          if (currentLoaded + o.chunkSize - o._progress.loaded) {
            that._onProgress($.Event('progress', {
              lengthComputable: true,
              loaded: ub - o.uploadedBytes,
              total: ub - o.uploadedBytes
            }), o);
          }

          options.uploadedBytes = o.uploadedBytes = ub;
          o.result = result;
          o.textStatus = textStatus;
          o.jqXHR = jqXHR;

          that._trigger('chunkdone', null, o);

          that._trigger('chunkalways', null, o);

          if (ub < fs) {
            // File upload not yet complete,
            // continue with the next chunk:
            _upload();
          } else {
            dfd.resolveWith(o.context, [result, textStatus, jqXHR]);
          }
        }).fail(function (jqXHR, textStatus, errorThrown) {
          o.jqXHR = jqXHR;
          o.textStatus = textStatus;
          o.errorThrown = errorThrown;

          that._trigger('chunkfail', null, o);

          that._trigger('chunkalways', null, o);

          dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);
        }).always(function () {
          that._deinitProgressListener(o);
        });
      };

      this._enhancePromise(promise);

      promise.abort = function () {
        return jqXHR.abort();
      };

      _upload();

      return promise;
    },
    _beforeSend: function _beforeSend(e, data) {
      if (this._active === 0) {
        // the start callback is triggered when an upload starts
        // and no other uploads are currently running,
        // equivalent to the global ajaxStart event:
        this._trigger('start'); // Set timer for global bitrate progress calculation:


        this._bitrateTimer = new this._BitrateTimer(); // Reset the global progress values:

        this._progress.loaded = this._progress.total = 0;
        this._progress.bitrate = 0;
      } // Make sure the container objects for the .response() and
      // .progress() methods on the data object are available
      // and reset to their initial state:


      this._initResponseObject(data);

      this._initProgressObject(data);

      data._progress.loaded = data.loaded = data.uploadedBytes || 0;
      data._progress.total = data.total = this._getTotal(data.files) || 1;
      data._progress.bitrate = data.bitrate = 0;
      this._active += 1; // Initialize the global progress values:

      this._progress.loaded += data.loaded;
      this._progress.total += data.total;
    },
    _onDone: function _onDone(result, textStatus, jqXHR, options) {
      var total = options._progress.total,
          response = options._response;

      if (options._progress.loaded < total) {
        // Create a progress event if no final progress event
        // with loaded equaling total has been triggered:
        this._onProgress($.Event('progress', {
          lengthComputable: true,
          loaded: total,
          total: total
        }), options);
      }

      response.result = options.result = result;
      response.textStatus = options.textStatus = textStatus;
      response.jqXHR = options.jqXHR = jqXHR;

      this._trigger('done', null, options);
    },
    _onFail: function _onFail(jqXHR, textStatus, errorThrown, options) {
      var response = options._response;

      if (options.recalculateProgress) {
        // Remove the failed (error or abort) file upload from
        // the global progress calculation:
        this._progress.loaded -= options._progress.loaded;
        this._progress.total -= options._progress.total;
      }

      response.jqXHR = options.jqXHR = jqXHR;
      response.textStatus = options.textStatus = textStatus;
      response.errorThrown = options.errorThrown = errorThrown;

      this._trigger('fail', null, options);
    },
    _onAlways: function _onAlways(jqXHRorResult, textStatus, jqXHRorError, options) {
      // jqXHRorResult, textStatus and jqXHRorError are added to the
      // options object via done and fail callbacks
      this._trigger('always', null, options);
    },
    _onSend: function _onSend(e, data) {
      if (!data.submit) {
        this._addConvenienceMethods(e, data);
      }

      var that = this,
          jqXHR,
          aborted,
          slot,
          pipe,
          options = that._getAJAXSettings(data),
          send = function send() {
        that._sending += 1; // Set timer for bitrate progress calculation:

        options._bitrateTimer = new that._BitrateTimer();
        jqXHR = jqXHR || ((aborted || that._trigger('send', $.Event('send', {
          delegatedEvent: e
        }), options) === false) && that._getXHRPromise(false, options.context, aborted) || that._chunkedUpload(options) || $.ajax(options)).done(function (result, textStatus, jqXHR) {
          that._onDone(result, textStatus, jqXHR, options);
        }).fail(function (jqXHR, textStatus, errorThrown) {
          that._onFail(jqXHR, textStatus, errorThrown, options);
        }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
          that._deinitProgressListener(options);

          that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);

          that._sending -= 1;
          that._active -= 1;

          if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {
            // Start the next queued upload,
            // that has not been aborted:
            var nextSlot = that._slots.shift();

            while (nextSlot) {
              if (that._getDeferredState(nextSlot) === 'pending') {
                nextSlot.resolve();
                break;
              }

              nextSlot = that._slots.shift();
            }
          }

          if (that._active === 0) {
            // The stop callback is triggered when all uploads have
            // been completed, equivalent to the global ajaxStop event:
            that._trigger('stop');
          }
        });
        return jqXHR;
      };

      this._beforeSend(e, options);

      if (this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending) {
        if (this.options.limitConcurrentUploads > 1) {
          slot = $.Deferred();

          this._slots.push(slot);

          pipe = slot[that._promisePipe](send);
        } else {
          this._sequence = this._sequence[that._promisePipe](send, send);
          pipe = this._sequence;
        } // Return the piped Promise object, enhanced with an abort method,
        // which is delegated to the jqXHR object of the current upload,
        // and jqXHR callbacks mapped to the equivalent Promise methods:


        pipe.abort = function () {
          aborted = [undefined, 'abort', 'abort'];

          if (!jqXHR) {
            if (slot) {
              slot.rejectWith(options.context, aborted);
            }

            return send();
          }

          return jqXHR.abort();
        };

        return this._enhancePromise(pipe);
      }

      return send();
    },
    _onAdd: function _onAdd(e, data) {
      var that = this,
          result = true,
          options = $.extend({}, this.options, data),
          files = data.files,
          filesLength = files.length,
          limit = options.limitMultiFileUploads,
          limitSize = options.limitMultiFileUploadSize,
          overhead = options.limitMultiFileUploadSizeOverhead,
          batchSize = 0,
          paramName = this._getParamName(options),
          paramNameSet,
          paramNameSlice,
          fileSet,
          i,
          j = 0;

      if (!filesLength) {
        return false;
      }

      if (limitSize && files[0].size === undefined) {
        limitSize = undefined;
      }

      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {
        fileSet = [files];
        paramNameSet = [paramName];
      } else if (!(options.singleFileUploads || limitSize) && limit) {
        fileSet = [];
        paramNameSet = [];

        for (i = 0; i < filesLength; i += limit) {
          fileSet.push(files.slice(i, i + limit));
          paramNameSlice = paramName.slice(i, i + limit);

          if (!paramNameSlice.length) {
            paramNameSlice = paramName;
          }

          paramNameSet.push(paramNameSlice);
        }
      } else if (!options.singleFileUploads && limitSize) {
        fileSet = [];
        paramNameSet = [];

        for (i = 0; i < filesLength; i = i + 1) {
          batchSize += files[i].size + overhead;

          if (i + 1 === filesLength || batchSize + files[i + 1].size + overhead > limitSize || limit && i + 1 - j >= limit) {
            fileSet.push(files.slice(j, i + 1));
            paramNameSlice = paramName.slice(j, i + 1);

            if (!paramNameSlice.length) {
              paramNameSlice = paramName;
            }

            paramNameSet.push(paramNameSlice);
            j = i + 1;
            batchSize = 0;
          }
        }
      } else {
        paramNameSet = paramName;
      }

      data.originalFiles = files;
      $.each(fileSet || files, function (index, element) {
        var newData = $.extend({}, data);
        newData.files = fileSet ? element : [element];
        newData.paramName = paramNameSet[index];

        that._initResponseObject(newData);

        that._initProgressObject(newData);

        that._addConvenienceMethods(e, newData);

        result = that._trigger('add', $.Event('add', {
          delegatedEvent: e
        }), newData);
        return result;
      });
      return result;
    },
    _replaceFileInput: function _replaceFileInput(data) {
      var input = data.fileInput,
          inputClone = input.clone(true),
          restoreFocus = input.is(document.activeElement); // Add a reference for the new cloned file input to the data argument:

      data.fileInputClone = inputClone;
      $('<form></form>').append(inputClone)[0].reset(); // Detaching allows to insert the fileInput on another form
      // without loosing the file input value:

      input.after(inputClone).detach(); // If the fileInput had focus before it was detached,
      // restore focus to the inputClone.

      if (restoreFocus) {
        inputClone.trigger('focus');
      } // Avoid memory leaks with the detached file input:


      $.cleanData(input.off('remove')); // Replace the original file input element in the fileInput
      // elements set with the clone, which has been copied including
      // event handlers:

      this.options.fileInput = this.options.fileInput.map(function (i, el) {
        if (el === input[0]) {
          return inputClone[0];
        }

        return el;
      }); // If the widget has been initialized on the file input itself,
      // override this.element with the file input clone:

      if (input[0] === this.element[0]) {
        this.element = inputClone;
      }
    },
    _handleFileTreeEntry: function _handleFileTreeEntry(entry, path) {
      var that = this,
          dfd = $.Deferred(),
          entries = [],
          dirReader,
          errorHandler = function errorHandler(e) {
        if (e && !e.entry) {
          e.entry = entry;
        } // Since $.when returns immediately if one
        // Deferred is rejected, we use resolve instead.
        // This allows valid files and invalid items
        // to be returned together in one set:


        dfd.resolve([e]);
      },
          successHandler = function successHandler(entries) {
        that._handleFileTreeEntries(entries, path + entry.name + '/').done(function (files) {
          dfd.resolve(files);
        }).fail(errorHandler);
      },
          readEntries = function readEntries() {
        dirReader.readEntries(function (results) {
          if (!results.length) {
            successHandler(entries);
          } else {
            entries = entries.concat(results);
            readEntries();
          }
        }, errorHandler);
      }; // eslint-disable-next-line no-param-reassign


      path = path || '';

      if (entry.isFile) {
        if (entry._file) {
          // Workaround for Chrome bug #149735
          entry._file.relativePath = path;
          dfd.resolve(entry._file);
        } else {
          entry.file(function (file) {
            file.relativePath = path;
            dfd.resolve(file);
          }, errorHandler);
        }
      } else if (entry.isDirectory) {
        dirReader = entry.createReader();
        readEntries();
      } else {
        // Return an empty list for file system items
        // other than files or directories:
        dfd.resolve([]);
      }

      return dfd.promise();
    },
    _handleFileTreeEntries: function _handleFileTreeEntries(entries, path) {
      var that = this;
      return $.when.apply($, $.map(entries, function (entry) {
        return that._handleFileTreeEntry(entry, path);
      }))[this._promisePipe](function () {
        return Array.prototype.concat.apply([], arguments);
      });
    },
    _getDroppedFiles: function _getDroppedFiles(dataTransfer) {
      // eslint-disable-next-line no-param-reassign
      dataTransfer = dataTransfer || {};
      var items = dataTransfer.items;

      if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {
        return this._handleFileTreeEntries($.map(items, function (item) {
          var entry;

          if (item.webkitGetAsEntry) {
            entry = item.webkitGetAsEntry();

            if (entry) {
              // Workaround for Chrome bug #149735:
              entry._file = item.getAsFile();
            }

            return entry;
          }

          return item.getAsEntry();
        }));
      }

      return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();
    },
    _getSingleFileInputFiles: function _getSingleFileInputFiles(fileInput) {
      // eslint-disable-next-line no-param-reassign
      fileInput = $(fileInput);
      var entries = fileInput.prop('webkitEntries') || fileInput.prop('entries'),
          files,
          value;

      if (entries && entries.length) {
        return this._handleFileTreeEntries(entries);
      }

      files = $.makeArray(fileInput.prop('files'));

      if (!files.length) {
        value = fileInput.prop('value');

        if (!value) {
          return $.Deferred().resolve([]).promise();
        } // If the files property is not available, the browser does not
        // support the File API and we add a pseudo File object with
        // the input value as name with path information removed:


        files = [{
          name: value.replace(/^.*\\/, '')
        }];
      } else if (files[0].name === undefined && files[0].fileName) {
        // File normalization for Safari 4 and Firefox 3:
        $.each(files, function (index, file) {
          file.name = file.fileName;
          file.size = file.fileSize;
        });
      }

      return $.Deferred().resolve(files).promise();
    },
    _getFileInputFiles: function _getFileInputFiles(fileInput) {
      if (!(fileInput instanceof $) || fileInput.length === 1) {
        return this._getSingleFileInputFiles(fileInput);
      }

      return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles))[this._promisePipe](function () {
        return Array.prototype.concat.apply([], arguments);
      });
    },
    _onChange: function _onChange(e) {
      var that = this,
          data = {
        fileInput: $(e.target),
        form: $(e.target.form)
      };

      this._getFileInputFiles(data.fileInput).always(function (files) {
        data.files = files;

        if (that.options.replaceFileInput) {
          that._replaceFileInput(data);
        }

        if (that._trigger('change', $.Event('change', {
          delegatedEvent: e
        }), data) !== false) {
          that._onAdd(e, data);
        }
      });
    },
    _onPaste: function _onPaste(e) {
      var items = e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.items,
          data = {
        files: []
      };

      if (items && items.length) {
        $.each(items, function (index, item) {
          var file = item.getAsFile && item.getAsFile();

          if (file) {
            data.files.push(file);
          }
        });

        if (this._trigger('paste', $.Event('paste', {
          delegatedEvent: e
        }), data) !== false) {
          this._onAdd(e, data);
        }
      }
    },
    _onDrop: function _onDrop(e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var that = this,
          dataTransfer = e.dataTransfer,
          data = {};

      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
        e.preventDefault();

        this._getDroppedFiles(dataTransfer).always(function (files) {
          data.files = files;

          if (that._trigger('drop', $.Event('drop', {
            delegatedEvent: e
          }), data) !== false) {
            that._onAdd(e, data);
          }
        });
      }
    },
    _onDragOver: getDragHandler('dragover'),
    _onDragEnter: getDragHandler('dragenter'),
    _onDragLeave: getDragHandler('dragleave'),
    _initEventHandlers: function _initEventHandlers() {
      if (this._isXHRUpload(this.options)) {
        this._on(this.options.dropZone, {
          dragover: this._onDragOver,
          drop: this._onDrop,
          // event.preventDefault() on dragenter is required for IE10+:
          dragenter: this._onDragEnter,
          // dragleave is not required, but added for completeness:
          dragleave: this._onDragLeave
        });

        this._on(this.options.pasteZone, {
          paste: this._onPaste
        });
      }

      if ($.support.fileInput) {
        this._on(this.options.fileInput, {
          change: this._onChange
        });
      }
    },
    _destroyEventHandlers: function _destroyEventHandlers() {
      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');

      this._off(this.options.pasteZone, 'paste');

      this._off(this.options.fileInput, 'change');
    },
    _destroy: function _destroy() {
      this._destroyEventHandlers();
    },
    _setOption: function _setOption(key, value) {
      var reinit = $.inArray(key, this._specialOptions) !== -1;

      if (reinit) {
        this._destroyEventHandlers();
      }

      this._super(key, value);

      if (reinit) {
        this._initSpecialOptions();

        this._initEventHandlers();
      }
    },
    _initSpecialOptions: function _initSpecialOptions() {
      var options = this.options;

      if (options.fileInput === undefined) {
        options.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]');
      } else if (!(options.fileInput instanceof $)) {
        options.fileInput = $(options.fileInput);
      }

      if (!(options.dropZone instanceof $)) {
        options.dropZone = $(options.dropZone);
      }

      if (!(options.pasteZone instanceof $)) {
        options.pasteZone = $(options.pasteZone);
      }
    },
    _getRegExp: function _getRegExp(str) {
      var parts = str.split('/'),
          modifiers = parts.pop();
      parts.shift();
      return new RegExp(parts.join('/'), modifiers);
    },
    _isRegExpOption: function _isRegExpOption(key, value) {
      return key !== 'url' && $.type(value) === 'string' && /^\/.*\/[igm]{0,3}$/.test(value);
    },
    _initDataAttributes: function _initDataAttributes() {
      var that = this,
          options = this.options,
          data = this.element.data(); // Initialize options set via HTML5 data-attributes:

      $.each(this.element[0].attributes, function (index, attr) {
        var key = attr.name.toLowerCase(),
            value;

        if (/^data-/.test(key)) {
          // Convert hyphen-ated key to camelCase:
          key = key.slice(5).replace(/-[a-z]/g, function (str) {
            return str.charAt(1).toUpperCase();
          });
          value = data[key];

          if (that._isRegExpOption(key, value)) {
            value = that._getRegExp(value);
          }

          options[key] = value;
        }
      });
    },
    _create: function _create() {
      this._initDataAttributes();

      this._initSpecialOptions();

      this._slots = [];
      this._sequence = this._getXHRPromise(true);
      this._sending = this._active = 0;

      this._initProgressObject(this);

      this._initEventHandlers();
    },
    // This method is exposed to the widget API and allows to query
    // the number of active uploads:
    active: function active() {
      return this._active;
    },
    // This method is exposed to the widget API and allows to query
    // the widget upload progress.
    // It returns an object with loaded, total and bitrate properties
    // for the running uploads:
    progress: function progress() {
      return this._progress;
    },
    // This method is exposed to the widget API and allows adding files
    // using the fileupload API. The data parameter accepts an object which
    // must have a files property and can contain additional options:
    // .fileupload('add', {files: filesList});
    add: function add(data) {
      var that = this;

      if (!data || this.options.disabled) {
        return;
      }

      if (data.fileInput && !data.files) {
        this._getFileInputFiles(data.fileInput).always(function (files) {
          data.files = files;

          that._onAdd(null, data);
        });
      } else {
        data.files = $.makeArray(data.files);

        this._onAdd(null, data);
      }
    },
    // This method is exposed to the widget API and allows sending files
    // using the fileupload API. The data parameter accepts an object which
    // must have a files or fileInput property and can contain additional options:
    // .fileupload('send', {files: filesList});
    // The method returns a Promise object for the file upload call.
    send: function send(data) {
      if (data && !this.options.disabled) {
        if (data.fileInput && !data.files) {
          var that = this,
              dfd = $.Deferred(),
              promise = dfd.promise(),
              jqXHR,
              aborted;

          promise.abort = function () {
            aborted = true;

            if (jqXHR) {
              return jqXHR.abort();
            }

            dfd.reject(null, 'abort', 'abort');
            return promise;
          };

          this._getFileInputFiles(data.fileInput).always(function (files) {
            if (aborted) {
              return;
            }

            if (!files.length) {
              dfd.reject();
              return;
            }

            data.files = files;
            jqXHR = that._onSend(null, data);
            jqXHR.then(function (result, textStatus, jqXHR) {
              dfd.resolve(result, textStatus, jqXHR);
            }, function (jqXHR, textStatus, errorThrown) {
              dfd.reject(jqXHR, textStatus, errorThrown);
            });
          });

          return this._enhancePromise(promise);
        }

        data.files = $.makeArray(data.files);

        if (data.files.length) {
          return this._onSend(null, data);
        }
      }

      return this._getXHRPromise(false, data && data.context);
    }
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * jQuery Iframe Transport Plugin
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */

/* global define, require */
(function (factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    // Register as an anonymous AMD module:
    define(['jquery'], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node/CommonJS:
    factory(require('jquery'));
  } else {
    // Browser globals:
    factory(window.jQuery);
  }
})(function ($) {
  'use strict'; // Helper variable to create unique names for the transport iframes:

  var counter = 0,
      jsonAPI = $,
      jsonParse = 'parseJSON';

  if ('JSON' in window && 'parse' in JSON) {
    jsonAPI = JSON;
    jsonParse = 'parse';
  } // The iframe transport accepts four additional options:
  // options.fileInput: a jQuery collection of file input fields
  // options.paramName: the parameter name for the file form data,
  //  overrides the name property of the file input field(s),
  //  can be a string or an array of strings.
  // options.formData: an array of objects with name and value properties,
  //  equivalent to the return data of .serializeArray(), e.g.:
  //  [{name: 'a', value: 1}, {name: 'b', value: 2}]
  // options.initialIframeSrc: the URL of the initial iframe src,
  //  by default set to "javascript:false;"


  $.ajaxTransport('iframe', function (options) {
    if (options.async) {
      // javascript:false as initial iframe src
      // prevents warning popups on HTTPS in IE6:
      // eslint-disable-next-line no-script-url
      var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',
          form,
          iframe,
          addParamChar;
      return {
        send: function send(_, completeCallback) {
          form = $('<form style="display:none;"></form>');
          form.attr('accept-charset', options.formAcceptCharset);
          addParamChar = /\?/.test(options.url) ? '&' : '?'; // XDomainRequest only supports GET and POST:

          if (options.type === 'DELETE') {
            options.url = options.url + addParamChar + '_method=DELETE';
            options.type = 'POST';
          } else if (options.type === 'PUT') {
            options.url = options.url + addParamChar + '_method=PUT';
            options.type = 'POST';
          } else if (options.type === 'PATCH') {
            options.url = options.url + addParamChar + '_method=PATCH';
            options.type = 'POST';
          } // IE versions below IE8 cannot set the name property of
          // elements that have already been added to the DOM,
          // so we set the name along with the iframe HTML markup:


          counter += 1;
          iframe = $('<iframe src="' + initialIframeSrc + '" name="iframe-transport-' + counter + '"></iframe>').on('load', function () {
            var fileInputClones,
                paramNames = $.isArray(options.paramName) ? options.paramName : [options.paramName];
            iframe.off('load').on('load', function () {
              var response; // Wrap in a try/catch block to catch exceptions thrown
              // when trying to access cross-domain iframe contents:

              try {
                response = iframe.contents(); // Google Chrome and Firefox do not throw an
                // exception when calling iframe.contents() on
                // cross-domain requests, so we unify the response:

                if (!response.length || !response[0].firstChild) {
                  throw new Error();
                }
              } catch (e) {
                response = undefined;
              } // The complete callback returns the
              // iframe content document as response object:


              completeCallback(200, 'success', {
                iframe: response
              }); // Fix for IE endless progress bar activity bug
              // (happens on form submits to iframe targets):

              $('<iframe src="' + initialIframeSrc + '"></iframe>').appendTo(form);
              window.setTimeout(function () {
                // Removing the form in a setTimeout call
                // allows Chrome's developer tools to display
                // the response result
                form.remove();
              }, 0);
            });
            form.prop('target', iframe.prop('name')).prop('action', options.url).prop('method', options.type);

            if (options.formData) {
              $.each(options.formData, function (index, field) {
                $('<input type="hidden"/>').prop('name', field.name).val(field.value).appendTo(form);
              });
            }

            if (options.fileInput && options.fileInput.length && options.type === 'POST') {
              fileInputClones = options.fileInput.clone(); // Insert a clone for each file input field:

              options.fileInput.after(function (index) {
                return fileInputClones[index];
              });

              if (options.paramName) {
                options.fileInput.each(function (index) {
                  $(this).prop('name', paramNames[index] || options.paramName);
                });
              } // Appending the file input fields to the hidden form
              // removes them from their original location:


              form.append(options.fileInput).prop('enctype', 'multipart/form-data') // enctype must be set as encoding for IE:
              .prop('encoding', 'multipart/form-data'); // Remove the HTML5 form attribute from the input(s):

              options.fileInput.removeAttr('form');
            }

            window.setTimeout(function () {
              // Submitting the form in a setTimeout call fixes an issue with
              // Safari 13 not triggering the iframe load event after resetting
              // the load event handler, see also:
              // https://github.com/blueimp/jQuery-File-Upload/issues/3633
              form.submit(); // Insert the file input fields at their original location
              // by replacing the clones with the originals:

              if (fileInputClones && fileInputClones.length) {
                options.fileInput.each(function (index, input) {
                  var clone = $(fileInputClones[index]); // Restore the original name and form properties:

                  $(input).prop('name', clone.prop('name')).attr('form', clone.attr('form'));
                  clone.replaceWith(input);
                });
              }
            }, 0);
          });
          form.append(iframe).appendTo(document.body);
        },
        abort: function abort() {
          if (iframe) {
            // javascript:false as iframe src aborts the request
            // and prevents warning popups on HTTPS in IE6.
            iframe.off('load').prop('src', initialIframeSrc);
          }

          if (form) {
            form.remove();
          }
        }
      };
    }
  }); // The iframe transport returns the iframe content document as response.
  // The following adds converters from iframe to text, json, html, xml
  // and script.
  // Please note that the Content-Type for JSON responses has to be text/plain
  // or text/html, if the browser doesn't include application/json in the
  // Accept header, else IE will show a download dialog.
  // The Content-Type for XML responses on the other hand has to be always
  // application/xml or text/xml, so IE properly parses the XML response.
  // See also
  // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation

  $.ajaxSetup({
    converters: {
      'iframe text': function iframeText(iframe) {
        return iframe && $(iframe[0].body).text();
      },
      'iframe json': function iframeJson(iframe) {
        return iframe && jsonAPI[jsonParse]($(iframe[0].body).text());
      },
      'iframe html': function iframeHtml(iframe) {
        return iframe && $(iframe[0].body).html();
      },
      'iframe xml': function iframeXml(iframe) {
        var xmlDoc = iframe && iframe[0];
        return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc : $.parseXML(xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml || $(xmlDoc.body).html());
      },
      'iframe script': function iframeScript(iframe) {
        return iframe && $.globalEval($(iframe[0].body).text());
      }
    }
  });
});
function initializeAttachedMediaField(el, idOfUploadButton, uploadAction, mediaItemUrl, allowMultiple, allowMediaText, allowCenterCropping, tempUploadFolder) {
  var target = $(document.getElementById($(el).data('for')));
  var initialPaths = target.data("init");
  var mediaFieldEditor = $(el);
  var idprefix = mediaFieldEditor.attr("id");
  var mediaFieldApp;
  mediaFieldApps.push(mediaFieldApp = new Vue({
    el: mediaFieldEditor.get(0),
    data: {
      mediaItems: [],
      selectedMedia: null,
      smallThumbs: false,
      idPrefix: idprefix,
      initialized: false,
      allowMediaText: allowMediaText,
      backupMediaText: '',
      allowCenterCropping: allowCenterCropping,
      backupCenter: [null, null]
    },
    created: function created() {
      var self = this;
      self.currentPrefs = JSON.parse(localStorage.getItem('mediaFieldPrefs'));
    },
    computed: {
      paths: {
        get: function get() {
          var mediaPaths = [];

          if (!this.initialized) {
            return JSON.stringify(initialPaths);
          }

          this.mediaItems.forEach(function (x) {
            if (x.mediaPath === 'not-found') {
              return;
            }

            mediaPaths.push({
              path: x.mediaPath,
              isRemoved: x.isRemoved,
              isNew: x.isNew,
              mediaText: x.mediaText,
              center: x.center
            });
          });
          return JSON.stringify(mediaPaths);
        },
        set: function set(values) {
          var self = this;
          var mediaPaths = values || [];
          var signal = $.Deferred();
          var items = [];
          var length = 0;
          mediaPaths.forEach(function (x, i) {
            items.push({
              name: ' ' + x.path,
              mime: '',
              mediaPath: ''
            }); // don't remove the space. Something different is needed or it wont react when the real name arrives.

            promise = $.when(signal).done(function () {
              $.ajax({
                url: mediaItemUrl + "?path=" + encodeURIComponent(x.path),
                method: 'GET',
                success: function success(data) {
                  data.vuekey = data.name + i.toString(); // Because a unique key is required by Vue on v-for 

                  data.mediaText = x.mediaText; // This value is not returned from the ajax call.

                  data.center = x.center; // This value is not returned from the ajax call.

                  items.splice(i, 1, data);

                  if (items.length === ++length) {
                    items.forEach(function (x) {
                      self.mediaItems.push(x);
                    });
                    self.initialized = true;
                  }
                },
                error: function error(_error) {
                  console.log(JSON.stringify(_error));
                  items.splice(i, 1, {
                    name: x.path,
                    mime: '',
                    mediaPath: 'not-found',
                    mediaText: '',
                    center: [null, null]
                  });

                  if (items.length === ++length) {
                    items.forEach(function (x) {
                      self.mediaItems.push(x);
                    });
                    self.initialized = true;
                  }
                }
              });
            });
          });
          signal.resolve();
        }
      },
      fileSize: function fileSize() {
        return Math.round(this.selectedMedia.size / 1024);
      },
      canAddMedia: function canAddMedia() {
        var nonRemovedMediaItems = [];

        for (var i = 0; i < this.mediaItems.length; i++) {
          if (!this.mediaItems[i].isRemoved) {
            nonRemovedMediaItems.push(this.mediaItems[i]);
          }
        }

        return nonRemovedMediaItems.length === 0 || nonRemovedMediaItems.length > 0 && allowMultiple;
      },
      thumbSize: function thumbSize() {
        return this.smallThumbs ? 120 : 240;
      },
      currentPrefs: {
        get: function get() {
          return {
            smallThumbs: this.smallThumbs
          };
        },
        set: function set(newPrefs) {
          if (!newPrefs) {
            return;
          }

          this.smallThumbs = newPrefs.smallThumbs;
        }
      }
    },
    mounted: function mounted() {
      var self = this;
      self.paths = initialPaths;
      self.$on('selectAndDeleteMediaRequested', function (media) {
        self.selectAndDeleteMedia(media);
      });
      self.$on('selectMediaRequested', function (media) {
        self.selectMedia(media);
      });
      var selector = '#' + idOfUploadButton;
      var editorId = mediaFieldEditor.attr('id');
      $(selector).fileupload({
        limitConcurrentUploads: 20,
        dropZone: $('#' + editorId),
        dataType: 'json',
        url: uploadAction,
        add: function add(e, data) {
          var count = data.files.length;
          var i;

          for (i = 0; i < count; i++) {
            data.files[i].uploadName = self.getUniqueId() + data.files[i].name;
          }

          data.submit();
        },
        formData: function formData() {
          var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
          return [{
            name: 'path',
            value: tempUploadFolder
          }, {
            name: '__RequestVerificationToken',
            value: antiForgeryToken
          }];
        },
        done: function done(e, data) {
          var newMediaItems = [];
          var errormsg = "";

          if (data.result.files.length > 0) {
            for (var i = 0; i < data.result.files.length; i++) {
              data.result.files[i].isNew = true; //if error is defined probably the file type is not allowed

              if (data.result.files[i].error === undefined || data.result.files[i].error === null) newMediaItems.push(data.result.files[i]);else errormsg += data.result.files[i].error + "\n";
            }
          }

          if (errormsg !== "") {
            alert(errormsg);
            return;
          }

          if (newMediaItems.length > 1 && allowMultiple === false) {
            alert($('#onlyOneItemMessage').val());
            mediaFieldApp.mediaItems.push(newMediaItems[0]);
            mediaFieldApp.initialized = true;
          } else {
            mediaFieldApp.mediaItems = mediaFieldApp.mediaItems.concat(newMediaItems);
            mediaFieldApp.initialized = true;
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log('error on upload!!');
          console.log(jqXHR);
          console.log(textStatus);
          console.log(errorThrown);
        }
      });
    },
    methods: {
      selectMedia: function selectMedia(media) {
        this.selectedMedia = media;
      },
      getUniqueId: function getUniqueId() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0,
              v = c === 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      },
      removeSelected: function removeSelected(event) {
        var removed = {};

        if (this.selectedMedia) {
          var index = this.mediaItems && this.mediaItems.indexOf(this.selectedMedia);

          if (index > -1) {
            removed = this.mediaItems[index];
            removed.isRemoved = true; //this.mediaItems.splice([index], 1, removed);

            this.mediaItems.splice(index, 1);
          }
        } else {
          // The remove button can also remove a unique media item
          if (this.mediaItems.length === 1) {
            removed = this.mediaItems[index];
            removed.isRemoved = true; //this.mediaItems.splice(0, 1, removed);                        

            this.mediaItems.splice(0, 1);
          }
        }

        this.selectedMedia = null;
      },
      showMediaTextModal: function showMediaTextModal(event) {
        $(this.$refs.mediaTextModal).modal();
        this.backupMediaText = this.selectedMedia.mediaText;
      },
      showCenterCroppingModal: function showCenterCroppingModal(event) {
        $(this.$refs.centerCroppingModal).modal(); // Cause a refresh to recalc heights.

        this.$set(this.selectedMedia.center, 0, this.selectedMedia.center[0]);
        this.$set(this.selectedMedia.center, 1, this.selectedMedia.center[1]);
        this.backupCenter = this.selectedMedia.center;
      },
      cancelMediaTextModal: function cancelMediaTextModal(event) {
        $(this.$refs.mediaTextModal).modal('hide');
        this.selectedMedia.mediaText = this.backupMediaText;
      },
      cancelCenterCroppingModal: function cancelCenterCroppingModal(event) {
        $(this.$refs.centerCroppingModal).modal('hide');
        this.selectedMedia.center = this.backupCenter;
      },
      clearCenterCrop: function clearCenterCrop(event) {
        this.$set(this.selectedMedia.center, 0, null);
        this.$set(this.selectedMedia.center, 1, null);
      },
      onCropDrop: function onCropDrop(event) {
        var image = this.$refs.cropImage;
        this.$set(this.selectedMedia.center, 0, event.offsetX / image.clientWidth);
        this.$set(this.selectedMedia.center, 1, event.offsetY / image.clientHeight);
      },
      cropLeft: function cropLeft() {
        if (this.$refs.cropImage && this.selectedMedia) {
          var position = this.selectedMedia.center[0] * this.$refs.cropImage.clientWidth;

          if (position < 17) {
            position = 17;
          }

          return position + 'px';
        } else {
          return '0';
        }
      },
      cropTop: function cropTop() {
        if (this.$refs.cropImage && this.selectedMedia) {
          var position = this.selectedMedia.center[1] * this.$refs.cropImage.clientHeight;

          if (position < 15) {
            position = 15;
          }

          return position + 'px';
        } else {
          return '0';
        }
      },
      setCrop: function setCrop(event) {
        var image = this.$refs.cropImage;
        this.$set(this.selectedMedia.center, 0, event.offsetX / image.clientWidth);
        this.$set(this.selectedMedia.center, 1, event.offsetY / image.clientHeight);
      },
      addMediaFiles: function addMediaFiles(files) {
        if (files.length > 1 && allowMultiple === false) {
          alert($('#onlyOneItemMessage').val());
          mediaFieldApp.mediaItems.push(files[0]);
          mediaFieldApp.initialized = true;
        } else {
          mediaFieldApp.mediaItems = mediaFieldApp.mediaItems.concat(files);
          mediaFieldApp.initialized = true;
        }
      },
      selectAndDeleteMedia: function selectAndDeleteMedia(media) {
        var self = this;
        self.selectedMedia = media; // setTimeout because sometimes 
        // removeSelected was called even before the media was set.

        setTimeout(function () {
          self.removeSelected();
        }, 100);
      }
    },
    watch: {
      mediaItems: {
        deep: true,
        handler: function handler() {
          // Trigger preview rendering
          setTimeout(function () {
            $(document).trigger('contentpreview:render');
          }, 100);
        }
      },
      currentPrefs: function currentPrefs(newPrefs) {
        localStorage.setItem('mediaFieldPrefs', JSON.stringify(newPrefs));
      }
    }
  }));
}
// <media-field-thumbs-container> component 
// different media field editors share this component to present the thumbs.
Vue.component('mediaFieldThumbsContainer', {
  template: '\
       <div :id="idPrefix + \'_mediaContainerMain\'" v-cloak>\
         <div v-if="mediaItems.length < 1" class="card text-center">\
             <div class= "card-body" >\
                <span class="hint">{{T.noImages}}</span>\
             </div>\
         </div>\
         <draggable :list="mediaItems" tag="ol" class="row media-items-grid" >\
            <li v-for="media in mediaItems"\
                :key="media.vuekey" \
                class="media-container-main-list-item card"\
                :style="{width: thumbSize + 2 + \'px\'}"\
                :class="{selected: selectedMedia == media}"\
                v-on:click="selectMedia(media)" v-if="!media.isRemoved">\
                    <div v-if="media.mediaPath!== \'not-found\'">\
                        <div class="thumb-container" :style="{height: thumbSize + \'px\'}" >\
                            <img v-if="media.mime.startsWith(\'image\')" \
                            :src="buildMediaUrl(media.url, thumbSize)" \
                            :data-mime="media.mime"\
                            :style="{maxHeight: thumbSize + \'px\' , maxWidth: thumbSize + \'px\'}"/>\
                            <i v-else class="fa fa-file-o fa-lg" :data-mime="media.mime"></i>\
                         </div>\
                         <div class="media-container-main-item-title card-body">\
                                <a href="javascript:;" class="btn btn-light btn-sm float-right inline-media-button delete-button"\
                                    v-on:click.stop="selectAndDeleteMedia(media)"><i class="fa fa-trash"></i></a>\
                                <a :href="media.url" target="_blank" class="btn btn-light btn-sm float-right inline-media-button view-button""><i class="fa fa-download"></i></a> \
                                <span class="media-filename card-text small" :title="media.mediaPath">{{ media.isNew ? media.name.substr(36) : media.name }}</span>\
                         </div>\
                    </div>\
                    <div v-else>\
                        <div class="thumb-container flex-column" :style="{height: thumbSize + \'px\'}">\
                            <i class="fa fa-ban text-danger d-block"></i>\
                            <span class="text-danger small d-block">{{ T.mediaNotFound }}</span>\
                            <span class="text-danger small d-block text-center">{{ T.discardWarning }}</span>\
                        </div>\
                        <div class="media-container-main-item-title card-body">\
                            <a href="javascript:;" class="btn btn-light btn-sm float-right inline-media-button delete-button"\
                                v-on:click.stop="selectAndDeleteMedia(media)"><i class="fa fa-trash"></i></a>\
                            <span class="media-filename card-text small text-danger" :title="media.name">{{ media.name }}</span>\
                        </div>\
                   </div>\
            </li>\
         </draggable>\
       </div>\
    ',
  data: function data() {
    return {
      T: {}
    };
  },
  props: {
    mediaItems: Array,
    selectedMedia: Object,
    thumbSize: Number,
    idPrefix: String
  },
  created: function created() {
    var self = this; // retrieving localized strings from view

    self.T.mediaNotFound = $('#t-media-not-found').val();
    self.T.discardWarning = $('#t-discard-warning').val();
    self.T.noImages = $('#t-no-images').val();
  },
  methods: {
    selectAndDeleteMedia: function selectAndDeleteMedia(media) {
      this.$parent.$emit('selectAndDeleteMediaRequested', media);
    },
    selectMedia: function selectMedia(media) {
      this.$parent.$emit('selectMediaRequested', media);
    },
    buildMediaUrl: function buildMediaUrl(url, thumbSize) {
      return url + (url.indexOf('?') == -1 ? '?' : '&') + 'width=' + thumbSize + '&height=' + thumbSize;
    }
  }
});
function initializeMediaField(el, modalBodyElement, mediaItemUrl, allowMultiple, allowMediaText, allowCenterCropping) {
  var target = $(document.getElementById($(el).data('for')));
  var initialPaths = target.data("init");
  var mediaFieldEditor = $(el);
  var idprefix = mediaFieldEditor.attr("id");
  var mediaFieldApp;
  mediaFieldApps.push(mediaFieldApp = new Vue({
    el: mediaFieldEditor.get(0),
    data: {
      mediaItems: [],
      selectedMedia: null,
      smallThumbs: false,
      idPrefix: idprefix,
      initialized: false,
      allowMediaText: allowMediaText,
      backupMediaText: '',
      allowCenterCropping: allowCenterCropping,
      backupCenter: [null, null]
    },
    created: function created() {
      var self = this;
      self.currentPrefs = JSON.parse(localStorage.getItem('mediaFieldPrefs'));
    },
    computed: {
      paths: {
        get: function get() {
          var mediaPaths = [];

          if (!this.initialized) {
            return JSON.stringify(initialPaths);
          }

          this.mediaItems.forEach(function (x) {
            if (x.mediaPath === 'not-found') {
              return;
            }

            mediaPaths.push({
              path: x.mediaPath,
              mediaText: x.mediaText,
              center: x.center
            });
          });
          return JSON.stringify(mediaPaths);
        },
        set: function set(values) {
          var self = this;
          var mediaPaths = values || [];
          var signal = $.Deferred();
          var items = [];
          var length = 0;
          mediaPaths.forEach(function (x, i) {
            items.push({
              name: ' ' + x.path,
              mime: '',
              mediaPath: ''
            }); // don't remove the space. Something different is needed or it wont react when the real name arrives.

            promise = $.when(signal).done(function () {
              $.ajax({
                url: mediaItemUrl + "?path=" + encodeURIComponent(x.path),
                method: 'GET',
                success: function success(data) {
                  data.vuekey = data.name + i.toString();
                  data.mediaText = x.mediaText; // This value is not returned from the ajax call.

                  data.center = x.center; // This value is not returned from the ajax call.

                  items.splice(i, 1, data);

                  if (items.length === ++length) {
                    items.forEach(function (y) {
                      self.mediaItems.push(y);
                    });
                    self.initialized = true;
                  }
                },
                error: function error(_error) {
                  console.log(_error);
                  items.splice(i, 1, {
                    name: x.path,
                    mime: '',
                    mediaPath: 'not-found',
                    mediaText: '',
                    center: [null, null]
                  });

                  if (items.length === ++length) {
                    items.forEach(function (x) {
                      self.mediaItems.push(x);
                    });
                    self.initialized = true;
                  }
                }
              });
            });
          });
          signal.resolve();
        }
      },
      fileSize: function fileSize() {
        return Math.round(this.selectedMedia.size / 1024);
      },
      canAddMedia: function canAddMedia() {
        return this.mediaItems.length === 0 || this.mediaItems.length > 0 && allowMultiple;
      },
      thumbSize: function thumbSize() {
        return this.smallThumbs ? 120 : 240;
      },
      currentPrefs: {
        get: function get() {
          return {
            smallThumbs: this.smallThumbs
          };
        },
        set: function set(newPrefs) {
          if (!newPrefs) {
            return;
          }

          this.smallThumbs = newPrefs.smallThumbs;
        }
      }
    },
    mounted: function mounted() {
      var self = this;
      self.paths = initialPaths;
      self.$on('selectAndDeleteMediaRequested', function (media) {
        self.selectAndDeleteMedia(media);
      });
      self.$on('selectMediaRequested', function (media) {
        self.selectMedia(media);
      });
      self.$on('filesUploaded', function (files) {
        self.addMediaFiles(files);
      });
    },
    methods: {
      selectMedia: function selectMedia(media) {
        this.selectedMedia = media;
      },
      showModal: function showModal(event) {
        var self = this;

        if (self.canAddMedia) {
          $("#mediaApp").detach().appendTo($(modalBodyElement).find('.modal-body'));
          $("#mediaApp").show();
          var modal = $(modalBodyElement).modal();
          $(modalBodyElement).find('.mediaFieldSelectButton').off('click').on('click', function (v) {
            self.addMediaFiles(mediaApp.selectedMedias); // we don't want the included medias to be still selected the next time we open the modal.

            mediaApp.selectedMedias = [];
            modal.modal('hide');
            return true;
          });
        }
      },
      showMediaTextModal: function showMediaTextModal(event) {
        $(this.$refs.mediaTextModal).modal();
        this.backupMediaText = this.selectedMedia.mediaText;
      },
      cancelMediaTextModal: function cancelMediaTextModal(event) {
        $(this.$refs.mediaTextModal).modal('hide');
        this.selectedMedia.mediaText = this.backupMediaText;
      },
      showCenterCroppingModal: function showCenterCroppingModal(event) {
        $(this.$refs.centerCroppingModal).modal(); // Cause a refresh to recalc heights.

        this.$set(this.selectedMedia.center, 0, this.selectedMedia.center[0]);
        this.$set(this.selectedMedia.center, 1, this.selectedMedia.center[1]);
        this.backupCenter = this.selectedMedia.center;
      },
      cancelCenterCroppingModal: function cancelCenterCroppingModal(event) {
        $(this.$refs.centerCroppingModal).modal('hide');
        this.selectedMedia.center = this.backupCenter;
      },
      clearCenterCrop: function clearCenterCrop(event) {
        this.$set(this.selectedMedia.center, 0, null);
        this.$set(this.selectedMedia.center, 1, null);
      },
      onCropDrop: function onCropDrop(event) {
        var image = this.$refs.cropImage;
        this.$set(this.selectedMedia.center, 0, event.offsetX / image.clientWidth);
        this.$set(this.selectedMedia.center, 1, event.offsetY / image.clientHeight);
      },
      cropLeft: function cropLeft() {
        if (this.$refs.cropImage && this.selectedMedia) {
          var position = this.selectedMedia.center[0] * this.$refs.cropImage.clientWidth;

          if (position < 17) {
            position = 17;
          }

          return position + 'px';
        } else {
          return '0';
        }
      },
      cropTop: function cropTop() {
        if (this.$refs.cropImage && this.selectedMedia) {
          var position = this.selectedMedia.center[1] * this.$refs.cropImage.clientHeight;

          if (position < 15) {
            position = 15;
          }

          return position + 'px';
        } else {
          return '0';
        }
      },
      setCrop: function setCrop(event) {
        var image = this.$refs.cropImage;
        this.$set(this.selectedMedia.center, 0, event.offsetX / image.clientWidth);
        this.$set(this.selectedMedia.center, 1, event.offsetY / image.clientHeight);
      },
      addMediaFiles: function addMediaFiles(files) {
        if (files.length > 1 && allowMultiple === false) {
          alert($('#onlyOneItemMessage').val());
          mediaFieldApp.mediaItems.push(files[0]);
          mediaFieldApp.initialized = true;
        } else {
          mediaFieldApp.mediaItems = mediaFieldApp.mediaItems.concat(files);
          mediaFieldApp.initialized = true;
        }
      },
      removeSelected: function removeSelected(event) {
        if (this.selectedMedia) {
          var index = this.mediaItems && this.mediaItems.indexOf(this.selectedMedia);

          if (index > -1) {
            this.mediaItems.splice(index, 1);
          }
        } else {
          // The remove button can also remove a unique media item
          if (this.mediaItems.length === 1) {
            this.mediaItems.splice(0, 1);
          }
        }

        this.selectedMedia = null;
      },
      selectAndDeleteMedia: function selectAndDeleteMedia(media) {
        var self = this;
        self.selectedMedia = media; // setTimeout because sometimes 
        // removeSelected was called even before the media was set.

        setTimeout(function () {
          self.removeSelected();
        }, 100);
      }
    },
    watch: {
      mediaItems: {
        deep: true,
        handler: function handler() {
          // Trigger preview rendering
          setTimeout(function () {
            $(document).trigger('contentpreview:render');
          }, 100);
        }
      },
      currentPrefs: function currentPrefs(newPrefs) {
        localStorage.setItem('mediaFieldPrefs', JSON.stringify(newPrefs));
      }
    }
  }));
}
// different media field editors will add themselves to this array
var mediaFieldApps = [];
// <upload> component
Vue.component('upload', {
  template: '\
        <div :class="{ \'upload-warning\' : model.errorMessage }" class="upload m-2 p-2 pt-0"> \
            <span v-if="model.errorMessage" v-on:click="dismissWarning()" class="close-warning"><i class="fa fa-times"></i> </span>\
            <p class="upload-name" :title="model.errorMessage">{{ model.name }}</p> \
            <div> \
               <span v-show="!model.errorMessage" :style="{ width: model.percentage + \'%\'}" class="progress-bar"> </span> \
               <span v-if="model.errorMessage" class="error-message" :title="model.errorMessage"> Error: {{ model.errorMessage }} </span> \
            </div> \
        </div> \
        ',
  props: {
    model: Object
  },
  mounted: function mounted() {
    var self = this;
    $('#fileupload').bind('fileuploadprogress', function (e, data) {
      if (data.files[0].name !== self.model.name) {
        return;
      }

      self.model.percentage = parseInt(data.loaded / data.total * 100, 10);
    });
    $('#fileupload').bind('fileuploaddone', function (e, data) {
      if (data.files[0].name !== self.model.name) {
        return;
      }

      if (data.result.files[0].error) {
        self.handleFailure(data.files[0].name, data.result.files[0].error);
      } else {
        bus.$emit('removalRequest', self.model);
      }
    });
    $('#fileupload').bind('fileuploadfail', function (e, data) {
      if (data.files[0].name !== self.model.name) {
        return;
      }

      self.handleFailure(data.files[0].name, data.textStatus);
    });
  },
  methods: {
    handleFailure: function handleFailure(fileName, message) {
      if (fileName !== this.model.name) {
        return;
      }

      this.model.errorMessage = message;
      bus.$emit('ErrorOnUpload', this.model);
    },
    dismissWarning: function dismissWarning() {
      bus.$emit('removalRequest', this.model);
    }
  }
});
// <upload-list> component
Vue.component('uploadList', {
  template: '\
        <div class="upload-list" v-show="files.length > 0"> \
            <div class="header" @click="expanded = !expanded"> \
                <span> {{ T.uploads }} </span> \
                <span v-show="pendingCount"> (Pending: {{ pendingCount }}) </span> \
                <span v-show="errorCount" :class="{ \'text-danger\' : errorCount }"> ( {{ T.errors }}: {{ errorCount }} / <a href="javascript:;" v-on:click.stop="clearErrors" > {{ T.clearErrors }} </a>)</span> \
                    <div class="toggle-button"> \
                    <div v-show="expanded"> \
                        <i class="fa fa-chevron-down"></i> \
                    </div> \
                    <div v-show="!expanded"> \
                        <i class="fa fa-chevron-up"></i> \
                    </div> \
                </div> \
            </div> \
            <div class="card-body" v-show="expanded"> \
                <div class="d-flex flex-wrap"> \
                    <upload v-for="f in files" :key="f.name"  :model="f"></upload> \
                </div > \
            </div> \
        </div> \
        ',
  data: function data() {
    return {
      files: [],
      T: {},
      expanded: false,
      pendingCount: 0,
      errorCount: 0
    };
  },
  created: function created() {
    var self = this; // retrieving localized strings from view

    self.T.uploads = $('#t-uploads').val();
    self.T.errors = $('#t-errors').val();
    self.T.clearErrors = $('#t-clear-errors').val();
  },
  computed: {
    fileCount: function fileCount() {
      return this.files.length;
    }
  },
  mounted: function mounted() {
    var self = this;
    $('#fileupload').bind('fileuploadadd', function (e, data) {
      if (!data.files) {
        return;
      }

      data.files.forEach(function (newFile) {
        var alreadyInList = self.files.some(function (f) {
          return f.name == newFile.name;
        });

        if (!alreadyInList) {
          self.files.push({
            name: newFile.name,
            percentage: 0,
            errorMessage: ''
          });
        } else {
          console.error('A file with the same name is already on the queue:' + newFile.name);
        }
      });
    });
    bus.$on('removalRequest', function (fileUpload) {
      self.files.forEach(function (item, index, array) {
        if (item.name == fileUpload.name) {
          array.splice(index, 1);
        }
      });
    });
    bus.$on('ErrorOnUpload', function (fileUpload) {
      self.updateCount();
    });
  },
  methods: {
    updateCount: function updateCount() {
      this.errorCount = this.files.filter(function (item) {
        return item.errorMessage != '';
      }).length;
      this.pendingCount = this.files.length - this.errorCount;

      if (this.files.length < 1) {
        this.expanded = false;
      }
    },
    clearErrors: function clearErrors() {
      this.files = this.files.filter(function (item) {
        return item.errorMessage == '';
      });
    }
  },
  watch: {
    files: function files() {
      this.updateCount();
    }
  }
});
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialized;
var mediaApp;
var _root = {
  name: 'Media Library',
  path: '',
  folder: '',
  isDirectory: true
};
var bus = new Vue();

function initializeMediaApplication(displayMediaApplication, mediaApplicationUrl, pathBase) {
  if (initialized) {
    return;
  }

  initialized = true;

  if (!mediaApplicationUrl) {
    console.error('mediaApplicationUrl variable is not defined');
  }

  $.ajax({
    url: mediaApplicationUrl,
    method: 'GET',
    success: function success(content) {
      $('.ta-content').append(content);
      $(document).trigger('mediaapplication:ready');
      mediaApp = new Vue({
        el: '#mediaApp',
        data: {
          selectedFolder: {},
          mediaItems: [],
          selectedMedias: [],
          errors: [],
          dragDropThumbnail: new Image(),
          smallThumbs: false,
          gridView: false,
          mediaFilter: '',
          sortBy: '',
          sortAsc: true,
          itemsInPage: []
        },
        created: function created() {
          var self = this;
          self.dragDropThumbnail.src = (pathBase || '') + '/OrchardCore.Media/Images/drag-thumbnail.png';
          bus.$on('folderSelected', function (folder) {
            self.selectedFolder = folder;
          });
          bus.$on('folderDeleted', function () {
            self.selectRoot();
          });
          bus.$on('folderAdded', function (folder) {
            self.selectedFolder = folder;
            folder.selected = true;
          });
          bus.$on('beforeFolderAdded', function (folder) {
            self.loadFolder(folder);
          });
          bus.$on('mediaListMoved', function (errorInfo) {
            self.loadFolder(self.selectedFolder);

            if (errorInfo) {
              self.errors.push(errorInfo);
            }
          });
          bus.$on('mediaRenamed', function (newName, newPath, oldPath) {
            var media = self.mediaItems.filter(function (item) {
              return item.mediaPath === oldPath;
            })[0];
            media.mediaPath = newPath;
            media.name = newName;
          });
          bus.$on('createFolderRequested', function (media) {
            self.createFolder();
          });
          bus.$on('deleteFolderRequested', function (media) {
            self.deleteFolder();
          }); // common handlers for actions in both grid and table view.

          bus.$on('sortChangeRequested', function (newSort) {
            self.changeSort(newSort);
          });
          bus.$on('mediaToggleRequested', function (media) {
            self.toggleSelectionOfMedia(media);
          });
          bus.$on('renameMediaRequested', function (media) {
            self.renameMedia(media);
          });
          bus.$on('deleteMediaRequested', function (media) {
            self.deleteMediaItem(media);
          });
          bus.$on('mediaDragStartRequested', function (media, e) {
            self.handleDragStart(media, e);
          }); // handler for pager events

          bus.$on('pagerEvent', function (itemsInPage) {
            self.itemsInPage = itemsInPage;
            self.selectedMedias = [];
          });

          if (!localStorage.getItem('mediaApplicationPrefs')) {
            self.selectedFolder = _root;
            return;
          }

          self.currentPrefs = JSON.parse(localStorage.getItem('mediaApplicationPrefs'));
        },
        computed: {
          isHome: function isHome() {
            return this.selectedFolder == _root;
          },
          parents: function parents() {
            var p = [];
            parentFolder = this.selectedFolder;

            while (parentFolder && parentFolder.path != '') {
              p.unshift(parentFolder);
              parentFolder = parentFolder.parent;
            }

            return p;
          },
          root: function root() {
            return _root;
          },
          filteredMediaItems: function filteredMediaItems() {
            var self = this;
            self.selectedMedias = [];
            var filtered = self.mediaItems.filter(function (item) {
              return item.name.toLowerCase().indexOf(self.mediaFilter.toLowerCase()) > -1;
            });

            switch (self.sortBy) {
              case 'size':
                filtered.sort(function (a, b) {
                  return self.sortAsc ? a.size - b.size : b.size - a.size;
                });
                break;

              case 'mime':
                filtered.sort(function (a, b) {
                  return self.sortAsc ? a.mime.toLowerCase().localeCompare(b.mime.toLowerCase()) : b.mime.toLowerCase().localeCompare(a.mime.toLowerCase());
                });
                break;

              case 'lastModify':
                filtered.sort(function (a, b) {
                  return self.sortAsc ? a.lastModify - b.lastModify : b.lastModify - a.lastModify;
                });
                break;

              default:
                filtered.sort(function (a, b) {
                  return self.sortAsc ? a.name.toLowerCase().localeCompare(b.name.toLowerCase()) : b.name.toLowerCase().localeCompare(a.name.toLowerCase());
                });
            }

            return filtered;
          },
          hiddenCount: function hiddenCount() {
            var result = 0;
            result = this.mediaItems.length - this.filteredMediaItems.length;
            return result;
          },
          thumbSize: function thumbSize() {
            return this.smallThumbs ? 100 : 240;
          },
          currentPrefs: {
            get: function get() {
              return {
                smallThumbs: this.smallThumbs,
                selectedFolder: this.selectedFolder,
                gridView: this.gridView
              };
            },
            set: function set(newPrefs) {
              if (!newPrefs) {
                return;
              }

              this.smallThumbs = newPrefs.smallThumbs;
              this.selectedFolder = newPrefs.selectedFolder;
              this.gridView = newPrefs.gridView;
            }
          }
        },
        watch: {
          currentPrefs: function currentPrefs(newPrefs) {
            localStorage.setItem('mediaApplicationPrefs', JSON.stringify(newPrefs));
          },
          selectedFolder: function selectedFolder(newFolder) {
            this.mediaFilter = '';
            this.selectedFolder = newFolder;
            this.loadFolder(newFolder);
          }
        },
        mounted: function mounted() {
          this.$refs.rootFolder.toggle();
        },
        methods: {
          uploadUrl: function uploadUrl() {
            return this.selectedFolder ? $('#uploadFiles').val() + "?path=" + encodeURIComponent(this.selectedFolder.path) : null;
          },
          selectRoot: function selectRoot() {
            this.selectedFolder = this.root;
          },
          loadFolder: function loadFolder(folder) {
            this.errors = [];
            this.selectedMedias = [];
            var self = this;
            $.ajax({
              url: $('#getMediaItemsUrl').val() + "?path=" + encodeURIComponent(folder.path),
              method: 'GET',
              success: function success(data) {
                data.forEach(function (item) {
                  item.open = false;
                });
                self.mediaItems = data;
                self.selectedMedias = [];
                self.sortBy = '';
                self.sortAsc = true;
              },
              error: function error(_error) {
                console.log('error loading folder:' + folder.path);
                self.selectRoot();
              }
            });
          },
          selectAll: function selectAll() {
            this.selectedMedias = [];

            for (var i = 0; i < this.filteredMediaItems.length; i++) {
              this.selectedMedias.push(this.filteredMediaItems[i]);
            }
          },
          unSelectAll: function unSelectAll() {
            this.selectedMedias = [];
          },
          invertSelection: function invertSelection() {
            var temp = [];

            for (var i = 0; i < this.filteredMediaItems.length; i++) {
              if (this.isMediaSelected(this.filteredMediaItems[i]) == false) {
                temp.push(this.filteredMediaItems[i]);
              }
            }

            this.selectedMedias = temp;
          },
          toggleSelectionOfMedia: function toggleSelectionOfMedia(media) {
            if (this.isMediaSelected(media) == true) {
              this.selectedMedias.splice(this.selectedMedias.indexOf(media), 1);
            } else {
              this.selectedMedias.push(media);
            }
          },
          isMediaSelected: function isMediaSelected(media) {
            var result = this.selectedMedias.some(function (element, index, array) {
              return element.url.toLowerCase() === media.url.toLowerCase();
            });
            return result;
          },
          deleteFolder: function deleteFolder() {
            var folder = this.selectedFolder;
            var self = this; // The root folder can't be deleted

            if (folder == this.root.model) {
              return;
            }

            confirmDialog(_objectSpread(_objectSpread({}, $("#deleteFolder").data()), {}, {
              callback: function callback(resp) {
                if (resp) {
                  $.ajax({
                    url: $('#deleteFolderUrl').val() + "?path=" + encodeURIComponent(folder.path),
                    method: 'POST',
                    data: {
                      __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val()
                    },
                    success: function success(data) {
                      bus.$emit('deleteFolder', folder);
                    },
                    error: function error(_error2) {
                      console.error(_error2.responseText);
                    }
                  });
                }
              }
            }));
          },
          createFolder: function createFolder() {
            $('#createFolderModal-errors').empty();
            $('#createFolderModal').modal('show');
            $('#createFolderModal .modal-body input').val('').focus();
          },
          renameMedia: function renameMedia(media) {
            $('#renameMediaModal-errors').empty();
            $('#renameMediaModal').modal('show');
            $('#old-item-name').val(media.name);
            $('#renameMediaModal .modal-body input').val(media.name).focus();
          },
          selectAndDeleteMedia: function selectAndDeleteMedia(media) {
            this.deleteMedia();
          },
          deleteMediaList: function deleteMediaList() {
            var mediaList = this.selectedMedias;
            var self = this;

            if (mediaList.length < 1) {
              return;
            }

            confirmDialog(_objectSpread(_objectSpread({}, $("#deleteMedia").data()), {}, {
              callback: function callback(resp) {
                if (resp) {
                  var paths = [];

                  for (var i = 0; i < mediaList.length; i++) {
                    paths.push(mediaList[i].mediaPath);
                  }

                  $.ajax({
                    url: $('#deleteMediaListUrl').val(),
                    method: 'POST',
                    data: {
                      __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
                      paths: paths
                    },
                    success: function success(data) {
                      for (var i = 0; i < self.selectedMedias.length; i++) {
                        var index = self.mediaItems && self.mediaItems.indexOf(self.selectedMedias[i]);

                        if (index > -1) {
                          self.mediaItems.splice(index, 1);
                          bus.$emit('mediaDeleted', self.selectedMedias[i]);
                        }
                      }

                      self.selectedMedias = [];
                    },
                    error: function error(_error3) {
                      console.error(_error3.responseText);
                    }
                  });
                }
              }
            }));
          },
          deleteMediaItem: function deleteMediaItem(media) {
            var self = this;

            if (!media) {
              return;
            }

            confirmDialog(_objectSpread(_objectSpread({}, $("#deleteMedia").data()), {}, {
              callback: function callback(resp) {
                if (resp) {
                  $.ajax({
                    url: $('#deleteMediaUrl').val() + "?path=" + encodeURIComponent(media.mediaPath),
                    method: 'POST',
                    data: {
                      __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val()
                    },
                    success: function success(data) {
                      var index = self.mediaItems && self.mediaItems.indexOf(media);

                      if (index > -1) {
                        self.mediaItems.splice(index, 1);
                        bus.$emit('mediaDeleted', media);
                      } //self.selectedMedia = null;

                    },
                    error: function error(_error4) {
                      console.error(_error4.responseText);
                    }
                  });
                }
              }
            }));
          },
          handleDragStart: function handleDragStart(media, e) {
            // first part of move media to folder:
            // prepare the data that will be handled by the folder component on drop event
            var mediaNames = [];
            this.selectedMedias.forEach(function (item) {
              mediaNames.push(item.name);
            }); // in case the user drags an unselected item, we select it first

            if (this.isMediaSelected(media) == false) {
              mediaNames.push(media.name);
              this.selectedMedias.push(media);
            }

            e.dataTransfer.setData('mediaNames', JSON.stringify(mediaNames));
            e.dataTransfer.setData('sourceFolder', this.selectedFolder.path);
            e.dataTransfer.setDragImage(this.dragDropThumbnail, 10, 10);
            e.dataTransfer.effectAllowed = 'move';
          },
          handleScrollWhileDrag: function handleScrollWhileDrag(e) {
            if (e.clientY < 150) {
              window.scrollBy(0, -10);
            }

            if (e.clientY > window.innerHeight - 100) {
              window.scrollBy(0, 10);
            }
          },
          changeSort: function changeSort(newSort) {
            if (this.sortBy == newSort) {
              this.sortAsc = !this.sortAsc;
            } else {
              this.sortAsc = true;
              this.sortBy = newSort;
            }
          }
        }
      });
      $('#create-folder-name').keypress(function (e) {
        var key = e.which;

        if (key == 13) {
          // the enter key code
          $('#modalFooterOk').click();
          return false;
        }
      });
      $('#modalFooterOk').on('click', function (e) {
        var name = $('#create-folder-name').val();

        if (name === "") {
          return;
        }

        $.ajax({
          url: $('#createFolderUrl').val() + "?path=" + encodeURIComponent(mediaApp.selectedFolder.path) + "&name=" + encodeURIComponent(name),
          method: 'POST',
          data: {
            __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val()
          },
          success: function success(data) {
            bus.$emit('addFolder', mediaApp.selectedFolder, data);
            $('#createFolderModal').modal('hide');
          },
          error: function error(_error5) {
            $('#createFolderModal-errors').empty();
            var errorMessage = JSON.parse(_error5.responseText).value;
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMessage).appendTo($('#createFolderModal-errors'));
          }
        });
      });
      $('#renameMediaModalFooterOk').on('click', function (e) {
        var newName = $('#new-item-name').val();
        var oldName = $('#old-item-name').val();

        if (newName === "") {
          return;
        }

        var currentFolder = mediaApp.selectedFolder.path + "/";

        if (currentFolder === "/") {
          currentFolder = "";
        }

        var newPath = currentFolder + newName;
        var oldPath = currentFolder + oldName;

        if (newPath.toLowerCase() === oldPath.toLowerCase()) {
          $('#renameMediaModal').modal('hide');
          return;
        }

        $.ajax({
          url: $('#renameMediaUrl').val() + "?oldPath=" + encodeURIComponent(oldPath) + "&newPath=" + encodeURIComponent(newPath),
          method: 'POST',
          data: {
            __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val()
          },
          success: function success(data) {
            $('#renameMediaModal').modal('hide');
            bus.$emit('mediaRenamed', newName, newPath, oldPath);
          },
          error: function error(_error6) {
            $('#renameMediaModal-errors').empty();
            var errorMessage = JSON.parse(_error6.responseText).value;
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMessage).appendTo($('#renameMediaModal-errors'));
          }
        });
      });

      if (displayMediaApplication) {
        document.getElementById('mediaApp').style.display = "";
      }

      $(document).trigger('mediaApp:ready');
    },
    error: function error(_error7) {
      console.error(_error7.responseText);
    }
  });
}
$(document).on('mediaApp:ready', function () {
  $('#fileupload').fileupload({
    dropZone: $('#mediaApp'),
    limitConcurrentUploads: 20,
    dataType: 'json',
    url: $('#uploadFiles').val(),
    formData: function formData() {
      var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
      return [{
        name: 'path',
        value: mediaApp.selectedFolder.path
      }, {
        name: '__RequestVerificationToken',
        value: antiForgeryToken
      }];
    },
    done: function done(e, data) {
      $.each(data.result.files, function (index, file) {
        if (!file.error) {
          mediaApp.mediaItems.push(file);
        }
      });
    }
  });
});
$(document).bind('dragover', function (e) {
  var dt = e.originalEvent.dataTransfer;

  if (dt.types && (dt.types.indexOf ? dt.types.indexOf('Files') != -1 : dt.types.contains('Files'))) {
    var dropZone = $('#customdropzone'),
        timeout = window.dropZoneTimeout;

    if (timeout) {
      clearTimeout(timeout);
    } else {
      dropZone.addClass('in');
    }

    var hoveredDropZone = $(e.target).closest(dropZone);
    window.dropZoneTimeout = setTimeout(function () {
      window.dropZoneTimeout = null;
      dropZone.removeClass('in');
    }, 100);
  }
});
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// <folder> component
Vue.component('folder', {
  template: "\n        <li :class=\"{selected: isSelected}\" \n                v-on:dragleave.prevent = \"handleDragLeave($event);\" \n                v-on:dragover.prevent.stop=\"handleDragOver($event);\" \n                v-on:drop.prevent.stop = \"moveMediaToFolder(model, $event)\" >\n            <div :class=\"{folderhovered: isHovered , treeroot: level == 1}\" >\n                <a href=\"javascript:;\" :style=\"{ padding".concat(document.dir == "ltr" ? "Left" : "Right", ":padding + 'px' }\" v-on:click=\"select\"  draggable=\"false\" class=\"folder-menu-item\">\n                  <span v-on:click.stop=\"toggle\" class=\"expand\" :class=\"{opened: open, closed: !open, empty: empty}\"><i v-if=\"open\" class=\"fas fa-chevron-right\"></i></span> \n                  <div class=\"folder-name ml-2\">{{model.name}}</div>\n                    <div class=\"btn-group folder-actions\" >\n                            <a v-cloak href=\"javascript:;\" class=\"btn btn-sm\" v-on:click=\"createFolder\" v-if=\"isSelected || isRoot\"><i class=\"fas fa-plus\"></i></a>\n                            <a v-cloak href=\"javascript:;\" class=\"btn btn-sm\" v-on:click=\"deleteFolder\" v-if=\"isSelected && !isRoot\"><i class=\"fas fa-trash\"></i></a>\n                    </div>\n                </a>\n            </div>\n            <ol v-show=\"open\">\n                <folder v-for=\"folder in children\"\n                        :key=\"folder.path\"\n                        :model=\"folder\"\n                        :selected-in-media-app=\"selectedInMediaApp\"\n                        :level=\"level + 1\">\n                </folder>\n            </ol>\n        </li>\n        "),
  props: {
    model: Object,
    selectedInMediaApp: Object,
    level: Number
  },
  data: function data() {
    return {
      open: false,
      children: null,
      // not initialized state (for lazy-loading)
      parent: null,
      isHovered: false,
      padding: 0
    };
  },
  computed: {
    empty: function empty() {
      return !this.children || this.children.length == 0;
    },
    isSelected: function isSelected() {
      return this.selectedInMediaApp.name == this.model.name && this.selectedInMediaApp.path == this.model.path;
    },
    isRoot: function isRoot() {
      return this.model.path === '';
    }
  },
  mounted: function mounted() {
    if (this.isRoot == false && this.isAncestorOfSelectedFolder()) {
      this.toggle();
    }

    this.padding = this.level < 3 ? 16 : 16 + this.level * 8;
  },
  created: function created() {
    var self = this;
    bus.$on('deleteFolder', function (folder) {
      if (self.children) {
        var index = self.children && self.children.indexOf(folder);

        if (index > -1) {
          self.children.splice(index, 1);
          bus.$emit('folderDeleted');
        }
      }
    });
    bus.$on('addFolder', function (target, folder) {
      if (self.model == target) {
        bus.$emit('beforeFolderAdded', self.model);

        if (self.children !== null) {
          self.children.push(folder);
        }

        folder.parent = self.model;
        bus.$emit('folderAdded', folder);
      }
    });
  },
  methods: {
    isAncestorOfSelectedFolder: function isAncestorOfSelectedFolder() {
      parentFolder = mediaApp.selectedFolder;

      while (parentFolder) {
        if (parentFolder.path == this.model.path) {
          return true;
        }

        parentFolder = parentFolder.parent;
      }

      return false;
    },
    toggle: function toggle() {
      this.open = !this.open;

      if (this.open && !this.children) {
        this.loadChildren();
      }
    },
    select: function select() {
      bus.$emit('folderSelected', this.model);
      this.loadChildren();
    },
    createFolder: function createFolder() {
      bus.$emit('createFolderRequested');
    },
    deleteFolder: function deleteFolder() {
      bus.$emit('deleteFolderRequested');
    },
    loadChildren: function loadChildren() {
      var self = this;

      if (this.open == false) {
        this.open = true;
      }

      $.ajax({
        url: $('#getFoldersUrl').val() + "?path=" + encodeURIComponent(self.model.path),
        method: 'GET',
        success: function success(data) {
          self.children = data;
          self.children.forEach(function (c) {
            c.parent = self.model;
          });
        },
        error: function error(_error) {
          emtpy = false;
          console.error(_error.responseText);
        }
      });
    },
    handleDragOver: function handleDragOver(e) {
      this.isHovered = true;
    },
    handleDragLeave: function handleDragLeave(e) {
      this.isHovered = false;
    },
    moveMediaToFolder: function moveMediaToFolder(folder, e) {
      var self = this;
      self.isHovered = false;
      var mediaNames = JSON.parse(e.dataTransfer.getData('mediaNames'));

      if (mediaNames.length < 1) {
        return;
      }

      var sourceFolder = e.dataTransfer.getData('sourceFolder');
      var targetFolder = folder.path;

      if (sourceFolder === '') {
        sourceFolder = 'root';
      }

      if (targetFolder === '') {
        targetFolder = 'root';
      }

      if (sourceFolder === targetFolder) {
        alert($('#sameFolderMessage').val());
        return;
      }

      confirmDialog(_objectSpread(_objectSpread({}, $("#moveMedia").data()), {}, {
        callback: function callback(resp) {
          if (resp) {
            $.ajax({
              url: $('#moveMediaListUrl').val(),
              method: 'POST',
              data: {
                __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
                mediaNames: mediaNames,
                sourceFolder: sourceFolder,
                targetFolder: targetFolder
              },
              success: function success() {
                bus.$emit('mediaListMoved'); // MediaApp will listen to this, and then it will reload page so the moved medias won't be there anymore
              },
              error: function error(_error2) {
                console.error(_error2.responseText);
                bus.$emit('mediaListMoved', _error2.responseText);
              }
            });
          }
        }
      }));
    }
  }
});
// <media-items-grid> component
Vue.component('media-items-grid', {
  template: "\n        <ol class=\"row media-items-grid\">\n                <li v-for=\"media in filteredMediaItems\"\n                    :key=\"media.name\" \n                    class=\"media-item media-container-main-list-item card\"\n                    :style=\"{width: thumbSize + 2 + 'px'}\"\n                    :class=\"{selected: isMediaSelected(media)}\"\n                    v-on:click.stop=\"toggleSelectionOfMedia(media)\"\n                    draggable=\"true\" v-on:dragstart=\"dragStart(media, $event)\">\n                    <div class=\"thumb-container\" :style=\"{height: thumbSize +'px'}\">\n                        <img v-if=\"media.mime.startsWith('image')\"\n                                :src=\"buildMediaUrl(media.url, thumbSize)\"\n                                :data-mime=\"media.mime\"\n                                :style=\"{maxHeight: thumbSize +'px', maxWidth: thumbSize +'px'}\" />\n                        <i v-else class=\"fa fa-file-o fa-lg\" :data-mime=\"media.mime\"></i>\n                    </div>\n                <div class=\"media-container-main-item-title card-body\">\n                        <a href=\"javascript:;\" class=\"btn btn-light btn-sm float-right inline-media-button edit-button\" v-on:click.stop=\"renameMedia(media)\"><i class=\"fa fa-edit\"></i></a>\n                        <a href=\"javascript:;\" class=\"btn btn-light btn-sm float-right inline-media-button delete-button\" v-on:click.stop=\"deleteMedia(media)\"><i class=\"fa fa-trash\"></i></a>\n                        <a :href=\"media.url\" target=\"_blank\" class=\"btn btn-light btn-sm float-right inline-media-button view-button\"\"><i class=\"fa fa-download\"></i></a>\n                        <span class=\"media-filename card-text small\" :title=\"media.name\">{{ media.name }}</span>\n                    </div>\n                 </li>\n        </ol>\n        ",
  data: function data() {
    return {
      T: {}
    };
  },
  props: {
    filteredMediaItems: Array,
    selectedMedias: Array,
    thumbSize: Number
  },
  created: function created() {
    var self = this; // retrieving localized strings from view

    self.T.editButton = $('#t-edit-button').val();
    self.T.deleteButton = $('#t-delete-button').val();
  },
  methods: {
    isMediaSelected: function isMediaSelected(media) {
      var result = this.selectedMedias.some(function (element, index, array) {
        return element.url.toLowerCase() === media.url.toLowerCase();
      });
      return result;
    },
    buildMediaUrl: function buildMediaUrl(url, thumbSize) {
      return url + (url.indexOf('?') == -1 ? '?' : '&') + 'width=' + thumbSize + '&height=' + thumbSize;
    },
    toggleSelectionOfMedia: function toggleSelectionOfMedia(media) {
      bus.$emit('mediaToggleRequested', media);
    },
    renameMedia: function renameMedia(media) {
      bus.$emit('renameMediaRequested', media);
    },
    deleteMedia: function deleteMedia(media) {
      bus.$emit('deleteMediaRequested', media);
    },
    dragStart: function dragStart(media, e) {
      bus.$emit('mediaDragStartRequested', media, e);
    }
  }
});
// <media-items-table> component
Vue.component('media-items-table', {
  template: "\n        <table class=\"table media-items-table m-0\">\n            <thead>\n                <tr class=\"header-row\">\n                    <th scope=\"col\" class=\"thumbnail-column\">{{ T.imageHeader }}</th>\n                    <th scope=\"col\" v-on:click=\"changeSort('name')\">\n                       {{ T.nameHeader }}\n                         <sort-indicator colname=\"name\" :selectedcolname=\"sortBy\" :asc=\"sortAsc\"></sort-indicator>\n                    </th>\n                    <th scope=\"col\" v-on:click=\"changeSort('lastModify')\"> \n                       {{ T.lastModifyHeader }} \n                         <sort-indicator colname=\"lastModify\" :selectedcolname=\"sortBy\" :asc=\"sortAsc\"></sort-indicator> \n                    </th> \n                    <th scope=\"col\" v-on:click=\"changeSort('size')\">\n                        <span class=\"optional-col\">\n                            {{ T.sizeHeader }}\n                         <sort-indicator colname=\"size\" :selectedcolname=\"sortBy\" :asc=\"sortAsc\"></sort-indicator>\n                        </span>\n                    </th>\n                    <th scope=\"col\" v-on:click=\"changeSort('mime')\">\n                        <span class=\"optional-col\">\n                           {{ T.typeHeader }}\n                         <sort-indicator colname=\"mime\" :selectedcolname=\"sortBy\" :asc=\"sortAsc\"></sort-indicator>\n                        </span>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                    <tr v-for=\"media in filteredMediaItems\"\n                          class=\"media-item\"\n                          :class=\"{selected: isMediaSelected(media)}\"\n                          v-on:click.stop=\"toggleSelectionOfMedia(media)\"\n                          draggable=\"true\" v-on:dragstart=\"dragStart(media, $event)\"\n                          :key=\"media.name\">\n                             <td class=\"thumbnail-column\">\n                                <div class=\"img-wrapper\">\n                                    <img v-if=\"media.mime.startsWith('image')\" draggable=\"false\" :src=\"buildMediaUrl(media.url, thumbSize)\" />\n                                    <i v-else class=\"fa fa-file-o fa-lg\" :data-mime=\"media.mime\"></i>\n                                </div>\n                            </td>\n                            <td>\n                                <div class=\"media-name-cell\">\n                                   <span class=\"break-word\"> {{ media.name }} </span>\n                                    <div class=\"buttons-container\">\n                                        <a href=\"javascript:;\" class=\"btn btn-link btn-sm mr-1 edit-button\" v-on:click.stop=\"renameMedia(media)\"> {{ T.editButton }} </a >\n                                        <a href=\"javascript:;\" class=\"btn btn-link btn-sm delete-button\" v-on:click.stop=\"deleteMedia(media)\"> {{ T.deleteButton }} </a>\n                                        <a :href=\"media.url\" target=\"_blank\" class=\"btn btn-link btn-sm view-button\"> {{ T.viewButton }} </a>\n                                    </div>\n                                </div>\n                            </td>\n                            <td>\n                                <div class=\"text-col\"> {{ printDateTime(media.lastModify) }} </div>\n                            </td>\n                            <td>\n                                <div class=\"text-col optional-col\"> {{ isNaN(media.size)? 0 : Math.round(media.size / 1024) }} KB</div>\n                            </td>\n                            <td>\n                                <div class=\"text-col optional-col\">{{ media.mime }}</div>\n                            </td>\n                   </tr>\n            </tbody>\n        </table>\n        ",
  data: function data() {
    return {
      T: {}
    };
  },
  props: {
    sortBy: String,
    sortAsc: Boolean,
    filteredMediaItems: Array,
    selectedMedias: Array,
    thumbSize: Number
  },
  created: function created() {
    var self = this;
    self.T.imageHeader = $('#t-image-header').val();
    self.T.nameHeader = $('#t-name-header').val();
    self.T.lastModifyHeader = $('#t-lastModify-header').val();
    self.T.sizeHeader = $('#t-size-header').val();
    self.T.typeHeader = $('#t-type-header').val();
    self.T.editButton = $('#t-edit-button').val();
    self.T.deleteButton = $('#t-delete-button').val();
    self.T.viewButton = $('#t-view-button').val();
  },
  methods: {
    isMediaSelected: function isMediaSelected(media) {
      var result = this.selectedMedias.some(function (element, index, array) {
        return element.url.toLowerCase() === media.url.toLowerCase();
      });
      return result;
    },
    buildMediaUrl: function buildMediaUrl(url, thumbSize) {
      return url + (url.indexOf('?') == -1 ? '?' : '&') + 'width=' + thumbSize + '&height=' + thumbSize;
    },
    changeSort: function changeSort(newSort) {
      bus.$emit('sortChangeRequested', newSort);
    },
    toggleSelectionOfMedia: function toggleSelectionOfMedia(media) {
      bus.$emit('mediaToggleRequested', media);
    },
    renameMedia: function renameMedia(media) {
      bus.$emit('renameMediaRequested', media);
    },
    deleteMedia: function deleteMedia(media) {
      bus.$emit('deleteMediaRequested', media);
    },
    dragStart: function dragStart(media, e) {
      bus.$emit('mediaDragStartRequested', media, e);
    },
    printDateTime: function printDateTime(datemillis) {
      var d = new Date(datemillis);
      return d.toLocaleString();
    }
  }
});
// This component receives a list of all the items, unpaged.
// As the user interacts with the pager, it raises events with the items in the current page.
// It's the parent's responsibility to listen for these events and display the received items
// <pager> component
Vue.component('pager', {
  template: "\n    <div>\n        <nav id=\"media-pager\" class=\"d-flex justify-content-center\" aria-label=\"Pagination Navigation\" role=\"navigation\" :data-computed-trigger=\"itemsInCurrentPage.length\">\n            <ul class=\"pagination pagination-sm m-0\">\n                <li class=\"page-item media-first-button\" :class=\"{disabled : !canDoFirst}\">\n                    <a class=\"page-link\" href=\"#\" :tabindex=\"canDoFirst ? 0 : -1\" v-on:click=\"goFirst\">{{ T.pagerFirstButton }}</a>\n                </li>\n                <li class=\"page-item\" :class=\"{disabled : !canDoPrev}\">\n                    <a class=\"page-link\" href=\"#\" :tabindex=\"canDoPrev ? 0 : -1\" v-on:click=\"previous\">{{ T.pagerPreviousButton }}</a>\n                </li>\n                <li v-if=\"link !== -1\" class=\"page-item page-number\"  :class=\"{active : current == link - 1}\" v-for=\"link in pageLinks\">\n                    <a class=\"page-link\" href=\"#\" v-on:click=\"goTo(link - 1)\" :aria-label=\"'Goto Page' + link\">\n                        {{link}}\n                        <span v-if=\"current == link -1\" class=\"sr-only\">(current)</span>\n                    </a>\n                </li>\n                <li class=\"page-item\" :class=\"{disabled : !canDoNext}\">\n                    <a class=\"page-link\" href=\"#\" :tabindex=\"canDoNext ? 0 : -1\" v-on:click=\"next\">{{ T.pagerNextButton }}</a>\n                </li>\n                <li class=\"page-item media-last-button\" :class=\"{disabled : !canDoLast}\">\n                    <a class=\"page-link\" href=\"#\" :tabindex=\"canDoLast ? 0 : -1\" v-on:click=\"goLast\">{{ T.pagerLastButton }}</a>\n                </li>\n                <li class=\"page-item ml-4 page-size-info\">\n                    <div style=\"display: flex;\">\n                        <span class=\"page-link disabled text-muted page-size-label\">{{ T.pagerPageSizeLabel }}</span>\n                        <select id=\"pageSizeSelect\" class=\"page-link\" v-model=\"pageSize\">\n                            <option v-for=\"option in pageSizeOptions\" v-bind:value=\"option\">\n                                {{option}}\n                            </option>\n                        </select>\n                    </div>\n                </li>\n            </ul>\n        </nav>\n        <nav class=\"d-flex justify-content-center\">\n            <ul class=\"pagination pagination-sm m-0 mt-2\">\n                <li class=\"page-item ml-4 page-info\">\n                    <span class=\"page-link disabled text-muted \">{{ T.pagerPageLabel }} {{current + 1}}/{{totalPages}}</span>\n                </li>\n                <li class=\"page-item ml-4 total-info\">\n                    <span class=\"page-link disabled text-muted \"> {{ T.pagerTotalLabel }} {{total}}</span>\n                </li>\n            </ul>\n        </nav>\n        </div>\n        ",
  props: {
    sourceItems: Array
  },
  data: function data() {
    return {
      pageSize: 10,
      pageSizeOptions: [10, 30, 50, 100],
      current: 0,
      T: {}
    };
  },
  created: function created() {
    var self = this; // retrieving localized strings from view

    self.T.pagerFirstButton = $('#t-pager-first-button').val();
    self.T.pagerPreviousButton = $('#t-pager-previous-button').val();
    self.T.pagerNextButton = $('#t-pager-next-button').val();
    self.T.pagerLastButton = $('#t-pager-last-button').val();
    self.T.pagerPageSizeLabel = $('#t-pager-page-size-label').val();
    self.T.pagerPageLabel = $('#t-pager-page-label').val();
    self.T.pagerTotalLabel = $('#t-pager-total-label').val();
  },
  methods: {
    next: function next() {
      this.current = this.current + 1;
    },
    previous: function previous() {
      this.current = this.current - 1;
    },
    goFirst: function goFirst() {
      this.current = 0;
    },
    goLast: function goLast() {
      this.current = this.totalPages - 1;
    },
    goTo: function goTo(targetPage) {
      this.current = targetPage;
    }
  },
  computed: {
    total: function total() {
      return this.sourceItems ? this.sourceItems.length : 0;
    },
    totalPages: function totalPages() {
      var pages = Math.ceil(this.total / this.pageSize);
      return pages > 0 ? pages : 1;
    },
    isLastPage: function isLastPage() {
      return this.current + 1 >= this.totalPages;
    },
    isFirstPage: function isFirstPage() {
      return this.current === 0;
    },
    canDoNext: function canDoNext() {
      return !this.isLastPage;
    },
    canDoPrev: function canDoPrev() {
      return !this.isFirstPage;
    },
    canDoFirst: function canDoFirst() {
      return !this.isFirstPage;
    },
    canDoLast: function canDoLast() {
      return !this.isLastPage;
    },
    // this computed is only to have a central place where we detect changes and leverage Vue JS reactivity to raise our event.
    // That event will be handled by the parent media app to display the items in the page.
    // this logic will not run if the computed property is not used in the template. We use a dummy "data-computed-trigger" attribute for that.
    itemsInCurrentPage: function itemsInCurrentPage() {
      var start = this.pageSize * this.current;
      var end = start + this.pageSize;
      var result = this.sourceItems.slice(start, end);
      bus.$emit('pagerEvent', result);
      return result;
    },
    pageLinks: function pageLinks() {
      var links = [];
      links.push(this.current + 1); // Add 2 items before current

      var beforeCurrent = this.current > 0 ? this.current : -1;
      links.unshift(beforeCurrent);
      var beforeBeforeCurrent = this.current > 1 ? this.current - 1 : -1;
      links.unshift(beforeBeforeCurrent); // Add 2 items after current

      var afterCurrent = this.totalPages - this.current > 1 ? this.current + 2 : -1;
      links.push(afterCurrent);
      var afterAfterCurrent = this.totalPages - this.current > 2 ? this.current + 3 : -1;
      links.push(afterAfterCurrent);
      return links;
    }
  },
  watch: {
    sourceItems: function sourceItems() {
      this.current = 0; // resetting current page after receiving a new list of unpaged items
    },
    pageSize: function pageSize() {
      this.current = 0;
    }
  }
});
// <sort-indicator> component
Vue.component('sortIndicator', {
  template: "\n        <div v-show=\"isActive\" class=\"sort-indicator\">\n            <span v-show=\"asc\"><i class=\"small fa fa-chevron-up\"></i></span>\n            <span v-show=\"!asc\"><i class=\"small fa fa-chevron-down\"></i></span>\n        </div>\n        ",
  props: {
    colname: String,
    selectedcolname: String,
    asc: Boolean
  },
  computed: {
    isActive: function isActive() {
      return this.colname.toLowerCase() == this.selectedcolname.toLowerCase();
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5maWxldXBsb2FkLmpzIiwianF1ZXJ5LmlmcmFtZS10cmFuc3BvcnQuanMiLCJNZWRpYUZpZWxkL2F0dGFjaGVkTWVkaWFGaWVsZC5qcyIsIk1lZGlhRmllbGQvbWVkaWFGaWVsZFRodW1ic0NvbnRhaW5lci5qcyIsIk1lZGlhRmllbGQvbWVkaWFmaWVsZC5qcyIsIk1lZGlhRmllbGQvbWVkaWFmaWVsZHNBcHBzQXJyYXkuanMiLCJTaGFyZWQvdXBsb2FkQ29tcG9uZW50LmpzIiwiU2hhcmVkL3VwbG9hZExpc3RDb21wb25lbnQuanMiLCJNZWRpYUFwcC9hcHAuanMiLCJNZWRpYUFwcC9maWxldXBsb2FkLmpzIiwiTWVkaWFBcHAvZm9sZGVyQ29tcG9uZW50LmpzIiwiTWVkaWFBcHAvbWVkaWFJdGVtc0dyaWRDb21wb25lbnQuanMiLCJNZWRpYUFwcC9tZWRpYUl0ZW1zVGFibGVDb21wb25lbnQuanMiLCJNZWRpYUFwcC9wYWdlckNvbXBvbmVudC5qcyIsIk1lZGlhQXBwL3NvcnRJbmRpY2F0b3JDb21wb25lbnQuanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJyZXF1aXJlIiwid2luZG93IiwialF1ZXJ5IiwiJCIsInN1cHBvcnQiLCJmaWxlSW5wdXQiLCJSZWdFeHAiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicHJvcCIsInhockZpbGVVcGxvYWQiLCJQcm9ncmVzc0V2ZW50IiwiRmlsZVJlYWRlciIsInhockZvcm1EYXRhRmlsZVVwbG9hZCIsIkZvcm1EYXRhIiwiYmxvYlNsaWNlIiwiQmxvYiIsInByb3RvdHlwZSIsInNsaWNlIiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsImdldERyYWdIYW5kbGVyIiwidHlwZSIsImlzRHJhZ092ZXIiLCJlIiwiZGF0YVRyYW5zZmVyIiwib3JpZ2luYWxFdmVudCIsImluQXJyYXkiLCJ0eXBlcyIsIl90cmlnZ2VyIiwiRXZlbnQiLCJkZWxlZ2F0ZWRFdmVudCIsInByZXZlbnREZWZhdWx0IiwiZHJvcEVmZmVjdCIsIndpZGdldCIsIm9wdGlvbnMiLCJkcm9wWm9uZSIsImRvY3VtZW50IiwicGFzdGVab25lIiwidW5kZWZpbmVkIiwicmVwbGFjZUZpbGVJbnB1dCIsInBhcmFtTmFtZSIsInNpbmdsZUZpbGVVcGxvYWRzIiwibGltaXRNdWx0aUZpbGVVcGxvYWRzIiwibGltaXRNdWx0aUZpbGVVcGxvYWRTaXplIiwibGltaXRNdWx0aUZpbGVVcGxvYWRTaXplT3ZlcmhlYWQiLCJzZXF1ZW50aWFsVXBsb2FkcyIsImxpbWl0Q29uY3VycmVudFVwbG9hZHMiLCJmb3JjZUlmcmFtZVRyYW5zcG9ydCIsInJlZGlyZWN0IiwicmVkaXJlY3RQYXJhbU5hbWUiLCJwb3N0TWVzc2FnZSIsIm11bHRpcGFydCIsIm1heENodW5rU2l6ZSIsInVwbG9hZGVkQnl0ZXMiLCJyZWNhbGN1bGF0ZVByb2dyZXNzIiwicHJvZ3Jlc3NJbnRlcnZhbCIsImJpdHJhdGVJbnRlcnZhbCIsImF1dG9VcGxvYWQiLCJ1bmlxdWVGaWxlbmFtZXMiLCJtZXNzYWdlcyIsImkxOG4iLCJtZXNzYWdlIiwiY29udGV4dCIsInRvU3RyaW5nIiwiZWFjaCIsImtleSIsInZhbHVlIiwicmVwbGFjZSIsImZvcm1EYXRhIiwiZm9ybSIsInNlcmlhbGl6ZUFycmF5IiwiYWRkIiwiZGF0YSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImZpbGV1cGxvYWQiLCJwcm9jZXNzIiwiZG9uZSIsInN1Ym1pdCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJjYWNoZSIsInRpbWVvdXQiLCJfcHJvbWlzZVBpcGUiLCJwYXJ0cyIsImZuIiwianF1ZXJ5Iiwic3BsaXQiLCJOdW1iZXIiLCJfc3BlY2lhbE9wdGlvbnMiLCJfYmxvYlNsaWNlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfQml0cmF0ZVRpbWVyIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImdldFRpbWUiLCJsb2FkZWQiLCJiaXRyYXRlIiwiZ2V0Qml0cmF0ZSIsImludGVydmFsIiwidGltZURpZmYiLCJfaXNYSFJVcGxvYWQiLCJfZ2V0Rm9ybURhdGEiLCJpc0FycmF5IiwibmFtZSIsInB1c2giLCJfZ2V0VG90YWwiLCJmaWxlcyIsInRvdGFsIiwiaW5kZXgiLCJmaWxlIiwic2l6ZSIsIl9pbml0UHJvZ3Jlc3NPYmplY3QiLCJvYmoiLCJwcm9ncmVzcyIsIl9wcm9ncmVzcyIsImV4dGVuZCIsIl9pbml0UmVzcG9uc2VPYmplY3QiLCJfcmVzcG9uc2UiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfb25Qcm9ncmVzcyIsImxlbmd0aENvbXB1dGFibGUiLCJfdGltZSIsIk1hdGgiLCJmbG9vciIsImNodW5rU2l6ZSIsIl9iaXRyYXRlVGltZXIiLCJfaW5pdFByb2dyZXNzTGlzdGVuZXIiLCJ0aGF0IiwieGhyIiwiYWpheFNldHRpbmdzIiwidXBsb2FkIiwib24iLCJvZSIsIl9kZWluaXRQcm9ncmVzc0xpc3RlbmVyIiwib2ZmIiwiX2lzSW5zdGFuY2VPZiIsIl9nZXRVbmlxdWVGaWxlbmFtZSIsIm1hcCIsIlN0cmluZyIsIl8iLCJwMSIsInAyIiwiZXh0IiwiX2luaXRYSFJEYXRhIiwiaGVhZGVycyIsImNvbnRlbnRSYW5nZSIsImJsb2IiLCJlbmNvZGVVUkkiLCJ1cGxvYWROYW1lIiwiZmllbGQiLCJhcHBlbmQiLCJmaWxlTmFtZSIsIl9pbml0SWZyYW1lU2V0dGluZ3MiLCJ0YXJnZXRIb3N0IiwidXJsIiwiZGF0YVR5cGUiLCJsb2NhdGlvbiIsImhvc3QiLCJfaW5pdERhdGFTZXR0aW5ncyIsIl9jaHVua2VkVXBsb2FkIiwiX2dldFBhcmFtTmFtZSIsImlucHV0IiwiaSIsImxlbmd0aCIsIl9pbml0Rm9ybVNldHRpbmdzIiwiaHJlZiIsInRvVXBwZXJDYXNlIiwiZm9ybUFjY2VwdENoYXJzZXQiLCJhdHRyIiwiX2dldEFKQVhTZXR0aW5ncyIsIl9nZXREZWZlcnJlZFN0YXRlIiwiZGVmZXJyZWQiLCJzdGF0ZSIsImlzUmVzb2x2ZWQiLCJpc1JlamVjdGVkIiwiX2VuaGFuY2VQcm9taXNlIiwicHJvbWlzZSIsInN1Y2Nlc3MiLCJlcnJvciIsImZhaWwiLCJjb21wbGV0ZSIsImFsd2F5cyIsIl9nZXRYSFJQcm9taXNlIiwicmVzb2x2ZU9yUmVqZWN0IiwiYXJncyIsImRmZCIsIkRlZmVycmVkIiwicmVzb2x2ZVdpdGgiLCJyZWplY3RXaXRoIiwiYWJvcnQiLCJfYWRkQ29udmVuaWVuY2VNZXRob2RzIiwiZ2V0UHJvbWlzZSIsInJlc29sdmVGdW5jIiwicmVqZWN0RnVuYyIsIl9wcm9jZXNzUXVldWUiLCJlcnJvclRocm93biIsImpxWEhSIiwiX29uU2VuZCIsInByb2Nlc3NpbmciLCJyZXNwb25zZSIsIl9nZXRVcGxvYWRlZEJ5dGVzIiwicmFuZ2UiLCJnZXRSZXNwb25zZUhlYWRlciIsInVwcGVyQnl0ZXNQb3MiLCJwYXJzZUludCIsInRlc3RPbmx5IiwiZnMiLCJ1YiIsIm1jcyIsIm8iLCJjdXJyZW50TG9hZGVkIiwiYWpheCIsInJlc3VsdCIsInRleHRTdGF0dXMiLCJfYmVmb3JlU2VuZCIsIl9hY3RpdmUiLCJfb25Eb25lIiwiX29uRmFpbCIsIl9vbkFsd2F5cyIsImpxWEhSb3JSZXN1bHQiLCJqcVhIUm9yRXJyb3IiLCJhYm9ydGVkIiwic2xvdCIsInBpcGUiLCJzZW5kIiwiX3NlbmRpbmciLCJuZXh0U2xvdCIsIl9zbG90cyIsInNoaWZ0IiwicmVzb2x2ZSIsIl9zZXF1ZW5jZSIsIl9vbkFkZCIsImZpbGVzTGVuZ3RoIiwibGltaXQiLCJsaW1pdFNpemUiLCJvdmVyaGVhZCIsImJhdGNoU2l6ZSIsInBhcmFtTmFtZVNldCIsInBhcmFtTmFtZVNsaWNlIiwiZmlsZVNldCIsImoiLCJvcmlnaW5hbEZpbGVzIiwiZWxlbWVudCIsIm5ld0RhdGEiLCJfcmVwbGFjZUZpbGVJbnB1dCIsImlucHV0Q2xvbmUiLCJjbG9uZSIsInJlc3RvcmVGb2N1cyIsImlzIiwiYWN0aXZlRWxlbWVudCIsImZpbGVJbnB1dENsb25lIiwicmVzZXQiLCJhZnRlciIsImRldGFjaCIsInRyaWdnZXIiLCJjbGVhbkRhdGEiLCJlbCIsIl9oYW5kbGVGaWxlVHJlZUVudHJ5IiwiZW50cnkiLCJwYXRoIiwiZW50cmllcyIsImRpclJlYWRlciIsImVycm9ySGFuZGxlciIsInN1Y2Nlc3NIYW5kbGVyIiwiX2hhbmRsZUZpbGVUcmVlRW50cmllcyIsInJlYWRFbnRyaWVzIiwicmVzdWx0cyIsImNvbmNhdCIsImlzRmlsZSIsIl9maWxlIiwicmVsYXRpdmVQYXRoIiwiaXNEaXJlY3RvcnkiLCJjcmVhdGVSZWFkZXIiLCJ3aGVuIiwiQXJyYXkiLCJfZ2V0RHJvcHBlZEZpbGVzIiwiaXRlbXMiLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZ2V0QXNFbnRyeSIsIml0ZW0iLCJnZXRBc0ZpbGUiLCJtYWtlQXJyYXkiLCJfZ2V0U2luZ2xlRmlsZUlucHV0RmlsZXMiLCJmaWxlU2l6ZSIsIl9nZXRGaWxlSW5wdXRGaWxlcyIsIl9vbkNoYW5nZSIsInRhcmdldCIsIl9vblBhc3RlIiwiY2xpcGJvYXJkRGF0YSIsIl9vbkRyb3AiLCJfb25EcmFnT3ZlciIsIl9vbkRyYWdFbnRlciIsIl9vbkRyYWdMZWF2ZSIsIl9pbml0RXZlbnRIYW5kbGVycyIsIl9vbiIsImRyYWdvdmVyIiwiZHJvcCIsImRyYWdlbnRlciIsImRyYWdsZWF2ZSIsInBhc3RlIiwiY2hhbmdlIiwiX2Rlc3Ryb3lFdmVudEhhbmRsZXJzIiwiX29mZiIsIl9kZXN0cm95IiwiX3NldE9wdGlvbiIsInJlaW5pdCIsIl9zdXBlciIsIl9pbml0U3BlY2lhbE9wdGlvbnMiLCJmaW5kIiwiX2dldFJlZ0V4cCIsInN0ciIsIm1vZGlmaWVycyIsInBvcCIsImpvaW4iLCJfaXNSZWdFeHBPcHRpb24iLCJfaW5pdERhdGFBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInRvTG93ZXJDYXNlIiwiY2hhckF0IiwiX2NyZWF0ZSIsImFjdGl2ZSIsImRpc2FibGVkIiwicmVqZWN0IiwidGhlbiIsImNvdW50ZXIiLCJqc29uQVBJIiwianNvblBhcnNlIiwiSlNPTiIsImFqYXhUcmFuc3BvcnQiLCJhc3luYyIsImluaXRpYWxJZnJhbWVTcmMiLCJpZnJhbWUiLCJhZGRQYXJhbUNoYXIiLCJjb21wbGV0ZUNhbGxiYWNrIiwiZmlsZUlucHV0Q2xvbmVzIiwicGFyYW1OYW1lcyIsImNvbnRlbnRzIiwiZmlyc3RDaGlsZCIsIkVycm9yIiwiYXBwZW5kVG8iLCJzZXRUaW1lb3V0IiwicmVtb3ZlIiwidmFsIiwicmVtb3ZlQXR0ciIsInJlcGxhY2VXaXRoIiwiYm9keSIsImFqYXhTZXR1cCIsImNvbnZlcnRlcnMiLCJ0ZXh0IiwiaHRtbCIsInhtbERvYyIsImlzWE1MRG9jIiwicGFyc2VYTUwiLCJYTUxEb2N1bWVudCIsInhtbCIsImdsb2JhbEV2YWwiLCJpbml0aWFsaXplQXR0YWNoZWRNZWRpYUZpZWxkIiwiaWRPZlVwbG9hZEJ1dHRvbiIsInVwbG9hZEFjdGlvbiIsIm1lZGlhSXRlbVVybCIsImFsbG93TXVsdGlwbGUiLCJhbGxvd01lZGlhVGV4dCIsImFsbG93Q2VudGVyQ3JvcHBpbmciLCJ0ZW1wVXBsb2FkRm9sZGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0aWFsUGF0aHMiLCJtZWRpYUZpZWxkRWRpdG9yIiwiaWRwcmVmaXgiLCJtZWRpYUZpZWxkQXBwIiwibWVkaWFGaWVsZEFwcHMiLCJWdWUiLCJnZXQiLCJtZWRpYUl0ZW1zIiwic2VsZWN0ZWRNZWRpYSIsInNtYWxsVGh1bWJzIiwiaWRQcmVmaXgiLCJpbml0aWFsaXplZCIsImJhY2t1cE1lZGlhVGV4dCIsImJhY2t1cENlbnRlciIsImNyZWF0ZWQiLCJzZWxmIiwiY3VycmVudFByZWZzIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY29tcHV0ZWQiLCJwYXRocyIsIm1lZGlhUGF0aHMiLCJzdHJpbmdpZnkiLCJmb3JFYWNoIiwieCIsIm1lZGlhUGF0aCIsImlzUmVtb3ZlZCIsImlzTmV3IiwibWVkaWFUZXh0IiwiY2VudGVyIiwic2V0IiwidmFsdWVzIiwic2lnbmFsIiwibWltZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1ldGhvZCIsInZ1ZWtleSIsInNwbGljZSIsImNvbnNvbGUiLCJsb2ciLCJyb3VuZCIsImNhbkFkZE1lZGlhIiwibm9uUmVtb3ZlZE1lZGlhSXRlbXMiLCJ0aHVtYlNpemUiLCJuZXdQcmVmcyIsIm1vdW50ZWQiLCIkb24iLCJtZWRpYSIsInNlbGVjdEFuZERlbGV0ZU1lZGlhIiwic2VsZWN0TWVkaWEiLCJzZWxlY3RvciIsImVkaXRvcklkIiwiY291bnQiLCJnZXRVbmlxdWVJZCIsImFudGlGb3JnZXJ5VG9rZW4iLCJuZXdNZWRpYUl0ZW1zIiwiZXJyb3Jtc2ciLCJhbGVydCIsIm1ldGhvZHMiLCJjIiwiciIsInJhbmRvbSIsInYiLCJyZW1vdmVTZWxlY3RlZCIsImV2ZW50IiwicmVtb3ZlZCIsImluZGV4T2YiLCJzaG93TWVkaWFUZXh0TW9kYWwiLCIkcmVmcyIsIm1lZGlhVGV4dE1vZGFsIiwibW9kYWwiLCJzaG93Q2VudGVyQ3JvcHBpbmdNb2RhbCIsImNlbnRlckNyb3BwaW5nTW9kYWwiLCIkc2V0IiwiY2FuY2VsTWVkaWFUZXh0TW9kYWwiLCJjYW5jZWxDZW50ZXJDcm9wcGluZ01vZGFsIiwiY2xlYXJDZW50ZXJDcm9wIiwib25Dcm9wRHJvcCIsImltYWdlIiwiY3JvcEltYWdlIiwib2Zmc2V0WCIsImNsaWVudFdpZHRoIiwib2Zmc2V0WSIsImNsaWVudEhlaWdodCIsImNyb3BMZWZ0IiwicG9zaXRpb24iLCJjcm9wVG9wIiwic2V0Q3JvcCIsImFkZE1lZGlhRmlsZXMiLCJ3YXRjaCIsImRlZXAiLCJoYW5kbGVyIiwic2V0SXRlbSIsImNvbXBvbmVudCIsInRlbXBsYXRlIiwiVCIsInByb3BzIiwibWVkaWFOb3RGb3VuZCIsImRpc2NhcmRXYXJuaW5nIiwibm9JbWFnZXMiLCIkcGFyZW50IiwiJGVtaXQiLCJidWlsZE1lZGlhVXJsIiwiaW5pdGlhbGl6ZU1lZGlhRmllbGQiLCJtb2RhbEJvZHlFbGVtZW50IiwieSIsInNob3dNb2RhbCIsInNob3ciLCJtZWRpYUFwcCIsInNlbGVjdGVkTWVkaWFzIiwibW9kZWwiLCJiaW5kIiwicGVyY2VudGFnZSIsImhhbmRsZUZhaWx1cmUiLCJidXMiLCJlcnJvck1lc3NhZ2UiLCJkaXNtaXNzV2FybmluZyIsImV4cGFuZGVkIiwicGVuZGluZ0NvdW50IiwiZXJyb3JDb3VudCIsInVwbG9hZHMiLCJlcnJvcnMiLCJjbGVhckVycm9ycyIsImZpbGVDb3VudCIsIm5ld0ZpbGUiLCJhbHJlYWR5SW5MaXN0Iiwic29tZSIsImYiLCJmaWxlVXBsb2FkIiwiYXJyYXkiLCJ1cGRhdGVDb3VudCIsImZpbHRlciIsInJvb3QiLCJmb2xkZXIiLCJpbml0aWFsaXplTWVkaWFBcHBsaWNhdGlvbiIsImRpc3BsYXlNZWRpYUFwcGxpY2F0aW9uIiwibWVkaWFBcHBsaWNhdGlvblVybCIsInBhdGhCYXNlIiwiY29udGVudCIsInNlbGVjdGVkRm9sZGVyIiwiZHJhZ0Ryb3BUaHVtYm5haWwiLCJJbWFnZSIsImdyaWRWaWV3IiwibWVkaWFGaWx0ZXIiLCJzb3J0QnkiLCJzb3J0QXNjIiwiaXRlbXNJblBhZ2UiLCJzcmMiLCJzZWxlY3RSb290Iiwic2VsZWN0ZWQiLCJsb2FkRm9sZGVyIiwiZXJyb3JJbmZvIiwibmV3TmFtZSIsIm5ld1BhdGgiLCJvbGRQYXRoIiwiY3JlYXRlRm9sZGVyIiwiZGVsZXRlRm9sZGVyIiwibmV3U29ydCIsImNoYW5nZVNvcnQiLCJ0b2dnbGVTZWxlY3Rpb25PZk1lZGlhIiwicmVuYW1lTWVkaWEiLCJkZWxldGVNZWRpYUl0ZW0iLCJoYW5kbGVEcmFnU3RhcnQiLCJpc0hvbWUiLCJwYXJlbnRzIiwicCIsInBhcmVudEZvbGRlciIsInVuc2hpZnQiLCJwYXJlbnQiLCJmaWx0ZXJlZE1lZGlhSXRlbXMiLCJmaWx0ZXJlZCIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJsYXN0TW9kaWZ5IiwiaGlkZGVuQ291bnQiLCJuZXdGb2xkZXIiLCJyb290Rm9sZGVyIiwidG9nZ2xlIiwidXBsb2FkVXJsIiwib3BlbiIsInNlbGVjdEFsbCIsInVuU2VsZWN0QWxsIiwiaW52ZXJ0U2VsZWN0aW9uIiwidGVtcCIsImlzTWVkaWFTZWxlY3RlZCIsImNvbmZpcm1EaWFsb2ciLCJjYWxsYmFjayIsInJlc3AiLCJfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbiIsInJlc3BvbnNlVGV4dCIsImVtcHR5IiwiZm9jdXMiLCJkZWxldGVNZWRpYSIsImRlbGV0ZU1lZGlhTGlzdCIsIm1lZGlhTGlzdCIsIm1lZGlhTmFtZXMiLCJzZXREYXRhIiwic2V0RHJhZ0ltYWdlIiwiZWZmZWN0QWxsb3dlZCIsImhhbmRsZVNjcm9sbFdoaWxlRHJhZyIsImNsaWVudFkiLCJzY3JvbGxCeSIsImlubmVySGVpZ2h0Iiwia2V5cHJlc3MiLCJ3aGljaCIsImNsaWNrIiwib2xkTmFtZSIsImN1cnJlbnRGb2xkZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJkdCIsImNvbnRhaW5zIiwiZHJvcFpvbmVUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYWRkQ2xhc3MiLCJob3ZlcmVkRHJvcFpvbmUiLCJjbG9zZXN0IiwicmVtb3ZlQ2xhc3MiLCJkaXIiLCJzZWxlY3RlZEluTWVkaWFBcHAiLCJsZXZlbCIsImNoaWxkcmVuIiwiaXNIb3ZlcmVkIiwicGFkZGluZyIsImlzU2VsZWN0ZWQiLCJpc1Jvb3QiLCJpc0FuY2VzdG9yT2ZTZWxlY3RlZEZvbGRlciIsImxvYWRDaGlsZHJlbiIsInNlbGVjdCIsImVtdHB5IiwiaGFuZGxlRHJhZ092ZXIiLCJoYW5kbGVEcmFnTGVhdmUiLCJtb3ZlTWVkaWFUb0ZvbGRlciIsImdldERhdGEiLCJzb3VyY2VGb2xkZXIiLCJ0YXJnZXRGb2xkZXIiLCJlZGl0QnV0dG9uIiwiZGVsZXRlQnV0dG9uIiwiZHJhZ1N0YXJ0IiwiQm9vbGVhbiIsImltYWdlSGVhZGVyIiwibmFtZUhlYWRlciIsImxhc3RNb2RpZnlIZWFkZXIiLCJzaXplSGVhZGVyIiwidHlwZUhlYWRlciIsInZpZXdCdXR0b24iLCJwcmludERhdGVUaW1lIiwiZGF0ZW1pbGxpcyIsImQiLCJ0b0xvY2FsZVN0cmluZyIsInNvdXJjZUl0ZW1zIiwicGFnZVNpemUiLCJwYWdlU2l6ZU9wdGlvbnMiLCJjdXJyZW50IiwicGFnZXJGaXJzdEJ1dHRvbiIsInBhZ2VyUHJldmlvdXNCdXR0b24iLCJwYWdlck5leHRCdXR0b24iLCJwYWdlckxhc3RCdXR0b24iLCJwYWdlclBhZ2VTaXplTGFiZWwiLCJwYWdlclBhZ2VMYWJlbCIsInBhZ2VyVG90YWxMYWJlbCIsIm5leHQiLCJwcmV2aW91cyIsImdvRmlyc3QiLCJnb0xhc3QiLCJ0b3RhbFBhZ2VzIiwiZ29UbyIsInRhcmdldFBhZ2UiLCJwYWdlcyIsImNlaWwiLCJpc0xhc3RQYWdlIiwiaXNGaXJzdFBhZ2UiLCJjYW5Eb05leHQiLCJjYW5Eb1ByZXYiLCJjYW5Eb0ZpcnN0IiwiY2FuRG9MYXN0IiwiaXRlbXNJbkN1cnJlbnRQYWdlIiwic3RhcnQiLCJlbmQiLCJwYWdlTGlua3MiLCJsaW5rcyIsImJlZm9yZUN1cnJlbnQiLCJiZWZvcmVCZWZvcmVDdXJyZW50IiwiYWZ0ZXJDdXJyZW50IiwiYWZ0ZXJBZnRlckN1cnJlbnQiLCJjb2xuYW1lIiwic2VsZWN0ZWRjb2xuYW1lIiwiYXNjIiwiaXNBY3RpdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7QUFXQTs7QUFDQTtBQUVBLENBQUMsVUFBVUEsT0FBVixFQUFtQjtBQUNsQjs7QUFDQSxNQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE1BQU0sQ0FBQ0MsR0FBM0MsRUFBZ0Q7QUFDOUM7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLENBQUMsUUFBRCxFQUFXLHFCQUFYLENBQUQsRUFBb0NELE9BQXBDLENBQU47QUFDRCxHQUhELE1BR08sSUFBSSxRQUFPRyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ3RDO0FBQ0FILElBQUFBLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDLFFBQUQsQ0FBUixFQUFvQkEsT0FBTyxDQUFDLDJC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LE1BRE47QUFFSG9nQixJQUFBQSxlQUFlLEVBQUVwZ0IsTUFGZDtBQUdIcWdCLElBQUFBLEdBQUcsRUFBRWhEO0FBSEYsR0FQb0I7QUFZM0I5TixFQUFBQSxRQUFRLEVBQUU7QUFDTitRLElBQUFBLFFBQVEsRUFBRSxvQkFBWTtBQUNsQixhQUFPLEtBQUtILE9BQUwsQ0FBYWhWLFdBQWIsTUFBOEIsS0FBS2lWLGVBQUwsQ0FBcUJqVixXQUFyQixFQUFyQztBQUNIO0FBSEs7QUFaaUIsQ0FBL0IiLCJmaWxlIjoibWVkaWEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogalF1ZXJ5IEZpbGUgVXBsb2FkIFBsdWdpblxuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvalF1ZXJ5LUZpbGUtVXBsb2FkXG4gKlxuICogQ29weXJpZ2h0IDIwMTAsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIGdsb2JhbCBkZWZpbmUsIHJlcXVpcmUgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBBTUQgbW9kdWxlOlxuICAgIGRlZmluZShbJ2pxdWVyeScsICdqcXVlcnktdWkvdWkvd2lkZ2V0J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUvQ29tbW9uSlM6XG4gICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgnLi92ZW5kb3IvanF1ZXJ5LnVpLndpZGdldCcpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHM6XG4gICAgZmFjdG9yeSh3aW5kb3cualF1ZXJ5KTtcbiAgfVxufSkoZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERldGVjdCBmaWxlIGlucHV0IHN1cHBvcnQsIGJhc2VkIG9uXG4gIC8vIGh0dHBzOi8vdmlsamFtaXMuY29tLzIwMTIvZmlsZS11cGxvYWQtc3VwcG9ydC1vbi1tb2JpbGUvXG4gICQuc3VwcG9ydC5maWxlSW5wdXQgPSAhKFxuICAgIG5ldyBSZWdFeHAoXG4gICAgICAvLyBIYW5kbGUgZGV2aWNlcyB3aGljaCBnaXZlIGZhbHNlIHBvc2l0aXZlcyBmb3IgdGhlIGZlYXR1cmUgZGV0ZWN0aW9uOlxuICAgICAgJyhBbmRyb2lkICgxXFxcXC5bMDE1Nl18MlxcXFwuWzAxXSkpJyArXG4gICAgICAgICd8KFdpbmRvd3MgUGhvbmUgKE9TIDd8OFxcXFwuMCkpfChYQkxXUCl8KFp1bmVXUCl8KFdQRGVza3RvcCknICtcbiAgICAgICAgJ3wodyhlYik/T1NCcm93c2VyKXwod2ViT1MpJyArXG4gICAgICAgICd8KEtpbmRsZS8oMVxcXFwuMHwyXFxcXC5bMDVdfDNcXFxcLjApKSdcbiAgICApLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHx8XG4gICAgLy8gRmVhdHVyZSBkZXRlY3Rpb24gZm9yIGFsbCBvdGhlciBkZXZpY2VzOlxuICAgICQoJzxpbnB1dCB0eXBlPVwiZmlsZVwiLz4nKS5wcm9wKCdkaXNhYmxlZCcpXG4gICk7XG5cbiAgLy8gVGhlIEZpbGVSZWFkZXIgQVBJIGlzIG5vdCBhY3R1YWxseSB1c2VkLCBidXQgd29ya3MgYXMgZmVhdHVyZSBkZXRlY3Rpb24sXG4gIC8vIGFzIHNvbWUgU2FmYXJpIHZlcnNpb25zICg1Pykgc3VwcG9ydCBYSFIgZmlsZSB1cGxvYWRzIHZpYSB0aGUgRm9ybURhdGEgQVBJLFxuICAvLyBidXQgbm90IG5vbi1tdWx0aXBhcnQgWEhSIGZpbGUgdXBsb2Fkcy5cbiAgLy8gd2luZG93LlhNTEh0dHBSZXF1ZXN0VXBsb2FkIGlzIG5vdCBhdmFpbGFibGUgb24gSUUxMCwgc28gd2UgY2hlY2sgZm9yXG4gIC8vIHdpbmRvdy5Qcm9ncmVzc0V2ZW50IGluc3RlYWQgdG8gZGV0ZWN0IFhIUjIgZmlsZSB1cGxvYWQgY2FwYWJpbGl0eTpcbiAgJC5zdXBwb3J0LnhockZpbGVVcGxvYWQgPSAhISh3aW5kb3cuUHJvZ3Jlc3NFdmVudCAmJiB3aW5kb3cuRmlsZVJlYWRlcik7XG4gICQuc3VwcG9ydC54aHJGb3JtRGF0YUZpbGVVcGxvYWQgPSAhIXdpbmRvdy5Gb3JtRGF0YTtcblxuICAvLyBEZXRlY3Qgc3VwcG9ydCBmb3IgQmxvYiBzbGljaW5nIChyZXF1aXJlZCBmb3IgY2h1bmtlZCB1cGxvYWRzKTpcbiAgJC5zdXBwb3J0LmJsb2JTbGljZSA9XG4gICAgd2luZG93LkJsb2IgJiZcbiAgICAoQmxvYi5wcm90b3R5cGUuc2xpY2UgfHxcbiAgICAgIEJsb2IucHJvdG90eXBlLndlYmtpdFNsaWNlIHx8XG4gICAgICBCbG9iLnByb3RvdHlwZS5tb3pTbGljZSk7XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgZHJhZyBoYW5kbGVycyBmb3IgZHJhZ292ZXIvZHJhZ2VudGVyL2RyYWdsZWF2ZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFdmVudCB0eXBlXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gRHJhZyBoYW5kbGVyXG4gICAqL1xuICBmdW5jdGlvbiBnZXREcmFnSGFuZGxlcih0eXBlKSB7XG4gICAgdmFyIGlzRHJhZ092ZXIgPSB0eXBlID09PSAnZHJhZ292ZXInO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5kYXRhVHJhbnNmZXIgPSBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2ZlcjtcbiAgICAgIHZhciBkYXRhVHJhbnNmZXIgPSBlLmRhdGFUcmFuc2ZlcjtcbiAgICAgIGlmIChcbiAgICAgICAgZGF0YVRyYW5zZmVyICYmXG4gICAgICAgICQuaW5BcnJheSgnRmlsZXMnLCBkYXRhVHJhbnNmZXIudHlwZXMpICE9PSAtMSAmJlxuICAgICAgICB0aGlzLl90cmlnZ2VyKHR5cGUsICQuRXZlbnQodHlwZSwgeyBkZWxlZ2F0ZWRFdmVudDogZSB9KSkgIT09IGZhbHNlXG4gICAgICApIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoaXNEcmFnT3Zlcikge1xuICAgICAgICAgIGRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ2NvcHknO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIFRoZSBmaWxldXBsb2FkIHdpZGdldCBsaXN0ZW5zIGZvciBjaGFuZ2UgZXZlbnRzIG9uIGZpbGUgaW5wdXQgZmllbGRzIGRlZmluZWRcbiAgLy8gdmlhIGZpbGVJbnB1dCBzZXR0aW5nIGFuZCBwYXN0ZSBvciBkcm9wIGV2ZW50cyBvZiB0aGUgZ2l2ZW4gZHJvcFpvbmUuXG4gIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IGpRdWVyeSBXaWRnZXQgbWV0aG9kcywgdGhlIGZpbGV1cGxvYWQgd2lkZ2V0XG4gIC8vIGV4cG9zZXMgdGhlIFwiYWRkXCIgYW5kIFwic2VuZFwiIG1ldGhvZHMsIHRvIGFkZCBvciBkaXJlY3RseSBzZW5kIGZpbGVzIHVzaW5nXG4gIC8vIHRoZSBmaWxldXBsb2FkIEFQSS5cbiAgLy8gQnkgZGVmYXVsdCwgZmlsZXMgYWRkZWQgdmlhIGZpbGUgaW5wdXQgc2VsZWN0aW9uLCBwYXN0ZSwgZHJhZyAmIGRyb3Agb3JcbiAgLy8gXCJhZGRcIiBtZXRob2QgYXJlIHVwbG9hZGVkIGltbWVkaWF0ZWx5LCBidXQgaXQgaXMgcG9zc2libGUgdG8gb3ZlcnJpZGVcbiAgLy8gdGhlIFwiYWRkXCIgY2FsbGJhY2sgb3B0aW9uIHRvIHF1ZXVlIGZpbGUgdXBsb2Fkcy5cbiAgJC53aWRnZXQoJ2JsdWVpbXAuZmlsZXVwbG9hZCcsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAvLyBUaGUgZHJvcCB0YXJnZXQgZWxlbWVudChzKSwgYnkgdGhlIGRlZmF1bHQgdGhlIGNvbXBsZXRlIGRvY3VtZW50LlxuICAgICAgLy8gU2V0IHRvIG51bGwgdG8gZGlzYWJsZSBkcmFnICYgZHJvcCBzdXBwb3J0OlxuICAgICAgZHJvcFpvbmU6ICQoZG9jdW1lbnQpLFxuICAgICAgLy8gVGhlIHBhc3RlIHRhcmdldCBlbGVtZW50KHMpLCBieSB0aGUgZGVmYXVsdCB1bmRlZmluZWQuXG4gICAgICAvLyBTZXQgdG8gYSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IHRvIGVuYWJsZSBmaWxlIHBhc3Rpbmc6XG4gICAgICBwYXN0ZVpvbmU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSBmaWxlIGlucHV0IGZpZWxkKHMpLCB0aGF0IGFyZSBsaXN0ZW5lZCB0byBmb3IgY2hhbmdlIGV2ZW50cy5cbiAgICAgIC8vIElmIHVuZGVmaW5lZCwgaXQgaXMgc2V0IHRvIHRoZSBmaWxlIGlucHV0IGZpZWxkcyBpbnNpZGVcbiAgICAgIC8vIG9mIHRoZSB3aWRnZXQgZWxlbWVudCBvbiBwbHVnaW4gaW5pdGlhbGl6YXRpb24uXG4gICAgICAvLyBTZXQgdG8gbnVsbCB0byBkaXNhYmxlIHRoZSBjaGFuZ2UgbGlzdGVuZXIuXG4gICAgICBmaWxlSW5wdXQ6IHVuZGVmaW5lZCxcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSBmaWxlIGlucHV0IGZpZWxkIGlzIHJlcGxhY2VkIHdpdGggYSBjbG9uZSBhZnRlclxuICAgICAgLy8gZWFjaCBpbnB1dCBmaWVsZCBjaGFuZ2UgZXZlbnQuIFRoaXMgaXMgcmVxdWlyZWQgZm9yIGlmcmFtZSB0cmFuc3BvcnRcbiAgICAgIC8vIHF1ZXVlcyBhbmQgYWxsb3dzIGNoYW5nZSBldmVudHMgdG8gYmUgZmlyZWQgZm9yIHRoZSBzYW1lIGZpbGVcbiAgICAgIC8vIHNlbGVjdGlvbiwgYnV0IGNhbiBiZSBkaXNhYmxlZCBieSBzZXR0aW5nIHRoZSBmb2xsb3dpbmcgb3B0aW9uIHRvIGZhbHNlOlxuICAgICAgcmVwbGFjZUZpbGVJbnB1dDogdHJ1ZSxcbiAgICAgIC8vIFRoZSBwYXJhbWV0ZXIgbmFtZSBmb3IgdGhlIGZpbGUgZm9ybSBkYXRhICh0aGUgcmVxdWVzdCBhcmd1bWVudCBuYW1lKS5cbiAgICAgIC8vIElmIHVuZGVmaW5lZCBvciBlbXB0eSwgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlIGZpbGUgaW5wdXQgZmllbGQgaXNcbiAgICAgIC8vIHVzZWQsIG9yIFwiZmlsZXNbXVwiIGlmIHRoZSBmaWxlIGlucHV0IG5hbWUgcHJvcGVydHkgaXMgYWxzbyBlbXB0eSxcbiAgICAgIC8vIGNhbiBiZSBhIHN0cmluZyBvciBhbiBhcnJheSBvZiBzdHJpbmdzOlxuICAgICAgcGFyYW1OYW1lOiB1bmRlZmluZWQsXG4gICAgICAvLyBCeSBkZWZhdWx0LCBlYWNoIGZpbGUgb2YgYSBzZWxlY3Rpb24gaXMgdXBsb2FkZWQgdXNpbmcgYW4gaW5kaXZpZHVhbFxuICAgICAgLy8gcmVxdWVzdCBmb3IgWEhSIHR5cGUgdXBsb2Fkcy4gU2V0IHRvIGZhbHNlIHRvIHVwbG9hZCBmaWxlXG4gICAgICAvLyBzZWxlY3Rpb25zIGluIG9uZSByZXF1ZXN0IGVhY2g6XG4gICAgICBzaW5nbGVGaWxlVXBsb2FkczogdHJ1ZSxcbiAgICAgIC8vIFRvIGxpbWl0IHRoZSBudW1iZXIgb2YgZmlsZXMgdXBsb2FkZWQgd2l0aCBvbmUgWEhSIHJlcXVlc3QsXG4gICAgICAvLyBzZXQgdGhlIGZvbGxvd2luZyBvcHRpb24gdG8gYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gMDpcbiAgICAgIGxpbWl0TXVsdGlGaWxlVXBsb2FkczogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBvcHRpb24gbGltaXRzIHRoZSBudW1iZXIgb2YgZmlsZXMgdXBsb2FkZWQgd2l0aCBvbmVcbiAgICAgIC8vIFhIUiByZXF1ZXN0IHRvIGtlZXAgdGhlIHJlcXVlc3Qgc2l6ZSB1bmRlciBvciBlcXVhbCB0byB0aGUgZGVmaW5lZFxuICAgICAgLy8gbGltaXQgaW4gYnl0ZXM6XG4gICAgICBsaW1pdE11bHRpRmlsZVVwbG9hZFNpemU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIE11bHRpcGFydCBmaWxlIHVwbG9hZHMgYWRkIGEgbnVtYmVyIG9mIGJ5dGVzIHRvIGVhY2ggdXBsb2FkZWQgZmlsZSxcbiAgICAgIC8vIHRoZXJlZm9yZSB0aGUgZm9sbG93aW5nIG9wdGlvbiBhZGRzIGFuIG92ZXJoZWFkIGZvciBlYWNoIGZpbGUgdXNlZFxuICAgICAgLy8gaW4gdGhlIGxpbWl0TXVsdGlGaWxlVXBsb2FkU2l6ZSBjb25maWd1cmF0aW9uOlxuICAgICAgbGltaXRNdWx0aUZpbGVVcGxvYWRTaXplT3ZlcmhlYWQ6IDUxMixcbiAgICAgIC8vIFNldCB0aGUgZm9sbG93aW5nIG9wdGlvbiB0byB0cnVlIHRvIGlzc3VlIGFsbCBmaWxlIHVwbG9hZCByZXF1ZXN0c1xuICAgICAgLy8gaW4gYSBzZXF1ZW50aWFsIG9yZGVyOlxuICAgICAgc2VxdWVudGlhbFVwbG9hZHM6IGZhbHNlLFxuICAgICAgLy8gVG8gbGltaXQgdGhlIG51bWJlciBvZiBjb25jdXJyZW50IHVwbG9hZHMsXG4gICAgICAvLyBzZXQgdGhlIGZvbGxvd2luZyBvcHRpb24gdG8gYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gMDpcbiAgICAgIGxpbWl0Q29uY3VycmVudFVwbG9hZHM6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFNldCB0aGUgZm9sbG93aW5nIG9wdGlvbiB0byB0cnVlIHRvIGZvcmNlIGlmcmFtZSB0cmFuc3BvcnQgdXBsb2FkczpcbiAgICAgIGZvcmNlSWZyYW1lVHJhbnNwb3J0OiBmYWxzZSxcbiAgICAgIC8vIFNldCB0aGUgZm9sbG93aW5nIG9wdGlvbiB0byB0aGUgbG9jYXRpb24gb2YgYSByZWRpcmVjdCB1cmwgb24gdGhlXG4gICAgICAvLyBvcmlnaW4gc2VydmVyLCBmb3IgY3Jvc3MtZG9tYWluIGlmcmFtZSB0cmFuc3BvcnQgdXBsb2FkczpcbiAgICAgIHJlZGlyZWN0OiB1bmRlZmluZWQsXG4gICAgICAvLyBUaGUgcGFyYW1ldGVyIG5hbWUgZm9yIHRoZSByZWRpcmVjdCB1cmwsIHNlbnQgYXMgcGFydCBvZiB0aGUgZm9ybVxuICAgICAgLy8gZGF0YSBhbmQgc2V0IHRvICdyZWRpcmVjdCcgaWYgdGhpcyBvcHRpb24gaXMgZW1wdHk6XG4gICAgICByZWRpcmVjdFBhcmFtTmFtZTogdW5kZWZpbmVkLFxuICAgICAgLy8gU2V0IHRoZSBmb2xsb3dpbmcgb3B0aW9uIHRvIHRoZSBsb2NhdGlvbiBvZiBhIHBvc3RNZXNzYWdlIHdpbmRvdyxcbiAgICAgIC8vIHRvIGVuYWJsZSBwb3N0TWVzc2FnZSB0cmFuc3BvcnQgdXBsb2FkczpcbiAgICAgIHBvc3RNZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgICAvLyBCeSBkZWZhdWx0LCBYSFIgZmlsZSB1cGxvYWRzIGFyZSBzZW50IGFzIG11bHRpcGFydC9mb3JtLWRhdGEuXG4gICAgICAvLyBUaGUgaWZyYW1lIHRyYW5zcG9ydCBpcyBhbHdheXMgdXNpbmcgbXVsdGlwYXJ0L2Zvcm0tZGF0YS5cbiAgICAgIC8vIFNldCB0byBmYWxzZSB0byBlbmFibGUgbm9uLW11bHRpcGFydCBYSFIgdXBsb2FkczpcbiAgICAgIG11bHRpcGFydDogdHJ1ZSxcbiAgICAgIC8vIFRvIHVwbG9hZCBsYXJnZSBmaWxlcyBpbiBzbWFsbGVyIGNodW5rcywgc2V0IHRoZSBmb2xsb3dpbmcgb3B0aW9uXG4gICAgICAvLyB0byBhIHByZWZlcnJlZCBtYXhpbXVtIGNodW5rIHNpemUuIElmIHNldCB0byAwLCBudWxsIG9yIHVuZGVmaW5lZCxcbiAgICAgIC8vIG9yIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHJlcXVpcmVkIEJsb2IgQVBJLCBmaWxlcyB3aWxsXG4gICAgICAvLyBiZSB1cGxvYWRlZCBhcyBhIHdob2xlLlxuICAgICAgbWF4Q2h1bmtTaXplOiB1bmRlZmluZWQsXG4gICAgICAvLyBXaGVuIGEgbm9uLW11bHRpcGFydCB1cGxvYWQgb3IgYSBjaHVua2VkIG11bHRpcGFydCB1cGxvYWQgaGFzIGJlZW5cbiAgICAgIC8vIGFib3J0ZWQsIHRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3VtZSB0aGUgdXBsb2FkIGJ5IHNldHRpbmdcbiAgICAgIC8vIGl0IHRvIHRoZSBzaXplIG9mIHRoZSBhbHJlYWR5IHVwbG9hZGVkIGJ5dGVzLiBUaGlzIG9wdGlvbiBpcyBtb3N0XG4gICAgICAvLyB1c2VmdWwgd2hlbiBtb2RpZnlpbmcgdGhlIG9wdGlvbnMgb2JqZWN0IGluc2lkZSBvZiB0aGUgXCJhZGRcIiBvclxuICAgICAgLy8gXCJzZW5kXCIgY2FsbGJhY2tzLCBhcyB0aGUgb3B0aW9ucyBhcmUgY2xvbmVkIGZvciBlYWNoIGZpbGUgdXBsb2FkLlxuICAgICAgdXBsb2FkZWRCeXRlczogdW5kZWZpbmVkLFxuICAgICAgLy8gQnkgZGVmYXVsdCwgZmFpbGVkIChhYm9ydCBvciBlcnJvcikgZmlsZSB1cGxvYWRzIGFyZSByZW1vdmVkIGZyb20gdGhlXG4gICAgICAvLyBnbG9iYWwgcHJvZ3Jlc3MgY2FsY3VsYXRpb24uIFNldCB0aGUgZm9sbG93aW5nIG9wdGlvbiB0byBmYWxzZSB0b1xuICAgICAgLy8gcHJldmVudCByZWNhbGN1bGF0aW5nIHRoZSBnbG9iYWwgcHJvZ3Jlc3MgZGF0YTpcbiAgICAgIHJlY2FsY3VsYXRlUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAvLyBJbnRlcnZhbCBpbiBtaWxsaXNlY29uZHMgdG8gY2FsY3VsYXRlIGFuZCB0cmlnZ2VyIHByb2dyZXNzIGV2ZW50czpcbiAgICAgIHByb2dyZXNzSW50ZXJ2YWw6IDEwMCxcbiAgICAgIC8vIEludGVydmFsIGluIG1pbGxpc2Vjb25kcyB0byBjYWxjdWxhdGUgcHJvZ3Jlc3MgYml0cmF0ZTpcbiAgICAgIGJpdHJhdGVJbnRlcnZhbDogNTAwLFxuICAgICAgLy8gQnkgZGVmYXVsdCwgdXBsb2FkcyBhcmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5IHdoZW4gYWRkaW5nIGZpbGVzOlxuICAgICAgYXV0b1VwbG9hZDogdHJ1ZSxcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGR1cGxpY2F0ZSBmaWxlIG5hbWVzIGFyZSBleHBlY3RlZCB0byBiZSBoYW5kbGVkIG9uXG4gICAgICAvLyB0aGUgc2VydmVyLXNpZGUuIElmIHRoaXMgaXMgbm90IHBvc3NpYmxlIChlLmcuIHdoZW4gdXBsb2FkaW5nXG4gICAgICAvLyBmaWxlcyBkaXJlY3RseSB0byBBbWF6b24gUzMpLCB0aGUgZm9sbG93aW5nIG9wdGlvbiBjYW4gYmUgc2V0IHRvXG4gICAgICAvLyBhbiBlbXB0eSBvYmplY3Qgb3IgYW4gb2JqZWN0IG1hcHBpbmcgZXhpc3RpbmcgZmlsZW5hbWVzLCBlLmcuOlxuICAgICAgLy8geyBcImltYWdlLmpwZ1wiOiB0cnVlLCBcImltYWdlICgxKS5qcGdcIjogdHJ1ZSB9XG4gICAgICAvLyBJZiBpdCBpcyBzZXQsIGFsbCBmaWxlcyB3aWxsIGJlIHVwbG9hZGVkIHdpdGggdW5pcXVlIGZpbGVuYW1lcyxcbiAgICAgIC8vIGFkZGluZyBpbmNyZWFzaW5nIG51bWJlciBzdWZmaXhlcyBpZiBuZWNlc3NhcnksIGUuZy46XG4gICAgICAvLyBcImltYWdlICgyKS5qcGdcIlxuICAgICAgdW5pcXVlRmlsZW5hbWVzOiB1bmRlZmluZWQsXG5cbiAgICAgIC8vIEVycm9yIGFuZCBpbmZvIG1lc3NhZ2VzOlxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgdXBsb2FkZWRCeXRlczogJ1VwbG9hZGVkIGJ5dGVzIGV4Y2VlZCBmaWxlIHNpemUnXG4gICAgICB9LFxuXG4gICAgICAvLyBUcmFuc2xhdGlvbiBmdW5jdGlvbiwgZ2V0cyB0aGUgbWVzc2FnZSBrZXkgdG8gYmUgdHJhbnNsYXRlZFxuICAgICAgLy8gYW5kIGFuIG9iamVjdCB3aXRoIGNvbnRleHQgc3BlY2lmaWMgZGF0YSBhcyBhcmd1bWVudHM6XG4gICAgICBpMThuOiBmdW5jdGlvbiAobWVzc2FnZSwgY29udGV4dCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgbWVzc2FnZSA9IHRoaXMubWVzc2FnZXNbbWVzc2FnZV0gfHwgbWVzc2FnZS50b1N0cmluZygpO1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICQuZWFjaChjb250ZXh0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKCd7JyArIGtleSArICd9JywgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfSxcblxuICAgICAgLy8gQWRkaXRpb25hbCBmb3JtIGRhdGEgdG8gYmUgc2VudCBhbG9uZyB3aXRoIHRoZSBmaWxlIHVwbG9hZHMgY2FuIGJlIHNldFxuICAgICAgLy8gdXNpbmcgdGhpcyBvcHRpb24sIHdoaWNoIGFjY2VwdHMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIG5hbWUgYW5kXG4gICAgICAvLyB2YWx1ZSBwcm9wZXJ0aWVzLCBhIGZ1bmN0aW9uIHJldHVybmluZyBzdWNoIGFuIGFycmF5LCBhIEZvcm1EYXRhXG4gICAgICAvLyBvYmplY3QgKGZvciBYSFIgZmlsZSB1cGxvYWRzKSwgb3IgYSBzaW1wbGUgb2JqZWN0LlxuICAgICAgLy8gVGhlIGZvcm0gb2YgdGhlIGZpcnN0IGZpbGVJbnB1dCBpcyBnaXZlbiBhcyBwYXJhbWV0ZXIgdG8gdGhlIGZ1bmN0aW9uOlxuICAgICAgZm9ybURhdGE6IGZ1bmN0aW9uIChmb3JtKSB7XG4gICAgICAgIHJldHVybiBmb3JtLnNlcmlhbGl6ZUFycmF5KCk7XG4gICAgICB9LFxuXG4gICAgICAvLyBUaGUgYWRkIGNhbGxiYWNrIGlzIGludm9rZWQgYXMgc29vbiBhcyBmaWxlcyBhcmUgYWRkZWQgdG8gdGhlIGZpbGV1cGxvYWRcbiAgICAgIC8vIHdpZGdldCAodmlhIGZpbGUgaW5wdXQgc2VsZWN0aW9uLCBkcmFnICYgZHJvcCwgcGFzdGUgb3IgYWRkIEFQSSBjYWxsKS5cbiAgICAgIC8vIElmIHRoZSBzaW5nbGVGaWxlVXBsb2FkcyBvcHRpb24gaXMgZW5hYmxlZCwgdGhpcyBjYWxsYmFjayB3aWxsIGJlXG4gICAgICAvLyBjYWxsZWQgb25jZSBmb3IgZWFjaCBmaWxlIGluIHRoZSBzZWxlY3Rpb24gZm9yIFhIUiBmaWxlIHVwbG9hZHMsIGVsc2VcbiAgICAgIC8vIG9uY2UgZm9yIGVhY2ggZmlsZSBzZWxlY3Rpb24uXG4gICAgICAvL1xuICAgICAgLy8gVGhlIHVwbG9hZCBzdGFydHMgd2hlbiB0aGUgc3VibWl0IG1ldGhvZCBpcyBpbnZva2VkIG9uIHRoZSBkYXRhIHBhcmFtZXRlci5cbiAgICAgIC8vIFRoZSBkYXRhIG9iamVjdCBjb250YWlucyBhIGZpbGVzIHByb3BlcnR5IGhvbGRpbmcgdGhlIGFkZGVkIGZpbGVzXG4gICAgICAvLyBhbmQgYWxsb3dzIHlvdSB0byBvdmVycmlkZSBwbHVnaW4gb3B0aW9ucyBhcyB3ZWxsIGFzIGRlZmluZSBhamF4IHNldHRpbmdzLlxuICAgICAgLy9cbiAgICAgIC8vIExpc3RlbmVycyBmb3IgdGhpcyBjYWxsYmFjayBjYW4gYWxzbyBiZSBib3VuZCB0aGUgZm9sbG93aW5nIHdheTpcbiAgICAgIC8vIC5vbignZmlsZXVwbG9hZGFkZCcsIGZ1bmMpO1xuICAgICAgLy9cbiAgICAgIC8vIGRhdGEuc3VibWl0KCkgcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IGFuZCBhbGxvd3MgdG8gYXR0YWNoIGFkZGl0aW9uYWxcbiAgICAgIC8vIGhhbmRsZXJzIHVzaW5nIGpRdWVyeSdzIERlZmVycmVkIGNhbGxiYWNrczpcbiAgICAgIC8vIGRhdGEuc3VibWl0KCkuZG9uZShmdW5jKS5mYWlsKGZ1bmMpLmFsd2F5cyhmdW5jKTtcbiAgICAgIGFkZDogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGRhdGEuYXV0b1VwbG9hZCB8fFxuICAgICAgICAgIChkYXRhLmF1dG9VcGxvYWQgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAkKHRoaXMpLmZpbGV1cGxvYWQoJ29wdGlvbicsICdhdXRvVXBsb2FkJykpXG4gICAgICAgICkge1xuICAgICAgICAgIGRhdGEucHJvY2VzcygpLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGF0YS5zdWJtaXQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLy8gT3RoZXIgY2FsbGJhY2tzOlxuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgdGhlIHN1Ym1pdCBldmVudCBvZiBlYWNoIGZpbGUgdXBsb2FkOlxuICAgICAgLy8gc3VibWl0OiBmdW5jdGlvbiAoZSwgZGF0YSkge30sIC8vIC5vbignZmlsZXVwbG9hZHN1Ym1pdCcsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggZmlsZSB1cGxvYWQgcmVxdWVzdDpcbiAgICAgIC8vIHNlbmQ6IGZ1bmN0aW9uIChlLCBkYXRhKSB7fSwgLy8gLm9uKCdmaWxldXBsb2Fkc2VuZCcsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3Igc3VjY2Vzc2Z1bCB1cGxvYWRzOlxuICAgICAgLy8gZG9uZTogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRkb25lJywgZnVuYyk7XG5cbiAgICAgIC8vIENhbGxiYWNrIGZvciBmYWlsZWQgKGFib3J0IG9yIGVycm9yKSB1cGxvYWRzOlxuICAgICAgLy8gZmFpbDogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRmYWlsJywgZnVuYyk7XG5cbiAgICAgIC8vIENhbGxiYWNrIGZvciBjb21wbGV0ZWQgKHN1Y2Nlc3MsIGFib3J0IG9yIGVycm9yKSByZXF1ZXN0czpcbiAgICAgIC8vIGFsd2F5czogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRhbHdheXMnLCBmdW5jKTtcblxuICAgICAgLy8gQ2FsbGJhY2sgZm9yIHVwbG9hZCBwcm9ncmVzcyBldmVudHM6XG4gICAgICAvLyBwcm9ncmVzczogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRwcm9ncmVzcycsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgZ2xvYmFsIHVwbG9hZCBwcm9ncmVzcyBldmVudHM6XG4gICAgICAvLyBwcm9ncmVzc2FsbDogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRwcm9ncmVzc2FsbCcsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgdXBsb2FkcyBzdGFydCwgZXF1aXZhbGVudCB0byB0aGUgZ2xvYmFsIGFqYXhTdGFydCBldmVudDpcbiAgICAgIC8vIHN0YXJ0OiBmdW5jdGlvbiAoZSkge30sIC8vIC5vbignZmlsZXVwbG9hZHN0YXJ0JywgZnVuYyk7XG5cbiAgICAgIC8vIENhbGxiYWNrIGZvciB1cGxvYWRzIHN0b3AsIGVxdWl2YWxlbnQgdG8gdGhlIGdsb2JhbCBhamF4U3RvcCBldmVudDpcbiAgICAgIC8vIHN0b3A6IGZ1bmN0aW9uIChlKSB7fSwgLy8gLm9uKCdmaWxldXBsb2Fkc3RvcCcsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgY2hhbmdlIGV2ZW50cyBvZiB0aGUgZmlsZUlucHV0KHMpOlxuICAgICAgLy8gY2hhbmdlOiBmdW5jdGlvbiAoZSwgZGF0YSkge30sIC8vIC5vbignZmlsZXVwbG9hZGNoYW5nZScsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgcGFzdGUgZXZlbnRzIHRvIHRoZSBwYXN0ZVpvbmUocyk6XG4gICAgICAvLyBwYXN0ZTogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRwYXN0ZScsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgZHJvcCBldmVudHMgb2YgdGhlIGRyb3Bab25lKHMpOlxuICAgICAgLy8gZHJvcDogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRkcm9wJywgZnVuYyk7XG5cbiAgICAgIC8vIENhbGxiYWNrIGZvciBkcmFnb3ZlciBldmVudHMgb2YgdGhlIGRyb3Bab25lKHMpOlxuICAgICAgLy8gZHJhZ292ZXI6IGZ1bmN0aW9uIChlKSB7fSwgLy8gLm9uKCdmaWxldXBsb2FkZHJhZ292ZXInLCBmdW5jKTtcblxuICAgICAgLy8gQ2FsbGJhY2sgYmVmb3JlIHRoZSBzdGFydCBvZiBlYWNoIGNodW5rIHVwbG9hZCByZXF1ZXN0IChiZWZvcmUgZm9ybSBkYXRhIGluaXRpYWxpemF0aW9uKTpcbiAgICAgIC8vIGNodW5rYmVmb3Jlc2VuZDogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRjaHVua2JlZm9yZXNlbmQnLCBmdW5jKTtcblxuICAgICAgLy8gQ2FsbGJhY2sgZm9yIHRoZSBzdGFydCBvZiBlYWNoIGNodW5rIHVwbG9hZCByZXF1ZXN0OlxuICAgICAgLy8gY2h1bmtzZW5kOiBmdW5jdGlvbiAoZSwgZGF0YSkge30sIC8vIC5vbignZmlsZXVwbG9hZGNodW5rc2VuZCcsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3Igc3VjY2Vzc2Z1bCBjaHVuayB1cGxvYWRzOlxuICAgICAgLy8gY2h1bmtkb25lOiBmdW5jdGlvbiAoZSwgZGF0YSkge30sIC8vIC5vbignZmlsZXVwbG9hZGNodW5rZG9uZScsIGZ1bmMpO1xuXG4gICAgICAvLyBDYWxsYmFjayBmb3IgZmFpbGVkIChhYm9ydCBvciBlcnJvcikgY2h1bmsgdXBsb2FkczpcbiAgICAgIC8vIGNodW5rZmFpbDogZnVuY3Rpb24gKGUsIGRhdGEpIHt9LCAvLyAub24oJ2ZpbGV1cGxvYWRjaHVua2ZhaWwnLCBmdW5jKTtcblxuICAgICAgLy8gQ2FsbGJhY2sgZm9yIGNvbXBsZXRlZCAoc3VjY2VzcywgYWJvcnQgb3IgZXJyb3IpIGNodW5rIHVwbG9hZCByZXF1ZXN0czpcbiAgICAgIC8vIGNodW5rYWx3YXlzOiBmdW5jdGlvbiAoZSwgZGF0YSkge30sIC8vIC5vbignZmlsZXVwbG9hZGNodW5rYWx3YXlzJywgZnVuYyk7XG5cbiAgICAgIC8vIFRoZSBwbHVnaW4gb3B0aW9ucyBhcmUgdXNlZCBhcyBzZXR0aW5ncyBvYmplY3QgZm9yIHRoZSBhamF4IGNhbGxzLlxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmUgalF1ZXJ5IGFqYXggc2V0dGluZ3MgcmVxdWlyZWQgZm9yIHRoZSBmaWxlIHVwbG9hZHM6XG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICBjb250ZW50VHlwZTogZmFsc2UsXG4gICAgICBjYWNoZTogZmFsc2UsXG4gICAgICB0aW1lb3V0OiAwXG4gICAgfSxcblxuICAgIC8vIGpRdWVyeSB2ZXJzaW9ucyBiZWZvcmUgMS44IHJlcXVpcmUgcHJvbWlzZS5waXBlIGlmIHRoZSByZXR1cm4gdmFsdWUgaXNcbiAgICAvLyB1c2VkLCBhcyBwcm9taXNlLnRoZW4gaW4gb2xkZXIgdmVyc2lvbnMgaGFzIGEgZGlmZmVyZW50IGJlaGF2aW9yLCBzZWU6XG4gICAgLy8gaHR0cHM6Ly9ibG9nLmpxdWVyeS5jb20vMjAxMi8wOC8wOS9qcXVlcnktMS04LXJlbGVhc2VkL1xuICAgIC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMTAxMFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL2pRdWVyeS1GaWxlLVVwbG9hZC9wdWxsLzM0MzVcbiAgICBfcHJvbWlzZVBpcGU6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFydHMgPSAkLmZuLmpxdWVyeS5zcGxpdCgnLicpO1xuICAgICAgcmV0dXJuIE51bWJlcihwYXJ0c1swXSkgPiAxIHx8IE51bWJlcihwYXJ0c1sxXSkgPiA3ID8gJ3RoZW4nIDogJ3BpcGUnO1xuICAgIH0pKCksXG5cbiAgICAvLyBBIGxpc3Qgb2Ygb3B0aW9ucyB0aGF0IHJlcXVpcmUgcmVpbml0aWFsaXppbmcgZXZlbnQgbGlzdGVuZXJzIGFuZC9vclxuICAgIC8vIHNwZWNpYWwgaW5pdGlhbGl6YXRpb24gY29kZTpcbiAgICBfc3BlY2lhbE9wdGlvbnM6IFtcbiAgICAgICdmaWxlSW5wdXQnLFxuICAgICAgJ2Ryb3Bab25lJyxcbiAgICAgICdwYXN0ZVpvbmUnLFxuICAgICAgJ211bHRpcGFydCcsXG4gICAgICAnZm9yY2VJZnJhbWVUcmFuc3BvcnQnXG4gICAgXSxcblxuICAgIF9ibG9iU2xpY2U6XG4gICAgICAkLnN1cHBvcnQuYmxvYlNsaWNlICYmXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzbGljZSA9IHRoaXMuc2xpY2UgfHwgdGhpcy53ZWJraXRTbGljZSB8fCB0aGlzLm1velNsaWNlO1xuICAgICAgICByZXR1cm4gc2xpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0sXG5cbiAgICBfQml0cmF0ZVRpbWVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93ID8gRGF0ZS5ub3coKSA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdGhpcy5sb2FkZWQgPSAwO1xuICAgICAgdGhpcy5iaXRyYXRlID0gMDtcbiAgICAgIHRoaXMuZ2V0Qml0cmF0ZSA9IGZ1bmN0aW9uIChub3csIGxvYWRlZCwgaW50ZXJ2YWwpIHtcbiAgICAgICAgdmFyIHRpbWVEaWZmID0gbm93IC0gdGhpcy50aW1lc3RhbXA7XG4gICAgICAgIGlmICghdGhpcy5iaXRyYXRlIHx8ICFpbnRlcnZhbCB8fCB0aW1lRGlmZiA+IGludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5iaXRyYXRlID0gKGxvYWRlZCAtIHRoaXMubG9hZGVkKSAqICgxMDAwIC8gdGltZURpZmYpICogODtcbiAgICAgICAgICB0aGlzLmxvYWRlZCA9IGxvYWRlZDtcbiAgICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IG5vdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5iaXRyYXRlO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgX2lzWEhSVXBsb2FkOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgIW9wdGlvbnMuZm9yY2VJZnJhbWVUcmFuc3BvcnQgJiZcbiAgICAgICAgKCghb3B0aW9ucy5tdWx0aXBhcnQgJiYgJC5zdXBwb3J0LnhockZpbGVVcGxvYWQpIHx8XG4gICAgICAgICAgJC5zdXBwb3J0LnhockZvcm1EYXRhRmlsZVVwbG9hZClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIF9nZXRGb3JtRGF0YTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBmb3JtRGF0YTtcbiAgICAgIGlmICgkLnR5cGUob3B0aW9ucy5mb3JtRGF0YSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm9ybURhdGEob3B0aW9ucy5mb3JtKTtcbiAgICAgIH1cbiAgICAgIGlmICgkLmlzQXJyYXkob3B0aW9ucy5mb3JtRGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm9ybURhdGE7XG4gICAgICB9XG4gICAgICBpZiAoJC50eXBlKG9wdGlvbnMuZm9ybURhdGEpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JtRGF0YSA9IFtdO1xuICAgICAgICAkLmVhY2gob3B0aW9ucy5mb3JtRGF0YSwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgZm9ybURhdGEucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3JtRGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuXG4gICAgX2dldFRvdGFsOiBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICAkLmVhY2goZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkge1xuICAgICAgICB0b3RhbCArPSBmaWxlLnNpemUgfHwgMTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH0sXG5cbiAgICBfaW5pdFByb2dyZXNzT2JqZWN0OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSB7XG4gICAgICAgIGxvYWRlZDogMCxcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIGJpdHJhdGU6IDBcbiAgICAgIH07XG4gICAgICBpZiAob2JqLl9wcm9ncmVzcykge1xuICAgICAgICAkLmV4dGVuZChvYmouX3Byb2dyZXNzLCBwcm9ncmVzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmouX3Byb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0UmVzcG9uc2VPYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHZhciBwcm9wO1xuICAgICAgaWYgKG9iai5fcmVzcG9uc2UpIHtcbiAgICAgICAgZm9yIChwcm9wIGluIG9iai5fcmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5fcmVzcG9uc2UsIHByb3ApKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqLl9yZXNwb25zZVtwcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iai5fcmVzcG9uc2UgPSB7fTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uUHJvZ3Jlc3M6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICBpZiAoZS5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdyA/IERhdGUubm93KCkgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICBsb2FkZWQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkYXRhLl90aW1lICYmXG4gICAgICAgICAgZGF0YS5wcm9ncmVzc0ludGVydmFsICYmXG4gICAgICAgICAgbm93IC0gZGF0YS5fdGltZSA8IGRhdGEucHJvZ3Jlc3NJbnRlcnZhbCAmJlxuICAgICAgICAgIGUubG9hZGVkICE9PSBlLnRvdGFsXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLl90aW1lID0gbm93O1xuICAgICAgICBsb2FkZWQgPVxuICAgICAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAoZS5sb2FkZWQgLyBlLnRvdGFsKSAqIChkYXRhLmNodW5rU2l6ZSB8fCBkYXRhLl9wcm9ncmVzcy50b3RhbClcbiAgICAgICAgICApICsgKGRhdGEudXBsb2FkZWRCeXRlcyB8fCAwKTtcbiAgICAgICAgLy8gQWRkIHRoZSBkaWZmZXJlbmNlIGZyb20gdGhlIHByZXZpb3VzbHkgbG9hZGVkIHN0YXRlXG4gICAgICAgIC8vIHRvIHRoZSBnbG9iYWwgbG9hZGVkIGNvdW50ZXI6XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzLmxvYWRlZCArPSBsb2FkZWQgLSBkYXRhLl9wcm9ncmVzcy5sb2FkZWQ7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzLmJpdHJhdGUgPSB0aGlzLl9iaXRyYXRlVGltZXIuZ2V0Qml0cmF0ZShcbiAgICAgICAgICBub3csXG4gICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MubG9hZGVkLFxuICAgICAgICAgIGRhdGEuYml0cmF0ZUludGVydmFsXG4gICAgICAgICk7XG4gICAgICAgIGRhdGEuX3Byb2dyZXNzLmxvYWRlZCA9IGRhdGEubG9hZGVkID0gbG9hZGVkO1xuICAgICAgICBkYXRhLl9wcm9ncmVzcy5iaXRyYXRlID0gZGF0YS5iaXRyYXRlID0gZGF0YS5fYml0cmF0ZVRpbWVyLmdldEJpdHJhdGUoXG4gICAgICAgICAgbm93LFxuICAgICAgICAgIGxvYWRlZCxcbiAgICAgICAgICBkYXRhLmJpdHJhdGVJbnRlcnZhbFxuICAgICAgICApO1xuICAgICAgICAvLyBUcmlnZ2VyIGEgY3VzdG9tIHByb2dyZXNzIGV2ZW50IHdpdGggYSB0b3RhbCBkYXRhIHByb3BlcnR5IHNldFxuICAgICAgICAvLyB0byB0aGUgZmlsZSBzaXplKHMpIG9mIHRoZSBjdXJyZW50IHVwbG9hZCBhbmQgYSBsb2FkZWQgZGF0YVxuICAgICAgICAvLyBwcm9wZXJ0eSBjYWxjdWxhdGVkIGFjY29yZGluZ2x5OlxuICAgICAgICB0aGlzLl90cmlnZ2VyKFxuICAgICAgICAgICdwcm9ncmVzcycsXG4gICAgICAgICAgJC5FdmVudCgncHJvZ3Jlc3MnLCB7IGRlbGVnYXRlZEV2ZW50OiBlIH0pLFxuICAgICAgICAgIGRhdGFcbiAgICAgICAgKTtcbiAgICAgICAgLy8gVHJpZ2dlciBhIGdsb2JhbCBwcm9ncmVzcyBldmVudCBmb3IgYWxsIGN1cnJlbnQgZmlsZSB1cGxvYWRzLFxuICAgICAgICAvLyBpbmNsdWRpbmcgYWpheCBjYWxscyBxdWV1ZWQgZm9yIHNlcXVlbnRpYWwgZmlsZSB1cGxvYWRzOlxuICAgICAgICB0aGlzLl90cmlnZ2VyKFxuICAgICAgICAgICdwcm9ncmVzc2FsbCcsXG4gICAgICAgICAgJC5FdmVudCgncHJvZ3Jlc3NhbGwnLCB7IGRlbGVnYXRlZEV2ZW50OiBlIH0pLFxuICAgICAgICAgIHRoaXMuX3Byb2dyZXNzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0UHJvZ3Jlc3NMaXN0ZW5lcjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgeGhyID0gb3B0aW9ucy54aHIgPyBvcHRpb25zLnhocigpIDogJC5hamF4U2V0dGluZ3MueGhyKCk7XG4gICAgICAvLyBBY2Nlc3NzIHRvIHRoZSBuYXRpdmUgWEhSIG9iamVjdCBpcyByZXF1aXJlZCB0byBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAvLyBmb3IgdGhlIHVwbG9hZCBwcm9ncmVzcyBldmVudDpcbiAgICAgIGlmICh4aHIudXBsb2FkKSB7XG4gICAgICAgICQoeGhyLnVwbG9hZCkub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgb2UgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBwcm9ncmVzcyBldmVudCBwcm9wZXJ0aWVzIGdldCBjb3BpZWQgb3ZlcjpcbiAgICAgICAgICBlLmxlbmd0aENvbXB1dGFibGUgPSBvZS5sZW5ndGhDb21wdXRhYmxlO1xuICAgICAgICAgIGUubG9hZGVkID0gb2UubG9hZGVkO1xuICAgICAgICAgIGUudG90YWwgPSBvZS50b3RhbDtcbiAgICAgICAgICB0aGF0Ll9vblByb2dyZXNzKGUsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgb3B0aW9ucy54aHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHhocjtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2RlaW5pdFByb2dyZXNzTGlzdGVuZXI6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgeGhyID0gb3B0aW9ucy54aHIgPyBvcHRpb25zLnhocigpIDogJC5hamF4U2V0dGluZ3MueGhyKCk7XG4gICAgICBpZiAoeGhyLnVwbG9hZCkge1xuICAgICAgICAkKHhoci51cGxvYWQpLm9mZigncHJvZ3Jlc3MnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2lzSW5zdGFuY2VPZjogZnVuY3Rpb24gKHR5cGUsIG9iaikge1xuICAgICAgLy8gQ3Jvc3MtZnJhbWUgaW5zdGFuY2VvZiBjaGVja1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgdHlwZSArICddJztcbiAgICB9LFxuXG4gICAgX2dldFVuaXF1ZUZpbGVuYW1lOiBmdW5jdGlvbiAobmFtZSwgbWFwKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICBpZiAobWFwW25hbWVdKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8oPzogXFwoKFtcXGRdKylcXCkpPyhcXC5bXi5dKyk/JC8sIGZ1bmN0aW9uIChcbiAgICAgICAgICBfLFxuICAgICAgICAgIHAxLFxuICAgICAgICAgIHAyXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHAxID8gTnVtYmVyKHAxKSArIDEgOiAxO1xuICAgICAgICAgIHZhciBleHQgPSBwMiB8fCAnJztcbiAgICAgICAgICByZXR1cm4gJyAoJyArIGluZGV4ICsgJyknICsgZXh0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFVuaXF1ZUZpbGVuYW1lKG5hbWUsIG1hcCk7XG4gICAgICB9XG4gICAgICBtYXBbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSxcblxuICAgIF9pbml0WEhSRGF0YTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGZpbGUgPSBvcHRpb25zLmZpbGVzWzBdLFxuICAgICAgICAvLyBJZ25vcmUgbm9uLW11bHRpcGFydCBzZXR0aW5nIGlmIG5vdCBzdXBwb3J0ZWQ6XG4gICAgICAgIG11bHRpcGFydCA9IG9wdGlvbnMubXVsdGlwYXJ0IHx8ICEkLnN1cHBvcnQueGhyRmlsZVVwbG9hZCxcbiAgICAgICAgcGFyYW1OYW1lID1cbiAgICAgICAgICAkLnR5cGUob3B0aW9ucy5wYXJhbU5hbWUpID09PSAnYXJyYXknXG4gICAgICAgICAgICA/IG9wdGlvbnMucGFyYW1OYW1lWzBdXG4gICAgICAgICAgICA6IG9wdGlvbnMucGFyYW1OYW1lO1xuICAgICAgb3B0aW9ucy5oZWFkZXJzID0gJC5leHRlbmQoe30sIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICBpZiAob3B0aW9ucy5jb250ZW50UmFuZ2UpIHtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVJhbmdlJ10gPSBvcHRpb25zLmNvbnRlbnRSYW5nZTtcbiAgICAgIH1cbiAgICAgIGlmICghbXVsdGlwYXJ0IHx8IG9wdGlvbnMuYmxvYiB8fCAhdGhpcy5faXNJbnN0YW5jZU9mKCdGaWxlJywgZmlsZSkpIHtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LURpc3Bvc2l0aW9uJ10gPVxuICAgICAgICAgICdhdHRhY2htZW50OyBmaWxlbmFtZT1cIicgK1xuICAgICAgICAgIGVuY29kZVVSSShmaWxlLnVwbG9hZE5hbWUgfHwgZmlsZS5uYW1lKSArXG4gICAgICAgICAgJ1wiJztcbiAgICAgIH1cbiAgICAgIGlmICghbXVsdGlwYXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuY29udGVudFR5cGUgPSBmaWxlLnR5cGUgfHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IG9wdGlvbnMuYmxvYiB8fCBmaWxlO1xuICAgICAgfSBlbHNlIGlmICgkLnN1cHBvcnQueGhyRm9ybURhdGFGaWxlVXBsb2FkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnBvc3RNZXNzYWdlKSB7XG4gICAgICAgICAgLy8gd2luZG93LnBvc3RNZXNzYWdlIGRvZXMgbm90IGFsbG93IHNlbmRpbmcgRm9ybURhdGFcbiAgICAgICAgICAvLyBvYmplY3RzLCBzbyB3ZSBqdXN0IGFkZCB0aGUgRmlsZS9CbG9iIG9iamVjdHMgdG9cbiAgICAgICAgICAvLyB0aGUgZm9ybURhdGEgYXJyYXkgYW5kIGxldCB0aGUgcG9zdE1lc3NhZ2Ugd2luZG93XG4gICAgICAgICAgLy8gY3JlYXRlIHRoZSBGb3JtRGF0YSBvYmplY3Qgb3V0IG9mIHRoaXMgYXJyYXk6XG4gICAgICAgICAgZm9ybURhdGEgPSB0aGlzLl9nZXRGb3JtRGF0YShvcHRpb25zKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5ibG9iKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogcGFyYW1OYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9ucy5ibG9iXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkge1xuICAgICAgICAgICAgICBmb3JtRGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOlxuICAgICAgICAgICAgICAgICAgKCQudHlwZShvcHRpb25zLnBhcmFtTmFtZSkgPT09ICdhcnJheScgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbU5hbWVbaW5kZXhdKSB8fFxuICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmaWxlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGF0Ll9pc0luc3RhbmNlT2YoJ0Zvcm1EYXRhJywgb3B0aW9ucy5mb3JtRGF0YSkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhID0gb3B0aW9ucy5mb3JtRGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9nZXRGb3JtRGF0YShvcHRpb25zKSwgZnVuY3Rpb24gKGluZGV4LCBmaWVsZCkge1xuICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoZmllbGQubmFtZSwgZmllbGQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpb25zLmJsb2IpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgICAgcGFyYW1OYW1lLFxuICAgICAgICAgICAgICBvcHRpb25zLmJsb2IsXG4gICAgICAgICAgICAgIGZpbGUudXBsb2FkTmFtZSB8fCBmaWxlLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmZpbGVzLCBmdW5jdGlvbiAoaW5kZXgsIGZpbGUpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBjaGVjayBhbGxvd3MgdGhlIHRlc3RzIHRvIHJ1biB3aXRoXG4gICAgICAgICAgICAgIC8vIGR1bW15IG9iamVjdHM6XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGF0Ll9pc0luc3RhbmNlT2YoJ0ZpbGUnLCBmaWxlKSB8fFxuICAgICAgICAgICAgICAgIHRoYXQuX2lzSW5zdGFuY2VPZignQmxvYicsIGZpbGUpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IGZpbGUudXBsb2FkTmFtZSB8fCBmaWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudW5pcXVlRmlsZW5hbWVzKSB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IHRoYXQuX2dldFVuaXF1ZUZpbGVuYW1lKFxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51bmlxdWVGaWxlbmFtZXNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICgkLnR5cGUob3B0aW9ucy5wYXJhbU5hbWUpID09PSAnYXJyYXknICYmXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucGFyYW1OYW1lW2luZGV4XSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1OYW1lLFxuICAgICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IGZvcm1EYXRhO1xuICAgICAgfVxuICAgICAgLy8gQmxvYiByZWZlcmVuY2UgaXMgbm90IG5lZWRlZCBhbnltb3JlLCBmcmVlIG1lbW9yeTpcbiAgICAgIG9wdGlvbnMuYmxvYiA9IG51bGw7XG4gICAgfSxcblxuICAgIF9pbml0SWZyYW1lU2V0dGluZ3M6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgdGFyZ2V0SG9zdCA9ICQoJzxhPjwvYT4nKS5wcm9wKCdocmVmJywgb3B0aW9ucy51cmwpLnByb3AoJ2hvc3QnKTtcbiAgICAgIC8vIFNldHRpbmcgdGhlIGRhdGFUeXBlIHRvIGlmcmFtZSBlbmFibGVzIHRoZSBpZnJhbWUgdHJhbnNwb3J0OlxuICAgICAgb3B0aW9ucy5kYXRhVHlwZSA9ICdpZnJhbWUgJyArIChvcHRpb25zLmRhdGFUeXBlIHx8ICcnKTtcbiAgICAgIC8vIFRoZSBpZnJhbWUgdHJhbnNwb3J0IGFjY2VwdHMgYSBzZXJpYWxpemVkIGFycmF5IGFzIGZvcm0gZGF0YTpcbiAgICAgIG9wdGlvbnMuZm9ybURhdGEgPSB0aGlzLl9nZXRGb3JtRGF0YShvcHRpb25zKTtcbiAgICAgIC8vIEFkZCByZWRpcmVjdCB1cmwgdG8gZm9ybSBkYXRhIG9uIGNyb3NzLWRvbWFpbiB1cGxvYWRzOlxuICAgICAgaWYgKG9wdGlvbnMucmVkaXJlY3QgJiYgdGFyZ2V0SG9zdCAmJiB0YXJnZXRIb3N0ICE9PSBsb2NhdGlvbi5ob3N0KSB7XG4gICAgICAgIG9wdGlvbnMuZm9ybURhdGEucHVzaCh7XG4gICAgICAgICAgbmFtZTogb3B0aW9ucy5yZWRpcmVjdFBhcmFtTmFtZSB8fCAncmVkaXJlY3QnLFxuICAgICAgICAgIHZhbHVlOiBvcHRpb25zLnJlZGlyZWN0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdERhdGFTZXR0aW5nczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLl9pc1hIUlVwbG9hZChvcHRpb25zKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2NodW5rZWRVcGxvYWQob3B0aW9ucywgdHJ1ZSkpIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMuZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5faW5pdFhIUkRhdGEob3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2luaXRQcm9ncmVzc0xpc3RlbmVyKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnBvc3RNZXNzYWdlKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyB0aGUgZGF0YVR5cGUgdG8gcG9zdG1lc3NhZ2UgZW5hYmxlcyB0aGVcbiAgICAgICAgICAvLyBwb3N0TWVzc2FnZSB0cmFuc3BvcnQ6XG4gICAgICAgICAgb3B0aW9ucy5kYXRhVHlwZSA9ICdwb3N0bWVzc2FnZSAnICsgKG9wdGlvbnMuZGF0YVR5cGUgfHwgJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pbml0SWZyYW1lU2V0dGluZ3Mob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9nZXRQYXJhbU5hbWU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgZmlsZUlucHV0ID0gJChvcHRpb25zLmZpbGVJbnB1dCksXG4gICAgICAgIHBhcmFtTmFtZSA9IG9wdGlvbnMucGFyYW1OYW1lO1xuICAgICAgaWYgKCFwYXJhbU5hbWUpIHtcbiAgICAgICAgcGFyYW1OYW1lID0gW107XG4gICAgICAgIGZpbGVJbnB1dC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgbmFtZSA9IGlucHV0LnByb3AoJ25hbWUnKSB8fCAnZmlsZXNbXScsXG4gICAgICAgICAgICBpID0gKGlucHV0LnByb3AoJ2ZpbGVzJykgfHwgWzFdKS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgICAgIHBhcmFtTmFtZS5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcGFyYW1OYW1lLmxlbmd0aCkge1xuICAgICAgICAgIHBhcmFtTmFtZSA9IFtmaWxlSW5wdXQucHJvcCgnbmFtZScpIHx8ICdmaWxlc1tdJ107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoISQuaXNBcnJheShwYXJhbU5hbWUpKSB7XG4gICAgICAgIHBhcmFtTmFtZSA9IFtwYXJhbU5hbWVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtTmFtZTtcbiAgICB9LFxuXG4gICAgX2luaXRGb3JtU2V0dGluZ3M6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAvLyBSZXRyaWV2ZSBtaXNzaW5nIG9wdGlvbnMgZnJvbSB0aGUgaW5wdXQgZmllbGQgYW5kIHRoZVxuICAgICAgLy8gYXNzb2NpYXRlZCBmb3JtLCBpZiBhdmFpbGFibGU6XG4gICAgICBpZiAoIW9wdGlvbnMuZm9ybSB8fCAhb3B0aW9ucy5mb3JtLmxlbmd0aCkge1xuICAgICAgICBvcHRpb25zLmZvcm0gPSAkKG9wdGlvbnMuZmlsZUlucHV0LnByb3AoJ2Zvcm0nKSk7XG4gICAgICAgIC8vIElmIHRoZSBnaXZlbiBmaWxlIGlucHV0IGRvZXNuJ3QgaGF2ZSBhbiBhc3NvY2lhdGVkIGZvcm0sXG4gICAgICAgIC8vIHVzZSB0aGUgZGVmYXVsdCB3aWRnZXQgZmlsZSBpbnB1dCdzIGZvcm06XG4gICAgICAgIGlmICghb3B0aW9ucy5mb3JtLmxlbmd0aCkge1xuICAgICAgICAgIG9wdGlvbnMuZm9ybSA9ICQodGhpcy5vcHRpb25zLmZpbGVJbnB1dC5wcm9wKCdmb3JtJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zLnBhcmFtTmFtZSA9IHRoaXMuX2dldFBhcmFtTmFtZShvcHRpb25zKTtcbiAgICAgIGlmICghb3B0aW9ucy51cmwpIHtcbiAgICAgICAgb3B0aW9ucy51cmwgPSBvcHRpb25zLmZvcm0ucHJvcCgnYWN0aW9uJykgfHwgbG9jYXRpb24uaHJlZjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBIVFRQIHJlcXVlc3QgbWV0aG9kIG11c3QgYmUgXCJQT1NUXCIgb3IgXCJQVVRcIjpcbiAgICAgIG9wdGlvbnMudHlwZSA9IChcbiAgICAgICAgb3B0aW9ucy50eXBlIHx8XG4gICAgICAgICgkLnR5cGUob3B0aW9ucy5mb3JtLnByb3AoJ21ldGhvZCcpKSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICBvcHRpb25zLmZvcm0ucHJvcCgnbWV0aG9kJykpIHx8XG4gICAgICAgICcnXG4gICAgICApLnRvVXBwZXJDYXNlKCk7XG4gICAgICBpZiAoXG4gICAgICAgIG9wdGlvbnMudHlwZSAhPT0gJ1BPU1QnICYmXG4gICAgICAgIG9wdGlvbnMudHlwZSAhPT0gJ1BVVCcgJiZcbiAgICAgICAgb3B0aW9ucy50eXBlICE9PSAnUEFUQ0gnXG4gICAgICApIHtcbiAgICAgICAgb3B0aW9ucy50eXBlID0gJ1BPU1QnO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHRpb25zLmZvcm1BY2NlcHRDaGFyc2V0KSB7XG4gICAgICAgIG9wdGlvbnMuZm9ybUFjY2VwdENoYXJzZXQgPSBvcHRpb25zLmZvcm0uYXR0cignYWNjZXB0LWNoYXJzZXQnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2dldEFKQVhTZXR0aW5nczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgZGF0YSk7XG4gICAgICB0aGlzLl9pbml0Rm9ybVNldHRpbmdzKG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5pdERhdGFTZXR0aW5ncyhvcHRpb25zKTtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0sXG5cbiAgICAvLyBqUXVlcnkgMS42IGRvZXNuJ3QgcHJvdmlkZSAuc3RhdGUoKSxcbiAgICAvLyB3aGlsZSBqUXVlcnkgMS44KyByZW1vdmVkIC5pc1JlamVjdGVkKCkgYW5kIC5pc1Jlc29sdmVkKCk6XG4gICAgX2dldERlZmVycmVkU3RhdGU6IGZ1bmN0aW9uIChkZWZlcnJlZCkge1xuICAgICAgaWYgKGRlZmVycmVkLnN0YXRlKSB7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5zdGF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmVycmVkLmlzUmVzb2x2ZWQoKSkge1xuICAgICAgICByZXR1cm4gJ3Jlc29sdmVkJztcbiAgICAgIH1cbiAgICAgIGlmIChkZWZlcnJlZC5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgcmV0dXJuICdyZWplY3RlZCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3BlbmRpbmcnO1xuICAgIH0sXG5cbiAgICAvLyBNYXBzIGpxWEhSIGNhbGxiYWNrcyB0byB0aGUgZXF1aXZhbGVudFxuICAgIC8vIG1ldGhvZHMgb2YgdGhlIGdpdmVuIFByb21pc2Ugb2JqZWN0OlxuICAgIF9lbmhhbmNlUHJvbWlzZTogZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IHByb21pc2UuZG9uZTtcbiAgICAgIHByb21pc2UuZXJyb3IgPSBwcm9taXNlLmZhaWw7XG4gICAgICBwcm9taXNlLmNvbXBsZXRlID0gcHJvbWlzZS5hbHdheXM7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IGVuaGFuY2VkIHdpdGhcbiAgICAvLyB0aGUganFYSFIgbWV0aG9kcyBhYm9ydCwgc3VjY2VzcywgZXJyb3IgYW5kIGNvbXBsZXRlOlxuICAgIF9nZXRYSFJQcm9taXNlOiBmdW5jdGlvbiAocmVzb2x2ZU9yUmVqZWN0LCBjb250ZXh0LCBhcmdzKSB7XG4gICAgICB2YXIgZGZkID0gJC5EZWZlcnJlZCgpLFxuICAgICAgICBwcm9taXNlID0gZGZkLnByb21pc2UoKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5vcHRpb25zLmNvbnRleHQgfHwgcHJvbWlzZTtcbiAgICAgIGlmIChyZXNvbHZlT3JSZWplY3QgPT09IHRydWUpIHtcbiAgICAgICAgZGZkLnJlc29sdmVXaXRoKGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfSBlbHNlIGlmIChyZXNvbHZlT3JSZWplY3QgPT09IGZhbHNlKSB7XG4gICAgICAgIGRmZC5yZWplY3RXaXRoKGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcHJvbWlzZS5hYm9ydCA9IGRmZC5wcm9taXNlO1xuICAgICAgcmV0dXJuIHRoaXMuX2VuaGFuY2VQcm9taXNlKHByb21pc2UpO1xuICAgIH0sXG5cbiAgICAvLyBBZGRzIGNvbnZlbmllbmNlIG1ldGhvZHMgdG8gdGhlIGRhdGEgY2FsbGJhY2sgYXJndW1lbnQ6XG4gICAgX2FkZENvbnZlbmllbmNlTWV0aG9kczogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgZ2V0UHJvbWlzZSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgcmV0dXJuICQuRGVmZXJyZWQoKS5yZXNvbHZlV2l0aCh0aGF0LCBhcmdzKS5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICBkYXRhLnByb2Nlc3MgPSBmdW5jdGlvbiAocmVzb2x2ZUZ1bmMsIHJlamVjdEZ1bmMpIHtcbiAgICAgICAgaWYgKHJlc29sdmVGdW5jIHx8IHJlamVjdEZ1bmMpIHtcbiAgICAgICAgICBkYXRhLl9wcm9jZXNzUXVldWUgPSB0aGlzLl9wcm9jZXNzUXVldWUgPSAodGhpcy5fcHJvY2Vzc1F1ZXVlIHx8XG4gICAgICAgICAgICBnZXRQcm9taXNlKFt0aGlzXSkpXG4gICAgICAgICAgICBbdGhhdC5fcHJvbWlzZVBpcGVdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5EZWZlcnJlZCgpLnJlamVjdFdpdGgodGhhdCwgW2RhdGFdKS5wcm9taXNlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGdldFByb21pc2UoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBbdGhhdC5fcHJvbWlzZVBpcGVdKHJlc29sdmVGdW5jLCByZWplY3RGdW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1F1ZXVlIHx8IGdldFByb21pc2UoW3RoaXNdKTtcbiAgICAgIH07XG4gICAgICBkYXRhLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUoKSAhPT0gJ3BlbmRpbmcnKSB7XG4gICAgICAgICAgZGF0YS5qcVhIUiA9IHRoaXMuanFYSFIgPVxuICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcihcbiAgICAgICAgICAgICAgJ3N1Ym1pdCcsXG4gICAgICAgICAgICAgICQuRXZlbnQoJ3N1Ym1pdCcsIHsgZGVsZWdhdGVkRXZlbnQ6IGUgfSksXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICkgIT09IGZhbHNlICYmIHRoYXQuX29uU2VuZChlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5qcVhIUiB8fCB0aGF0Ll9nZXRYSFJQcm9taXNlKCk7XG4gICAgICB9O1xuICAgICAgZGF0YS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuanFYSFIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5qcVhIUi5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXJyb3JUaHJvd24gPSAnYWJvcnQnO1xuICAgICAgICB0aGF0Ll90cmlnZ2VyKCdmYWlsJywgbnVsbCwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGF0Ll9nZXRYSFJQcm9taXNlKGZhbHNlKTtcbiAgICAgIH07XG4gICAgICBkYXRhLnN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5qcVhIUikge1xuICAgICAgICAgIHJldHVybiB0aGF0Ll9nZXREZWZlcnJlZFN0YXRlKHRoaXMuanFYSFIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcm9jZXNzUXVldWUpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5fZ2V0RGVmZXJyZWRTdGF0ZSh0aGlzLl9wcm9jZXNzUXVldWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZGF0YS5wcm9jZXNzaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICF0aGlzLmpxWEhSICYmXG4gICAgICAgICAgdGhpcy5fcHJvY2Vzc1F1ZXVlICYmXG4gICAgICAgICAgdGhhdC5fZ2V0RGVmZXJyZWRTdGF0ZSh0aGlzLl9wcm9jZXNzUXVldWUpID09PSAncGVuZGluZydcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBkYXRhLnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvZ3Jlc3M7XG4gICAgICB9O1xuICAgICAgZGF0YS5yZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLy8gUGFyc2VzIHRoZSBSYW5nZSBoZWFkZXIgZnJvbSB0aGUgc2VydmVyIHJlc3BvbnNlXG4gICAgLy8gYW5kIHJldHVybnMgdGhlIHVwbG9hZGVkIGJ5dGVzOlxuICAgIF9nZXRVcGxvYWRlZEJ5dGVzOiBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgIHZhciByYW5nZSA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCdSYW5nZScpLFxuICAgICAgICBwYXJ0cyA9IHJhbmdlICYmIHJhbmdlLnNwbGl0KCctJyksXG4gICAgICAgIHVwcGVyQnl0ZXNQb3MgPSBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICYmIHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG4gICAgICByZXR1cm4gdXBwZXJCeXRlc1BvcyAmJiB1cHBlckJ5dGVzUG9zICsgMTtcbiAgICB9LFxuXG4gICAgLy8gVXBsb2FkcyBhIGZpbGUgaW4gbXVsdGlwbGUsIHNlcXVlbnRpYWwgcmVxdWVzdHNcbiAgICAvLyBieSBzcGxpdHRpbmcgdGhlIGZpbGUgdXAgaW4gbXVsdGlwbGUgYmxvYiBjaHVua3MuXG4gICAgLy8gSWYgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgb25seSB0ZXN0cyBpZiB0aGUgZmlsZVxuICAgIC8vIHNob3VsZCBiZSB1cGxvYWRlZCBpbiBjaHVua3MsIGJ1dCBkb2VzIG5vdCBpbnZva2UgYW55XG4gICAgLy8gdXBsb2FkIHJlcXVlc3RzOlxuICAgIF9jaHVua2VkVXBsb2FkOiBmdW5jdGlvbiAob3B0aW9ucywgdGVzdE9ubHkpIHtcbiAgICAgIG9wdGlvbnMudXBsb2FkZWRCeXRlcyA9IG9wdGlvbnMudXBsb2FkZWRCeXRlcyB8fCAwO1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICBmaWxlID0gb3B0aW9ucy5maWxlc1swXSxcbiAgICAgICAgZnMgPSBmaWxlLnNpemUsXG4gICAgICAgIHViID0gb3B0aW9ucy51cGxvYWRlZEJ5dGVzLFxuICAgICAgICBtY3MgPSBvcHRpb25zLm1heENodW5rU2l6ZSB8fCBmcyxcbiAgICAgICAgc2xpY2UgPSB0aGlzLl9ibG9iU2xpY2UsXG4gICAgICAgIGRmZCA9ICQuRGVmZXJyZWQoKSxcbiAgICAgICAgcHJvbWlzZSA9IGRmZC5wcm9taXNlKCksXG4gICAgICAgIGpxWEhSLFxuICAgICAgICB1cGxvYWQ7XG4gICAgICBpZiAoXG4gICAgICAgICEoXG4gICAgICAgICAgdGhpcy5faXNYSFJVcGxvYWQob3B0aW9ucykgJiZcbiAgICAgICAgICBzbGljZSAmJlxuICAgICAgICAgICh1YiB8fCAoJC50eXBlKG1jcykgPT09ICdmdW5jdGlvbicgPyBtY3Mob3B0aW9ucykgOiBtY3MpIDwgZnMpXG4gICAgICAgICkgfHxcbiAgICAgICAgb3B0aW9ucy5kYXRhXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRlc3RPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHViID49IGZzKSB7XG4gICAgICAgIGZpbGUuZXJyb3IgPSBvcHRpb25zLmkxOG4oJ3VwbG9hZGVkQnl0ZXMnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFhIUlByb21pc2UoZmFsc2UsIG9wdGlvbnMuY29udGV4dCwgW1xuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgICBmaWxlLmVycm9yXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgICAgLy8gVGhlIGNodW5rIHVwbG9hZCBtZXRob2Q6XG4gICAgICB1cGxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIENsb25lIHRoZSBvcHRpb25zIG9iamVjdCBmb3IgZWFjaCBjaHVuayB1cGxvYWQ6XG4gICAgICAgIHZhciBvID0gJC5leHRlbmQoe30sIG9wdGlvbnMpLFxuICAgICAgICAgIGN1cnJlbnRMb2FkZWQgPSBvLl9wcm9ncmVzcy5sb2FkZWQ7XG4gICAgICAgIG8uYmxvYiA9IHNsaWNlLmNhbGwoXG4gICAgICAgICAgZmlsZSxcbiAgICAgICAgICB1YixcbiAgICAgICAgICB1YiArICgkLnR5cGUobWNzKSA9PT0gJ2Z1bmN0aW9uJyA/IG1jcyhvKSA6IG1jcyksXG4gICAgICAgICAgZmlsZS50eXBlXG4gICAgICAgICk7XG4gICAgICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IGNodW5rIHNpemUsIGFzIHRoZSBibG9iIGl0c2VsZlxuICAgICAgICAvLyB3aWxsIGJlIGRlcmVmZXJlbmNlZCBhZnRlciBkYXRhIHByb2Nlc3Npbmc6XG4gICAgICAgIG8uY2h1bmtTaXplID0gby5ibG9iLnNpemU7XG4gICAgICAgIC8vIEV4cG9zZSB0aGUgY2h1bmsgYnl0ZXMgcG9zaXRpb24gcmFuZ2U6XG4gICAgICAgIG8uY29udGVudFJhbmdlID1cbiAgICAgICAgICAnYnl0ZXMgJyArIHViICsgJy0nICsgKHViICsgby5jaHVua1NpemUgLSAxKSArICcvJyArIGZzO1xuICAgICAgICAvLyBUcmlnZ2VyIGNodW5rYmVmb3Jlc2VuZCB0byBhbGxvdyBmb3JtIGRhdGEgdG8gYmUgdXBkYXRlZCBmb3IgdGhpcyBjaHVua1xuICAgICAgICB0aGF0Ll90cmlnZ2VyKCdjaHVua2JlZm9yZXNlbmQnLCBudWxsLCBvKTtcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgdXBsb2FkIGRhdGEgKHRoZSBibG9iIGFuZCBwb3RlbnRpYWwgZm9ybSBkYXRhKTpcbiAgICAgICAgdGhhdC5faW5pdFhIUkRhdGEobyk7XG4gICAgICAgIC8vIEFkZCBwcm9ncmVzcyBsaXN0ZW5lcnMgZm9yIHRoaXMgY2h1bmsgdXBsb2FkOlxuICAgICAgICB0aGF0Ll9pbml0UHJvZ3Jlc3NMaXN0ZW5lcihvKTtcbiAgICAgICAganFYSFIgPSAoXG4gICAgICAgICAgKHRoYXQuX3RyaWdnZXIoJ2NodW5rc2VuZCcsIG51bGwsIG8pICE9PSBmYWxzZSAmJiAkLmFqYXgobykpIHx8XG4gICAgICAgICAgdGhhdC5fZ2V0WEhSUHJvbWlzZShmYWxzZSwgby5jb250ZXh0KVxuICAgICAgICApXG4gICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3VsdCwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgIHViID0gdGhhdC5fZ2V0VXBsb2FkZWRCeXRlcyhqcVhIUikgfHwgdWIgKyBvLmNodW5rU2l6ZTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHByb2dyZXNzIGV2ZW50IGlmIG5vIGZpbmFsIHByb2dyZXNzIGV2ZW50XG4gICAgICAgICAgICAvLyB3aXRoIGxvYWRlZCBlcXVhbGluZyB0b3RhbCBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICAgICAgICAgIC8vIGZvciB0aGlzIGNodW5rOlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRMb2FkZWQgKyBvLmNodW5rU2l6ZSAtIG8uX3Byb2dyZXNzLmxvYWRlZCkge1xuICAgICAgICAgICAgICB0aGF0Ll9vblByb2dyZXNzKFxuICAgICAgICAgICAgICAgICQuRXZlbnQoJ3Byb2dyZXNzJywge1xuICAgICAgICAgICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGxvYWRlZDogdWIgLSBvLnVwbG9hZGVkQnl0ZXMsXG4gICAgICAgICAgICAgICAgICB0b3RhbDogdWIgLSBvLnVwbG9hZGVkQnl0ZXNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBvXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnVwbG9hZGVkQnl0ZXMgPSBvLnVwbG9hZGVkQnl0ZXMgPSB1YjtcbiAgICAgICAgICAgIG8ucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgby50ZXh0U3RhdHVzID0gdGV4dFN0YXR1cztcbiAgICAgICAgICAgIG8uanFYSFIgPSBqcVhIUjtcbiAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2NodW5rZG9uZScsIG51bGwsIG8pO1xuICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcignY2h1bmthbHdheXMnLCBudWxsLCBvKTtcbiAgICAgICAgICAgIGlmICh1YiA8IGZzKSB7XG4gICAgICAgICAgICAgIC8vIEZpbGUgdXBsb2FkIG5vdCB5ZXQgY29tcGxldGUsXG4gICAgICAgICAgICAgIC8vIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgY2h1bms6XG4gICAgICAgICAgICAgIHVwbG9hZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGZkLnJlc29sdmVXaXRoKG8uY29udGV4dCwgW3Jlc3VsdCwgdGV4dFN0YXR1cywganFYSFJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIG8uanFYSFIgPSBqcVhIUjtcbiAgICAgICAgICAgIG8udGV4dFN0YXR1cyA9IHRleHRTdGF0dXM7XG4gICAgICAgICAgICBvLmVycm9yVGhyb3duID0gZXJyb3JUaHJvd247XG4gICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdjaHVua2ZhaWwnLCBudWxsLCBvKTtcbiAgICAgICAgICAgIHRoYXQuX3RyaWdnZXIoJ2NodW5rYWx3YXlzJywgbnVsbCwgbyk7XG4gICAgICAgICAgICBkZmQucmVqZWN0V2l0aChvLmNvbnRleHQsIFtqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd25dKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC5fZGVpbml0UHJvZ3Jlc3NMaXN0ZW5lcihvKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICB0aGlzLl9lbmhhbmNlUHJvbWlzZShwcm9taXNlKTtcbiAgICAgIHByb21pc2UuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpO1xuICAgICAgfTtcbiAgICAgIHVwbG9hZCgpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcblxuICAgIF9iZWZvcmVTZW5kOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZSA9PT0gMCkge1xuICAgICAgICAvLyB0aGUgc3RhcnQgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIHdoZW4gYW4gdXBsb2FkIHN0YXJ0c1xuICAgICAgICAvLyBhbmQgbm8gb3RoZXIgdXBsb2FkcyBhcmUgY3VycmVudGx5IHJ1bm5pbmcsXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gdGhlIGdsb2JhbCBhamF4U3RhcnQgZXZlbnQ6XG4gICAgICAgIHRoaXMuX3RyaWdnZXIoJ3N0YXJ0Jyk7XG4gICAgICAgIC8vIFNldCB0aW1lciBmb3IgZ2xvYmFsIGJpdHJhdGUgcHJvZ3Jlc3MgY2FsY3VsYXRpb246XG4gICAgICAgIHRoaXMuX2JpdHJhdGVUaW1lciA9IG5ldyB0aGlzLl9CaXRyYXRlVGltZXIoKTtcbiAgICAgICAgLy8gUmVzZXQgdGhlIGdsb2JhbCBwcm9ncmVzcyB2YWx1ZXM6XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzLmxvYWRlZCA9IHRoaXMuX3Byb2dyZXNzLnRvdGFsID0gMDtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MuYml0cmF0ZSA9IDA7XG4gICAgICB9XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGNvbnRhaW5lciBvYmplY3RzIGZvciB0aGUgLnJlc3BvbnNlKCkgYW5kXG4gICAgICAvLyAucHJvZ3Jlc3MoKSBtZXRob2RzIG9uIHRoZSBkYXRhIG9iamVjdCBhcmUgYXZhaWxhYmxlXG4gICAgICAvLyBhbmQgcmVzZXQgdG8gdGhlaXIgaW5pdGlhbCBzdGF0ZTpcbiAgICAgIHRoaXMuX2luaXRSZXNwb25zZU9iamVjdChkYXRhKTtcbiAgICAgIHRoaXMuX2luaXRQcm9ncmVzc09iamVjdChkYXRhKTtcbiAgICAgIGRhdGEuX3Byb2dyZXNzLmxvYWRlZCA9IGRhdGEubG9hZGVkID0gZGF0YS51cGxvYWRlZEJ5dGVzIHx8IDA7XG4gICAgICBkYXRhLl9wcm9ncmVzcy50b3RhbCA9IGRhdGEudG90YWwgPSB0aGlzLl9nZXRUb3RhbChkYXRhLmZpbGVzKSB8fCAxO1xuICAgICAgZGF0YS5fcHJvZ3Jlc3MuYml0cmF0ZSA9IGRhdGEuYml0cmF0ZSA9IDA7XG4gICAgICB0aGlzLl9hY3RpdmUgKz0gMTtcbiAgICAgIC8vIEluaXRpYWxpemUgdGhlIGdsb2JhbCBwcm9ncmVzcyB2YWx1ZXM6XG4gICAgICB0aGlzLl9wcm9ncmVzcy5sb2FkZWQgKz0gZGF0YS5sb2FkZWQ7XG4gICAgICB0aGlzLl9wcm9ncmVzcy50b3RhbCArPSBkYXRhLnRvdGFsO1xuICAgIH0sXG5cbiAgICBfb25Eb25lOiBmdW5jdGlvbiAocmVzdWx0LCB0ZXh0U3RhdHVzLCBqcVhIUiwgb3B0aW9ucykge1xuICAgICAgdmFyIHRvdGFsID0gb3B0aW9ucy5fcHJvZ3Jlc3MudG90YWwsXG4gICAgICAgIHJlc3BvbnNlID0gb3B0aW9ucy5fcmVzcG9uc2U7XG4gICAgICBpZiAob3B0aW9ucy5fcHJvZ3Jlc3MubG9hZGVkIDwgdG90YWwpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgcHJvZ3Jlc3MgZXZlbnQgaWYgbm8gZmluYWwgcHJvZ3Jlc3MgZXZlbnRcbiAgICAgICAgLy8gd2l0aCBsb2FkZWQgZXF1YWxpbmcgdG90YWwgaGFzIGJlZW4gdHJpZ2dlcmVkOlxuICAgICAgICB0aGlzLl9vblByb2dyZXNzKFxuICAgICAgICAgICQuRXZlbnQoJ3Byb2dyZXNzJywge1xuICAgICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGxvYWRlZDogdG90YWwsXG4gICAgICAgICAgICB0b3RhbDogdG90YWxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXNwb25zZS5yZXN1bHQgPSBvcHRpb25zLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgIHJlc3BvbnNlLnRleHRTdGF0dXMgPSBvcHRpb25zLnRleHRTdGF0dXMgPSB0ZXh0U3RhdHVzO1xuICAgICAgcmVzcG9uc2UuanFYSFIgPSBvcHRpb25zLmpxWEhSID0ganFYSFI7XG4gICAgICB0aGlzLl90cmlnZ2VyKCdkb25lJywgbnVsbCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIF9vbkZhaWw6IGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24sIG9wdGlvbnMpIHtcbiAgICAgIHZhciByZXNwb25zZSA9IG9wdGlvbnMuX3Jlc3BvbnNlO1xuICAgICAgaWYgKG9wdGlvbnMucmVjYWxjdWxhdGVQcm9ncmVzcykge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGZhaWxlZCAoZXJyb3Igb3IgYWJvcnQpIGZpbGUgdXBsb2FkIGZyb21cbiAgICAgICAgLy8gdGhlIGdsb2JhbCBwcm9ncmVzcyBjYWxjdWxhdGlvbjpcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MubG9hZGVkIC09IG9wdGlvbnMuX3Byb2dyZXNzLmxvYWRlZDtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MudG90YWwgLT0gb3B0aW9ucy5fcHJvZ3Jlc3MudG90YWw7XG4gICAgICB9XG4gICAgICByZXNwb25zZS5qcVhIUiA9IG9wdGlvbnMuanFYSFIgPSBqcVhIUjtcbiAgICAgIHJlc3BvbnNlLnRleHRTdGF0dXMgPSBvcHRpb25zLnRleHRTdGF0dXMgPSB0ZXh0U3RhdHVzO1xuICAgICAgcmVzcG9uc2UuZXJyb3JUaHJvd24gPSBvcHRpb25zLmVycm9yVGhyb3duID0gZXJyb3JUaHJvd247XG4gICAgICB0aGlzLl90cmlnZ2VyKCdmYWlsJywgbnVsbCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIF9vbkFsd2F5czogZnVuY3Rpb24gKGpxWEhSb3JSZXN1bHQsIHRleHRTdGF0dXMsIGpxWEhSb3JFcnJvciwgb3B0aW9ucykge1xuICAgICAgLy8ganFYSFJvclJlc3VsdCwgdGV4dFN0YXR1cyBhbmQganFYSFJvckVycm9yIGFyZSBhZGRlZCB0byB0aGVcbiAgICAgIC8vIG9wdGlvbnMgb2JqZWN0IHZpYSBkb25lIGFuZCBmYWlsIGNhbGxiYWNrc1xuICAgICAgdGhpcy5fdHJpZ2dlcignYWx3YXlzJywgbnVsbCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIF9vblNlbmQ6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICBpZiAoIWRhdGEuc3VibWl0KSB7XG4gICAgICAgIHRoaXMuX2FkZENvbnZlbmllbmNlTWV0aG9kcyhlLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAganFYSFIsXG4gICAgICAgIGFib3J0ZWQsXG4gICAgICAgIHNsb3QsXG4gICAgICAgIHBpcGUsXG4gICAgICAgIG9wdGlvbnMgPSB0aGF0Ll9nZXRBSkFYU2V0dGluZ3MoZGF0YSksXG4gICAgICAgIHNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhhdC5fc2VuZGluZyArPSAxO1xuICAgICAgICAgIC8vIFNldCB0aW1lciBmb3IgYml0cmF0ZSBwcm9ncmVzcyBjYWxjdWxhdGlvbjpcbiAgICAgICAgICBvcHRpb25zLl9iaXRyYXRlVGltZXIgPSBuZXcgdGhhdC5fQml0cmF0ZVRpbWVyKCk7XG4gICAgICAgICAganFYSFIgPVxuICAgICAgICAgICAganFYSFIgfHxcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgKChhYm9ydGVkIHx8XG4gICAgICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcihcbiAgICAgICAgICAgICAgICAgICdzZW5kJyxcbiAgICAgICAgICAgICAgICAgICQuRXZlbnQoJ3NlbmQnLCB7IGRlbGVnYXRlZEV2ZW50OiBlIH0pLFxuICAgICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgICAgICkgPT09IGZhbHNlKSAmJlxuICAgICAgICAgICAgICAgIHRoYXQuX2dldFhIUlByb21pc2UoZmFsc2UsIG9wdGlvbnMuY29udGV4dCwgYWJvcnRlZCkpIHx8XG4gICAgICAgICAgICAgIHRoYXQuX2NodW5rZWRVcGxvYWQob3B0aW9ucykgfHxcbiAgICAgICAgICAgICAgJC5hamF4KG9wdGlvbnMpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXN1bHQsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fb25Eb25lKHJlc3VsdCwgdGV4dFN0YXR1cywganFYSFIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fb25GYWlsKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93biwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKGpxWEhSb3JSZXN1bHQsIHRleHRTdGF0dXMsIGpxWEhSb3JFcnJvcikge1xuICAgICAgICAgICAgICAgIHRoYXQuX2RlaW5pdFByb2dyZXNzTGlzdGVuZXIob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhhdC5fb25BbHdheXMoXG4gICAgICAgICAgICAgICAgICBqcVhIUm9yUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgdGV4dFN0YXR1cyxcbiAgICAgICAgICAgICAgICAgIGpxWEhSb3JFcnJvcixcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoYXQuX3NlbmRpbmcgLT0gMTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9hY3RpdmUgLT0gMTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBvcHRpb25zLmxpbWl0Q29uY3VycmVudFVwbG9hZHMgJiZcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMubGltaXRDb25jdXJyZW50VXBsb2FkcyA+IHRoYXQuX3NlbmRpbmdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IHRoZSBuZXh0IHF1ZXVlZCB1cGxvYWQsXG4gICAgICAgICAgICAgICAgICAvLyB0aGF0IGhhcyBub3QgYmVlbiBhYm9ydGVkOlxuICAgICAgICAgICAgICAgICAgdmFyIG5leHRTbG90ID0gdGhhdC5fc2xvdHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0U2xvdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5fZ2V0RGVmZXJyZWRTdGF0ZShuZXh0U2xvdCkgPT09ICdwZW5kaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgIG5leHRTbG90LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0U2xvdCA9IHRoYXQuX3Nsb3RzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGF0Ll9hY3RpdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBzdG9wIGNhbGxiYWNrIGlzIHRyaWdnZXJlZCB3aGVuIGFsbCB1cGxvYWRzIGhhdmVcbiAgICAgICAgICAgICAgICAgIC8vIGJlZW4gY29tcGxldGVkLCBlcXVpdmFsZW50IHRvIHRoZSBnbG9iYWwgYWpheFN0b3AgZXZlbnQ6XG4gICAgICAgICAgICAgICAgICB0aGF0Ll90cmlnZ2VyKCdzdG9wJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4ganFYSFI7XG4gICAgICAgIH07XG4gICAgICB0aGlzLl9iZWZvcmVTZW5kKGUsIG9wdGlvbnMpO1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm9wdGlvbnMuc2VxdWVudGlhbFVwbG9hZHMgfHxcbiAgICAgICAgKHRoaXMub3B0aW9ucy5saW1pdENvbmN1cnJlbnRVcGxvYWRzICYmXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmxpbWl0Q29uY3VycmVudFVwbG9hZHMgPD0gdGhpcy5fc2VuZGluZylcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxpbWl0Q29uY3VycmVudFVwbG9hZHMgPiAxKSB7XG4gICAgICAgICAgc2xvdCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICB0aGlzLl9zbG90cy5wdXNoKHNsb3QpO1xuICAgICAgICAgIHBpcGUgPSBzbG90W3RoYXQuX3Byb21pc2VQaXBlXShzZW5kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZXF1ZW5jZSA9IHRoaXMuX3NlcXVlbmNlW3RoYXQuX3Byb21pc2VQaXBlXShzZW5kLCBzZW5kKTtcbiAgICAgICAgICBwaXBlID0gdGhpcy5fc2VxdWVuY2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBwaXBlZCBQcm9taXNlIG9iamVjdCwgZW5oYW5jZWQgd2l0aCBhbiBhYm9ydCBtZXRob2QsXG4gICAgICAgIC8vIHdoaWNoIGlzIGRlbGVnYXRlZCB0byB0aGUganFYSFIgb2JqZWN0IG9mIHRoZSBjdXJyZW50IHVwbG9hZCxcbiAgICAgICAgLy8gYW5kIGpxWEhSIGNhbGxiYWNrcyBtYXBwZWQgdG8gdGhlIGVxdWl2YWxlbnQgUHJvbWlzZSBtZXRob2RzOlxuICAgICAgICBwaXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFib3J0ZWQgPSBbdW5kZWZpbmVkLCAnYWJvcnQnLCAnYWJvcnQnXTtcbiAgICAgICAgICBpZiAoIWpxWEhSKSB7XG4gICAgICAgICAgICBpZiAoc2xvdCkge1xuICAgICAgICAgICAgICBzbG90LnJlamVjdFdpdGgob3B0aW9ucy5jb250ZXh0LCBhYm9ydGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5oYW5jZVByb21pc2UocGlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VuZCgpO1xuICAgIH0sXG5cbiAgICBfb25BZGQ6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBkYXRhKSxcbiAgICAgICAgZmlsZXMgPSBkYXRhLmZpbGVzLFxuICAgICAgICBmaWxlc0xlbmd0aCA9IGZpbGVzLmxlbmd0aCxcbiAgICAgICAgbGltaXQgPSBvcHRpb25zLmxpbWl0TXVsdGlGaWxlVXBsb2FkcyxcbiAgICAgICAgbGltaXRTaXplID0gb3B0aW9ucy5saW1pdE11bHRpRmlsZVVwbG9hZFNpemUsXG4gICAgICAgIG92ZXJoZWFkID0gb3B0aW9ucy5saW1pdE11bHRpRmlsZVVwbG9hZFNpemVPdmVyaGVhZCxcbiAgICAgICAgYmF0Y2hTaXplID0gMCxcbiAgICAgICAgcGFyYW1OYW1lID0gdGhpcy5fZ2V0UGFyYW1OYW1lKG9wdGlvbnMpLFxuICAgICAgICBwYXJhbU5hbWVTZXQsXG4gICAgICAgIHBhcmFtTmFtZVNsaWNlLFxuICAgICAgICBmaWxlU2V0LFxuICAgICAgICBpLFxuICAgICAgICBqID0gMDtcbiAgICAgIGlmICghZmlsZXNMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGxpbWl0U2l6ZSAmJiBmaWxlc1swXS5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGltaXRTaXplID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhKG9wdGlvbnMuc2luZ2xlRmlsZVVwbG9hZHMgfHwgbGltaXQgfHwgbGltaXRTaXplKSB8fFxuICAgICAgICAhdGhpcy5faXNYSFJVcGxvYWQob3B0aW9ucylcbiAgICAgICkge1xuICAgICAgICBmaWxlU2V0ID0gW2ZpbGVzXTtcbiAgICAgICAgcGFyYW1OYW1lU2V0ID0gW3BhcmFtTmFtZV07XG4gICAgICB9IGVsc2UgaWYgKCEob3B0aW9ucy5zaW5nbGVGaWxlVXBsb2FkcyB8fCBsaW1pdFNpemUpICYmIGxpbWl0KSB7XG4gICAgICAgIGZpbGVTZXQgPSBbXTtcbiAgICAgICAgcGFyYW1OYW1lU2V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlc0xlbmd0aDsgaSArPSBsaW1pdCkge1xuICAgICAgICAgIGZpbGVTZXQucHVzaChmaWxlcy5zbGljZShpLCBpICsgbGltaXQpKTtcbiAgICAgICAgICBwYXJhbU5hbWVTbGljZSA9IHBhcmFtTmFtZS5zbGljZShpLCBpICsgbGltaXQpO1xuICAgICAgICAgIGlmICghcGFyYW1OYW1lU2xpY2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJhbU5hbWVTbGljZSA9IHBhcmFtTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyYW1OYW1lU2V0LnB1c2gocGFyYW1OYW1lU2xpY2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFvcHRpb25zLnNpbmdsZUZpbGVVcGxvYWRzICYmIGxpbWl0U2l6ZSkge1xuICAgICAgICBmaWxlU2V0ID0gW107XG4gICAgICAgIHBhcmFtTmFtZVNldCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsZXNMZW5ndGg7IGkgPSBpICsgMSkge1xuICAgICAgICAgIGJhdGNoU2l6ZSArPSBmaWxlc1tpXS5zaXplICsgb3ZlcmhlYWQ7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaSArIDEgPT09IGZpbGVzTGVuZ3RoIHx8XG4gICAgICAgICAgICBiYXRjaFNpemUgKyBmaWxlc1tpICsgMV0uc2l6ZSArIG92ZXJoZWFkID4gbGltaXRTaXplIHx8XG4gICAgICAgICAgICAobGltaXQgJiYgaSArIDEgLSBqID49IGxpbWl0KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZmlsZVNldC5wdXNoKGZpbGVzLnNsaWNlKGosIGkgKyAxKSk7XG4gICAgICAgICAgICBwYXJhbU5hbWVTbGljZSA9IHBhcmFtTmFtZS5zbGljZShqLCBpICsgMSk7XG4gICAgICAgICAgICBpZiAoIXBhcmFtTmFtZVNsaWNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICBwYXJhbU5hbWVTbGljZSA9IHBhcmFtTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtTmFtZVNldC5wdXNoKHBhcmFtTmFtZVNsaWNlKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICAgIGJhdGNoU2l6ZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbU5hbWVTZXQgPSBwYXJhbU5hbWU7XG4gICAgICB9XG4gICAgICBkYXRhLm9yaWdpbmFsRmlsZXMgPSBmaWxlcztcbiAgICAgICQuZWFjaChmaWxlU2V0IHx8IGZpbGVzLCBmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG5ld0RhdGEgPSAkLmV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAgIG5ld0RhdGEuZmlsZXMgPSBmaWxlU2V0ID8gZWxlbWVudCA6IFtlbGVtZW50XTtcbiAgICAgICAgbmV3RGF0YS5wYXJhbU5hbWUgPSBwYXJhbU5hbWVTZXRbaW5kZXhdO1xuICAgICAgICB0aGF0Ll9pbml0UmVzcG9uc2VPYmplY3QobmV3RGF0YSk7XG4gICAgICAgIHRoYXQuX2luaXRQcm9ncmVzc09iamVjdChuZXdEYXRhKTtcbiAgICAgICAgdGhhdC5fYWRkQ29udmVuaWVuY2VNZXRob2RzKGUsIG5ld0RhdGEpO1xuICAgICAgICByZXN1bHQgPSB0aGF0Ll90cmlnZ2VyKFxuICAgICAgICAgICdhZGQnLFxuICAgICAgICAgICQuRXZlbnQoJ2FkZCcsIHsgZGVsZWdhdGVkRXZlbnQ6IGUgfSksXG4gICAgICAgICAgbmV3RGF0YVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBfcmVwbGFjZUZpbGVJbnB1dDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBpbnB1dCA9IGRhdGEuZmlsZUlucHV0LFxuICAgICAgICBpbnB1dENsb25lID0gaW5wdXQuY2xvbmUodHJ1ZSksXG4gICAgICAgIHJlc3RvcmVGb2N1cyA9IGlucHV0LmlzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgLy8gQWRkIGEgcmVmZXJlbmNlIGZvciB0aGUgbmV3IGNsb25lZCBmaWxlIGlucHV0IHRvIHRoZSBkYXRhIGFyZ3VtZW50OlxuICAgICAgZGF0YS5maWxlSW5wdXRDbG9uZSA9IGlucHV0Q2xvbmU7XG4gICAgICAkKCc8Zm9ybT48L2Zvcm0+JykuYXBwZW5kKGlucHV0Q2xvbmUpWzBdLnJlc2V0KCk7XG4gICAgICAvLyBEZXRhY2hpbmcgYWxsb3dzIHRvIGluc2VydCB0aGUgZmlsZUlucHV0IG9uIGFub3RoZXIgZm9ybVxuICAgICAgLy8gd2l0aG91dCBsb29zaW5nIHRoZSBmaWxlIGlucHV0IHZhbHVlOlxuICAgICAgaW5wdXQuYWZ0ZXIoaW5wdXRDbG9uZSkuZGV0YWNoKCk7XG4gICAgICAvLyBJZiB0aGUgZmlsZUlucHV0IGhhZCBmb2N1cyBiZWZvcmUgaXQgd2FzIGRldGFjaGVkLFxuICAgICAgLy8gcmVzdG9yZSBmb2N1cyB0byB0aGUgaW5wdXRDbG9uZS5cbiAgICAgIGlmIChyZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgaW5wdXRDbG9uZS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgfVxuICAgICAgLy8gQXZvaWQgbWVtb3J5IGxlYWtzIHdpdGggdGhlIGRldGFjaGVkIGZpbGUgaW5wdXQ6XG4gICAgICAkLmNsZWFuRGF0YShpbnB1dC5vZmYoJ3JlbW92ZScpKTtcbiAgICAgIC8vIFJlcGxhY2UgdGhlIG9yaWdpbmFsIGZpbGUgaW5wdXQgZWxlbWVudCBpbiB0aGUgZmlsZUlucHV0XG4gICAgICAvLyBlbGVtZW50cyBzZXQgd2l0aCB0aGUgY2xvbmUsIHdoaWNoIGhhcyBiZWVuIGNvcGllZCBpbmNsdWRpbmdcbiAgICAgIC8vIGV2ZW50IGhhbmRsZXJzOlxuICAgICAgdGhpcy5vcHRpb25zLmZpbGVJbnB1dCA9IHRoaXMub3B0aW9ucy5maWxlSW5wdXQubWFwKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICBpZiAoZWwgPT09IGlucHV0WzBdKSB7XG4gICAgICAgICAgcmV0dXJuIGlucHV0Q2xvbmVbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfSk7XG4gICAgICAvLyBJZiB0aGUgd2lkZ2V0IGhhcyBiZWVuIGluaXRpYWxpemVkIG9uIHRoZSBmaWxlIGlucHV0IGl0c2VsZixcbiAgICAgIC8vIG92ZXJyaWRlIHRoaXMuZWxlbWVudCB3aXRoIHRoZSBmaWxlIGlucHV0IGNsb25lOlxuICAgICAgaWYgKGlucHV0WzBdID09PSB0aGlzLmVsZW1lbnRbMF0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gaW5wdXRDbG9uZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2hhbmRsZUZpbGVUcmVlRW50cnk6IGZ1bmN0aW9uIChlbnRyeSwgcGF0aCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICBkZmQgPSAkLkRlZmVycmVkKCksXG4gICAgICAgIGVudHJpZXMgPSBbXSxcbiAgICAgICAgZGlyUmVhZGVyLFxuICAgICAgICBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlICYmICFlLmVudHJ5KSB7XG4gICAgICAgICAgICBlLmVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFNpbmNlICQud2hlbiByZXR1cm5zIGltbWVkaWF0ZWx5IGlmIG9uZVxuICAgICAgICAgIC8vIERlZmVycmVkIGlzIHJlamVjdGVkLCB3ZSB1c2UgcmVzb2x2ZSBpbnN0ZWFkLlxuICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIHZhbGlkIGZpbGVzIGFuZCBpbnZhbGlkIGl0ZW1zXG4gICAgICAgICAgLy8gdG8gYmUgcmV0dXJuZWQgdG9nZXRoZXIgaW4gb25lIHNldDpcbiAgICAgICAgICBkZmQucmVzb2x2ZShbZV0pO1xuICAgICAgICB9LFxuICAgICAgICBzdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgdGhhdFxuICAgICAgICAgICAgLl9oYW5kbGVGaWxlVHJlZUVudHJpZXMoZW50cmllcywgcGF0aCArIGVudHJ5Lm5hbWUgKyAnLycpXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbiAoZmlsZXMpIHtcbiAgICAgICAgICAgICAgZGZkLnJlc29sdmUoZmlsZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKGVycm9ySGFuZGxlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWRFbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpclJlYWRlci5yZWFkRW50cmllcyhmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBzdWNjZXNzSGFuZGxlcihlbnRyaWVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVudHJpZXMgPSBlbnRyaWVzLmNvbmNhdChyZXN1bHRzKTtcbiAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBwYXRoID0gcGF0aCB8fCAnJztcbiAgICAgIGlmIChlbnRyeS5pc0ZpbGUpIHtcbiAgICAgICAgaWYgKGVudHJ5Ll9maWxlKSB7XG4gICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgQ2hyb21lIGJ1ZyAjMTQ5NzM1XG4gICAgICAgICAgZW50cnkuX2ZpbGUucmVsYXRpdmVQYXRoID0gcGF0aDtcbiAgICAgICAgICBkZmQucmVzb2x2ZShlbnRyeS5fZmlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW50cnkuZmlsZShmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgZmlsZS5yZWxhdGl2ZVBhdGggPSBwYXRoO1xuICAgICAgICAgICAgZGZkLnJlc29sdmUoZmlsZSk7XG4gICAgICAgICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgICBkaXJSZWFkZXIgPSBlbnRyeS5jcmVhdGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBhbiBlbXB0eSBsaXN0IGZvciBmaWxlIHN5c3RlbSBpdGVtc1xuICAgICAgICAvLyBvdGhlciB0aGFuIGZpbGVzIG9yIGRpcmVjdG9yaWVzOlxuICAgICAgICBkZmQucmVzb2x2ZShbXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGZkLnByb21pc2UoKTtcbiAgICB9LFxuXG4gICAgX2hhbmRsZUZpbGVUcmVlRW50cmllczogZnVuY3Rpb24gKGVudHJpZXMsIHBhdGgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiAkLndoZW5cbiAgICAgICAgLmFwcGx5KFxuICAgICAgICAgICQsXG4gICAgICAgICAgJC5tYXAoZW50cmllcywgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhhdC5faGFuZGxlRmlsZVRyZWVFbnRyeShlbnRyeSwgcGF0aCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICBbdGhpcy5fcHJvbWlzZVBpcGVdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9nZXREcm9wcGVkRmlsZXM6IGZ1bmN0aW9uIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZGF0YVRyYW5zZmVyID0gZGF0YVRyYW5zZmVyIHx8IHt9O1xuICAgICAgdmFyIGl0ZW1zID0gZGF0YVRyYW5zZmVyLml0ZW1zO1xuICAgICAgaWYgKFxuICAgICAgICBpdGVtcyAmJlxuICAgICAgICBpdGVtcy5sZW5ndGggJiZcbiAgICAgICAgKGl0ZW1zWzBdLndlYmtpdEdldEFzRW50cnkgfHwgaXRlbXNbMF0uZ2V0QXNFbnRyeSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlRmlsZVRyZWVFbnRyaWVzKFxuICAgICAgICAgICQubWFwKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgaWYgKGl0ZW0ud2Via2l0R2V0QXNFbnRyeSkge1xuICAgICAgICAgICAgICBlbnRyeSA9IGl0ZW0ud2Via2l0R2V0QXNFbnRyeSgpO1xuICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBDaHJvbWUgYnVnICMxNDk3MzU6XG4gICAgICAgICAgICAgICAgZW50cnkuX2ZpbGUgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtLmdldEFzRW50cnkoKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuICQuRGVmZXJyZWQoKS5yZXNvbHZlKCQubWFrZUFycmF5KGRhdGFUcmFuc2Zlci5maWxlcykpLnByb21pc2UoKTtcbiAgICB9LFxuXG4gICAgX2dldFNpbmdsZUZpbGVJbnB1dEZpbGVzOiBmdW5jdGlvbiAoZmlsZUlucHV0KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGZpbGVJbnB1dCA9ICQoZmlsZUlucHV0KTtcbiAgICAgIHZhciBlbnRyaWVzID1cbiAgICAgICAgICBmaWxlSW5wdXQucHJvcCgnd2Via2l0RW50cmllcycpIHx8IGZpbGVJbnB1dC5wcm9wKCdlbnRyaWVzJyksXG4gICAgICAgIGZpbGVzLFxuICAgICAgICB2YWx1ZTtcbiAgICAgIGlmIChlbnRyaWVzICYmIGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVGaWxlVHJlZUVudHJpZXMoZW50cmllcyk7XG4gICAgICB9XG4gICAgICBmaWxlcyA9ICQubWFrZUFycmF5KGZpbGVJbnB1dC5wcm9wKCdmaWxlcycpKTtcbiAgICAgIGlmICghZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gZmlsZUlucHV0LnByb3AoJ3ZhbHVlJyk7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gJC5EZWZlcnJlZCgpLnJlc29sdmUoW10pLnByb21pc2UoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZmlsZXMgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZSwgdGhlIGJyb3dzZXIgZG9lcyBub3RcbiAgICAgICAgLy8gc3VwcG9ydCB0aGUgRmlsZSBBUEkgYW5kIHdlIGFkZCBhIHBzZXVkbyBGaWxlIG9iamVjdCB3aXRoXG4gICAgICAgIC8vIHRoZSBpbnB1dCB2YWx1ZSBhcyBuYW1lIHdpdGggcGF0aCBpbmZvcm1hdGlvbiByZW1vdmVkOlxuICAgICAgICBmaWxlcyA9IFt7IG5hbWU6IHZhbHVlLnJlcGxhY2UoL14uKlxcXFwvLCAnJykgfV07XG4gICAgICB9IGVsc2UgaWYgKGZpbGVzWzBdLm5hbWUgPT09IHVuZGVmaW5lZCAmJiBmaWxlc1swXS5maWxlTmFtZSkge1xuICAgICAgICAvLyBGaWxlIG5vcm1hbGl6YXRpb24gZm9yIFNhZmFyaSA0IGFuZCBGaXJlZm94IDM6XG4gICAgICAgICQuZWFjaChmaWxlcywgZnVuY3Rpb24gKGluZGV4LCBmaWxlKSB7XG4gICAgICAgICAgZmlsZS5uYW1lID0gZmlsZS5maWxlTmFtZTtcbiAgICAgICAgICBmaWxlLnNpemUgPSBmaWxlLmZpbGVTaXplO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkLkRlZmVycmVkKCkucmVzb2x2ZShmaWxlcykucHJvbWlzZSgpO1xuICAgIH0sXG5cbiAgICBfZ2V0RmlsZUlucHV0RmlsZXM6IGZ1bmN0aW9uIChmaWxlSW5wdXQpIHtcbiAgICAgIGlmICghKGZpbGVJbnB1dCBpbnN0YW5jZW9mICQpIHx8IGZpbGVJbnB1dC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNpbmdsZUZpbGVJbnB1dEZpbGVzKGZpbGVJbnB1dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJC53aGVuXG4gICAgICAgIC5hcHBseSgkLCAkLm1hcChmaWxlSW5wdXQsIHRoaXMuX2dldFNpbmdsZUZpbGVJbnB1dEZpbGVzKSlcbiAgICAgICAgW3RoaXMuX3Byb21pc2VQaXBlXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGFyZ3VtZW50cyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfb25DaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgZmlsZUlucHV0OiAkKGUudGFyZ2V0KSxcbiAgICAgICAgICBmb3JtOiAkKGUudGFyZ2V0LmZvcm0pXG4gICAgICAgIH07XG4gICAgICB0aGlzLl9nZXRGaWxlSW5wdXRGaWxlcyhkYXRhLmZpbGVJbnB1dCkuYWx3YXlzKGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICBkYXRhLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIGlmICh0aGF0Lm9wdGlvbnMucmVwbGFjZUZpbGVJbnB1dCkge1xuICAgICAgICAgIHRoYXQuX3JlcGxhY2VGaWxlSW5wdXQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoYXQuX3RyaWdnZXIoXG4gICAgICAgICAgICAnY2hhbmdlJyxcbiAgICAgICAgICAgICQuRXZlbnQoJ2NoYW5nZScsIHsgZGVsZWdhdGVkRXZlbnQ6IGUgfSksXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgICAgKSAhPT0gZmFsc2VcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhhdC5fb25BZGQoZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfb25QYXN0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBpdGVtcyA9XG4gICAgICAgICAgZS5vcmlnaW5hbEV2ZW50ICYmXG4gICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEgJiZcbiAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5pdGVtcyxcbiAgICAgICAgZGF0YSA9IHsgZmlsZXM6IFtdIH07XG4gICAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgdmFyIGZpbGUgPSBpdGVtLmdldEFzRmlsZSAmJiBpdGVtLmdldEFzRmlsZSgpO1xuICAgICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICBkYXRhLmZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXG4gICAgICAgICAgICAncGFzdGUnLFxuICAgICAgICAgICAgJC5FdmVudCgncGFzdGUnLCB7IGRlbGVnYXRlZEV2ZW50OiBlIH0pLFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICkgIT09IGZhbHNlXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX29uQWRkKGUsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9vbkRyb3A6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLmRhdGFUcmFuc2ZlciA9IGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyO1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICBkYXRhVHJhbnNmZXIgPSBlLmRhdGFUcmFuc2ZlcixcbiAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgaWYgKGRhdGFUcmFuc2ZlciAmJiBkYXRhVHJhbnNmZXIuZmlsZXMgJiYgZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2dldERyb3BwZWRGaWxlcyhkYXRhVHJhbnNmZXIpLmFsd2F5cyhmdW5jdGlvbiAoZmlsZXMpIHtcbiAgICAgICAgICBkYXRhLmZpbGVzID0gZmlsZXM7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhhdC5fdHJpZ2dlcihcbiAgICAgICAgICAgICAgJ2Ryb3AnLFxuICAgICAgICAgICAgICAkLkV2ZW50KCdkcm9wJywgeyBkZWxlZ2F0ZWRFdmVudDogZSB9KSxcbiAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgKSAhPT0gZmFsc2VcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoYXQuX29uQWRkKGUsIGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9vbkRyYWdPdmVyOiBnZXREcmFnSGFuZGxlcignZHJhZ292ZXInKSxcblxuICAgIF9vbkRyYWdFbnRlcjogZ2V0RHJhZ0hhbmRsZXIoJ2RyYWdlbnRlcicpLFxuXG4gICAgX29uRHJhZ0xlYXZlOiBnZXREcmFnSGFuZGxlcignZHJhZ2xlYXZlJyksXG5cbiAgICBfaW5pdEV2ZW50SGFuZGxlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLl9pc1hIUlVwbG9hZCh0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHRoaXMuX29uKHRoaXMub3B0aW9ucy5kcm9wWm9uZSwge1xuICAgICAgICAgIGRyYWdvdmVyOiB0aGlzLl9vbkRyYWdPdmVyLFxuICAgICAgICAgIGRyb3A6IHRoaXMuX29uRHJvcCxcbiAgICAgICAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIG9uIGRyYWdlbnRlciBpcyByZXF1aXJlZCBmb3IgSUUxMCs6XG4gICAgICAgICAgZHJhZ2VudGVyOiB0aGlzLl9vbkRyYWdFbnRlcixcbiAgICAgICAgICAvLyBkcmFnbGVhdmUgaXMgbm90IHJlcXVpcmVkLCBidXQgYWRkZWQgZm9yIGNvbXBsZXRlbmVzczpcbiAgICAgICAgICBkcmFnbGVhdmU6IHRoaXMuX29uRHJhZ0xlYXZlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbih0aGlzLm9wdGlvbnMucGFzdGVab25lLCB7XG4gICAgICAgICAgcGFzdGU6IHRoaXMuX29uUGFzdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoJC5zdXBwb3J0LmZpbGVJbnB1dCkge1xuICAgICAgICB0aGlzLl9vbih0aGlzLm9wdGlvbnMuZmlsZUlucHV0LCB7XG4gICAgICAgICAgY2hhbmdlOiB0aGlzLl9vbkNoYW5nZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2Rlc3Ryb3lFdmVudEhhbmRsZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9vZmYodGhpcy5vcHRpb25zLmRyb3Bab25lLCAnZHJhZ2VudGVyIGRyYWdsZWF2ZSBkcmFnb3ZlciBkcm9wJyk7XG4gICAgICB0aGlzLl9vZmYodGhpcy5vcHRpb25zLnBhc3RlWm9uZSwgJ3Bhc3RlJyk7XG4gICAgICB0aGlzLl9vZmYodGhpcy5vcHRpb25zLmZpbGVJbnB1dCwgJ2NoYW5nZScpO1xuICAgIH0sXG5cbiAgICBfZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fZGVzdHJveUV2ZW50SGFuZGxlcnMoKTtcbiAgICB9LFxuXG4gICAgX3NldE9wdGlvbjogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciByZWluaXQgPSAkLmluQXJyYXkoa2V5LCB0aGlzLl9zcGVjaWFsT3B0aW9ucykgIT09IC0xO1xuICAgICAgaWYgKHJlaW5pdCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RXZlbnRIYW5kbGVycygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3VwZXIoa2V5LCB2YWx1ZSk7XG4gICAgICBpZiAocmVpbml0KSB7XG4gICAgICAgIHRoaXMuX2luaXRTcGVjaWFsT3B0aW9ucygpO1xuICAgICAgICB0aGlzLl9pbml0RXZlbnRIYW5kbGVycygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdFNwZWNpYWxPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGlmIChvcHRpb25zLmZpbGVJbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuZmlsZUlucHV0ID0gdGhpcy5lbGVtZW50LmlzKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpXG4gICAgICAgICAgPyB0aGlzLmVsZW1lbnRcbiAgICAgICAgICA6IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xuICAgICAgfSBlbHNlIGlmICghKG9wdGlvbnMuZmlsZUlucHV0IGluc3RhbmNlb2YgJCkpIHtcbiAgICAgICAgb3B0aW9ucy5maWxlSW5wdXQgPSAkKG9wdGlvbnMuZmlsZUlucHV0KTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMuZHJvcFpvbmUgaW5zdGFuY2VvZiAkKSkge1xuICAgICAgICBvcHRpb25zLmRyb3Bab25lID0gJChvcHRpb25zLmRyb3Bab25lKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMucGFzdGVab25lIGluc3RhbmNlb2YgJCkpIHtcbiAgICAgICAgb3B0aW9ucy5wYXN0ZVpvbmUgPSAkKG9wdGlvbnMucGFzdGVab25lKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2dldFJlZ0V4cDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCcvJyksXG4gICAgICAgIG1vZGlmaWVycyA9IHBhcnRzLnBvcCgpO1xuICAgICAgcGFydHMuc2hpZnQoKTtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHBhcnRzLmpvaW4oJy8nKSwgbW9kaWZpZXJzKTtcbiAgICB9LFxuXG4gICAgX2lzUmVnRXhwT3B0aW9uOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAga2V5ICE9PSAndXJsJyAmJlxuICAgICAgICAkLnR5cGUodmFsdWUpID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAvXlxcLy4qXFwvW2lnbV17MCwzfSQvLnRlc3QodmFsdWUpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBfaW5pdERhdGFBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGRhdGEgPSB0aGlzLmVsZW1lbnQuZGF0YSgpO1xuICAgICAgLy8gSW5pdGlhbGl6ZSBvcHRpb25zIHNldCB2aWEgSFRNTDUgZGF0YS1hdHRyaWJ1dGVzOlxuICAgICAgJC5lYWNoKHRoaXMuZWxlbWVudFswXS5hdHRyaWJ1dGVzLCBmdW5jdGlvbiAoaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgdmFyIGtleSA9IGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIHZhbHVlO1xuICAgICAgICBpZiAoL15kYXRhLS8udGVzdChrZXkpKSB7XG4gICAgICAgICAgLy8gQ29udmVydCBoeXBoZW4tYXRlZCBrZXkgdG8gY2FtZWxDYXNlOlxuICAgICAgICAgIGtleSA9IGtleS5zbGljZSg1KS5yZXBsYWNlKC8tW2Etel0vZywgZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoMSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWx1ZSA9IGRhdGFba2V5XTtcbiAgICAgICAgICBpZiAodGhhdC5faXNSZWdFeHBPcHRpb24oa2V5LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhhdC5fZ2V0UmVnRXhwKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9pbml0RGF0YUF0dHJpYnV0ZXMoKTtcbiAgICAgIHRoaXMuX2luaXRTcGVjaWFsT3B0aW9ucygpO1xuICAgICAgdGhpcy5fc2xvdHMgPSBbXTtcbiAgICAgIHRoaXMuX3NlcXVlbmNlID0gdGhpcy5fZ2V0WEhSUHJvbWlzZSh0cnVlKTtcbiAgICAgIHRoaXMuX3NlbmRpbmcgPSB0aGlzLl9hY3RpdmUgPSAwO1xuICAgICAgdGhpcy5faW5pdFByb2dyZXNzT2JqZWN0KHRoaXMpO1xuICAgICAgdGhpcy5faW5pdEV2ZW50SGFuZGxlcnMoKTtcbiAgICB9LFxuXG4gICAgLy8gVGhpcyBtZXRob2QgaXMgZXhwb3NlZCB0byB0aGUgd2lkZ2V0IEFQSSBhbmQgYWxsb3dzIHRvIHF1ZXJ5XG4gICAgLy8gdGhlIG51bWJlciBvZiBhY3RpdmUgdXBsb2FkczpcbiAgICBhY3RpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfSxcblxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIGV4cG9zZWQgdG8gdGhlIHdpZGdldCBBUEkgYW5kIGFsbG93cyB0byBxdWVyeVxuICAgIC8vIHRoZSB3aWRnZXQgdXBsb2FkIHByb2dyZXNzLlxuICAgIC8vIEl0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggbG9hZGVkLCB0b3RhbCBhbmQgYml0cmF0ZSBwcm9wZXJ0aWVzXG4gICAgLy8gZm9yIHRoZSBydW5uaW5nIHVwbG9hZHM6XG4gICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcm9ncmVzcztcbiAgICB9LFxuXG4gICAgLy8gVGhpcyBtZXRob2QgaXMgZXhwb3NlZCB0byB0aGUgd2lkZ2V0IEFQSSBhbmQgYWxsb3dzIGFkZGluZyBmaWxlc1xuICAgIC8vIHVzaW5nIHRoZSBmaWxldXBsb2FkIEFQSS4gVGhlIGRhdGEgcGFyYW1ldGVyIGFjY2VwdHMgYW4gb2JqZWN0IHdoaWNoXG4gICAgLy8gbXVzdCBoYXZlIGEgZmlsZXMgcHJvcGVydHkgYW5kIGNhbiBjb250YWluIGFkZGl0aW9uYWwgb3B0aW9uczpcbiAgICAvLyAuZmlsZXVwbG9hZCgnYWRkJywge2ZpbGVzOiBmaWxlc0xpc3R9KTtcbiAgICBhZGQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICBpZiAoIWRhdGEgfHwgdGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmZpbGVJbnB1dCAmJiAhZGF0YS5maWxlcykge1xuICAgICAgICB0aGlzLl9nZXRGaWxlSW5wdXRGaWxlcyhkYXRhLmZpbGVJbnB1dCkuYWx3YXlzKGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICAgIGRhdGEuZmlsZXMgPSBmaWxlcztcbiAgICAgICAgICB0aGF0Ll9vbkFkZChudWxsLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLmZpbGVzID0gJC5tYWtlQXJyYXkoZGF0YS5maWxlcyk7XG4gICAgICAgIHRoaXMuX29uQWRkKG51bGwsIGRhdGEpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBleHBvc2VkIHRvIHRoZSB3aWRnZXQgQVBJIGFuZCBhbGxvd3Mgc2VuZGluZyBmaWxlc1xuICAgIC8vIHVzaW5nIHRoZSBmaWxldXBsb2FkIEFQSS4gVGhlIGRhdGEgcGFyYW1ldGVyIGFjY2VwdHMgYW4gb2JqZWN0IHdoaWNoXG4gICAgLy8gbXVzdCBoYXZlIGEgZmlsZXMgb3IgZmlsZUlucHV0IHByb3BlcnR5IGFuZCBjYW4gY29udGFpbiBhZGRpdGlvbmFsIG9wdGlvbnM6XG4gICAgLy8gLmZpbGV1cGxvYWQoJ3NlbmQnLCB7ZmlsZXM6IGZpbGVzTGlzdH0pO1xuICAgIC8vIFRoZSBtZXRob2QgcmV0dXJucyBhIFByb21pc2Ugb2JqZWN0IGZvciB0aGUgZmlsZSB1cGxvYWQgY2FsbC5cbiAgICBzZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEgJiYgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICBpZiAoZGF0YS5maWxlSW5wdXQgJiYgIWRhdGEuZmlsZXMpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBkZmQgPSAkLkRlZmVycmVkKCksXG4gICAgICAgICAgICBwcm9taXNlID0gZGZkLnByb21pc2UoKSxcbiAgICAgICAgICAgIGpxWEhSLFxuICAgICAgICAgICAgYWJvcnRlZDtcbiAgICAgICAgICBwcm9taXNlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGpxWEhSLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZmQucmVqZWN0KG51bGwsICdhYm9ydCcsICdhYm9ydCcpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLl9nZXRGaWxlSW5wdXRGaWxlcyhkYXRhLmZpbGVJbnB1dCkuYWx3YXlzKGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICAgICAgaWYgKGFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGZkLnJlamVjdCgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmZpbGVzID0gZmlsZXM7XG4gICAgICAgICAgICBqcVhIUiA9IHRoYXQuX29uU2VuZChudWxsLCBkYXRhKTtcbiAgICAgICAgICAgIGpxWEhSLnRoZW4oXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgZGZkLnJlc29sdmUocmVzdWx0LCB0ZXh0U3RhdHVzLCBqcVhIUik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICBkZmQucmVqZWN0KGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2VuaGFuY2VQcm9taXNlKHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuZmlsZXMgPSAkLm1ha2VBcnJheShkYXRhLmZpbGVzKTtcbiAgICAgICAgaWYgKGRhdGEuZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX29uU2VuZChudWxsLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2dldFhIUlByb21pc2UoZmFsc2UsIGRhdGEgJiYgZGF0YS5jb250ZXh0KTtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCIvKlxuICogalF1ZXJ5IElmcmFtZSBUcmFuc3BvcnQgUGx1Z2luXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9qUXVlcnktRmlsZS1VcGxvYWRcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSwgU2ViYXN0aWFuIFRzY2hhblxuICogaHR0cHM6Ly9ibHVlaW1wLm5ldFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKi9cblxuLyogZ2xvYmFsIGRlZmluZSwgcmVxdWlyZSAqL1xuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIEFNRCBtb2R1bGU6XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUvQ29tbW9uSlM6XG4gICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzOlxuICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSk7XG4gIH1cbn0pKGZ1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBIZWxwZXIgdmFyaWFibGUgdG8gY3JlYXRlIHVuaXF1ZSBuYW1lcyBmb3IgdGhlIHRyYW5zcG9ydCBpZnJhbWVzOlxuICB2YXIgY291bnRlciA9IDAsXG4gICAganNvbkFQSSA9ICQsXG4gICAganNvblBhcnNlID0gJ3BhcnNlSlNPTic7XG5cbiAgaWYgKCdKU09OJyBpbiB3aW5kb3cgJiYgJ3BhcnNlJyBpbiBKU09OKSB7XG4gICAganNvbkFQSSA9IEpTT047XG4gICAganNvblBhcnNlID0gJ3BhcnNlJztcbiAgfVxuXG4gIC8vIFRoZSBpZnJhbWUgdHJhbnNwb3J0IGFjY2VwdHMgZm91ciBhZGRpdGlvbmFsIG9wdGlvbnM6XG4gIC8vIG9wdGlvbnMuZmlsZUlucHV0OiBhIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGZpbGUgaW5wdXQgZmllbGRzXG4gIC8vIG9wdGlvbnMucGFyYW1OYW1lOiB0aGUgcGFyYW1ldGVyIG5hbWUgZm9yIHRoZSBmaWxlIGZvcm0gZGF0YSxcbiAgLy8gIG92ZXJyaWRlcyB0aGUgbmFtZSBwcm9wZXJ0eSBvZiB0aGUgZmlsZSBpbnB1dCBmaWVsZChzKSxcbiAgLy8gIGNhbiBiZSBhIHN0cmluZyBvciBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICAvLyBvcHRpb25zLmZvcm1EYXRhOiBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggbmFtZSBhbmQgdmFsdWUgcHJvcGVydGllcyxcbiAgLy8gIGVxdWl2YWxlbnQgdG8gdGhlIHJldHVybiBkYXRhIG9mIC5zZXJpYWxpemVBcnJheSgpLCBlLmcuOlxuICAvLyAgW3tuYW1lOiAnYScsIHZhbHVlOiAxfSwge25hbWU6ICdiJywgdmFsdWU6IDJ9XVxuICAvLyBvcHRpb25zLmluaXRpYWxJZnJhbWVTcmM6IHRoZSBVUkwgb2YgdGhlIGluaXRpYWwgaWZyYW1lIHNyYyxcbiAgLy8gIGJ5IGRlZmF1bHQgc2V0IHRvIFwiamF2YXNjcmlwdDpmYWxzZTtcIlxuICAkLmFqYXhUcmFuc3BvcnQoJ2lmcmFtZScsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuYXN5bmMpIHtcbiAgICAgIC8vIGphdmFzY3JpcHQ6ZmFsc2UgYXMgaW5pdGlhbCBpZnJhbWUgc3JjXG4gICAgICAvLyBwcmV2ZW50cyB3YXJuaW5nIHBvcHVwcyBvbiBIVFRQUyBpbiBJRTY6XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuICAgICAgdmFyIGluaXRpYWxJZnJhbWVTcmMgPSBvcHRpb25zLmluaXRpYWxJZnJhbWVTcmMgfHwgJ2phdmFzY3JpcHQ6ZmFsc2U7JyxcbiAgICAgICAgZm9ybSxcbiAgICAgICAgaWZyYW1lLFxuICAgICAgICBhZGRQYXJhbUNoYXI7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZW5kOiBmdW5jdGlvbiAoXywgY29tcGxldGVDYWxsYmFjaykge1xuICAgICAgICAgIGZvcm0gPSAkKCc8Zm9ybSBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIj48L2Zvcm0+Jyk7XG4gICAgICAgICAgZm9ybS5hdHRyKCdhY2NlcHQtY2hhcnNldCcsIG9wdGlvbnMuZm9ybUFjY2VwdENoYXJzZXQpO1xuICAgICAgICAgIGFkZFBhcmFtQ2hhciA9IC9cXD8vLnRlc3Qob3B0aW9ucy51cmwpID8gJyYnIDogJz8nO1xuICAgICAgICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgc3VwcG9ydHMgR0VUIGFuZCBQT1NUOlxuICAgICAgICAgIGlmIChvcHRpb25zLnR5cGUgPT09ICdERUxFVEUnKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsICsgYWRkUGFyYW1DaGFyICsgJ19tZXRob2Q9REVMRVRFJztcbiAgICAgICAgICAgIG9wdGlvbnMudHlwZSA9ICdQT1NUJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ1BVVCcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9ucy51cmwgKyBhZGRQYXJhbUNoYXIgKyAnX21ldGhvZD1QVVQnO1xuICAgICAgICAgICAgb3B0aW9ucy50eXBlID0gJ1BPU1QnO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnUEFUQ0gnKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsICsgYWRkUGFyYW1DaGFyICsgJ19tZXRob2Q9UEFUQ0gnO1xuICAgICAgICAgICAgb3B0aW9ucy50eXBlID0gJ1BPU1QnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJRSB2ZXJzaW9ucyBiZWxvdyBJRTggY2Fubm90IHNldCB0aGUgbmFtZSBwcm9wZXJ0eSBvZlxuICAgICAgICAgIC8vIGVsZW1lbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQgdG8gdGhlIERPTSxcbiAgICAgICAgICAvLyBzbyB3ZSBzZXQgdGhlIG5hbWUgYWxvbmcgd2l0aCB0aGUgaWZyYW1lIEhUTUwgbWFya3VwOlxuICAgICAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICAgICAgICBpZnJhbWUgPSAkKFxuICAgICAgICAgICAgJzxpZnJhbWUgc3JjPVwiJyArXG4gICAgICAgICAgICAgIGluaXRpYWxJZnJhbWVTcmMgK1xuICAgICAgICAgICAgICAnXCIgbmFtZT1cImlmcmFtZS10cmFuc3BvcnQtJyArXG4gICAgICAgICAgICAgIGNvdW50ZXIgK1xuICAgICAgICAgICAgICAnXCI+PC9pZnJhbWU+J1xuICAgICAgICAgICkub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZmlsZUlucHV0Q2xvbmVzLFxuICAgICAgICAgICAgICBwYXJhbU5hbWVzID0gJC5pc0FycmF5KG9wdGlvbnMucGFyYW1OYW1lKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5wYXJhbU5hbWVcbiAgICAgICAgICAgICAgICA6IFtvcHRpb25zLnBhcmFtTmFtZV07XG4gICAgICAgICAgICBpZnJhbWUub2ZmKCdsb2FkJykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgICAgLy8gV3JhcCBpbiBhIHRyeS9jYXRjaCBibG9jayB0byBjYXRjaCBleGNlcHRpb25zIHRocm93blxuICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBhY2Nlc3MgY3Jvc3MtZG9tYWluIGlmcmFtZSBjb250ZW50czpcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGlmcmFtZS5jb250ZW50cygpO1xuICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBDaHJvbWUgYW5kIEZpcmVmb3ggZG8gbm90IHRocm93IGFuXG4gICAgICAgICAgICAgICAgLy8gZXhjZXB0aW9uIHdoZW4gY2FsbGluZyBpZnJhbWUuY29udGVudHMoKSBvblxuICAgICAgICAgICAgICAgIC8vIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc28gd2UgdW5pZnkgdGhlIHJlc3BvbnNlOlxuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UubGVuZ3RoIHx8ICFyZXNwb25zZVswXS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBUaGUgY29tcGxldGUgY2FsbGJhY2sgcmV0dXJucyB0aGVcbiAgICAgICAgICAgICAgLy8gaWZyYW1lIGNvbnRlbnQgZG9jdW1lbnQgYXMgcmVzcG9uc2Ugb2JqZWN0OlxuICAgICAgICAgICAgICBjb21wbGV0ZUNhbGxiYWNrKDIwMCwgJ3N1Y2Nlc3MnLCB7IGlmcmFtZTogcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICAgIC8vIEZpeCBmb3IgSUUgZW5kbGVzcyBwcm9ncmVzcyBiYXIgYWN0aXZpdHkgYnVnXG4gICAgICAgICAgICAgIC8vIChoYXBwZW5zIG9uIGZvcm0gc3VibWl0cyB0byBpZnJhbWUgdGFyZ2V0cyk6XG4gICAgICAgICAgICAgICQoJzxpZnJhbWUgc3JjPVwiJyArIGluaXRpYWxJZnJhbWVTcmMgKyAnXCI+PC9pZnJhbWU+JykuYXBwZW5kVG8oXG4gICAgICAgICAgICAgICAgZm9ybVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZpbmcgdGhlIGZvcm0gaW4gYSBzZXRUaW1lb3V0IGNhbGxcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgQ2hyb21lJ3MgZGV2ZWxvcGVyIHRvb2xzIHRvIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVzcG9uc2UgcmVzdWx0XG4gICAgICAgICAgICAgICAgZm9ybS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvcm1cbiAgICAgICAgICAgICAgLnByb3AoJ3RhcmdldCcsIGlmcmFtZS5wcm9wKCduYW1lJykpXG4gICAgICAgICAgICAgIC5wcm9wKCdhY3Rpb24nLCBvcHRpb25zLnVybClcbiAgICAgICAgICAgICAgLnByb3AoJ21ldGhvZCcsIG9wdGlvbnMudHlwZSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mb3JtRGF0YSkge1xuICAgICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5mb3JtRGF0YSwgZnVuY3Rpb24gKGluZGV4LCBmaWVsZCkge1xuICAgICAgICAgICAgICAgICQoJzxpbnB1dCB0eXBlPVwiaGlkZGVuXCIvPicpXG4gICAgICAgICAgICAgICAgICAucHJvcCgnbmFtZScsIGZpZWxkLm5hbWUpXG4gICAgICAgICAgICAgICAgICAudmFsKGZpZWxkLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKGZvcm0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgb3B0aW9ucy5maWxlSW5wdXQgJiZcbiAgICAgICAgICAgICAgb3B0aW9ucy5maWxlSW5wdXQubGVuZ3RoICYmXG4gICAgICAgICAgICAgIG9wdGlvbnMudHlwZSA9PT0gJ1BPU1QnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZmlsZUlucHV0Q2xvbmVzID0gb3B0aW9ucy5maWxlSW5wdXQuY2xvbmUoKTtcbiAgICAgICAgICAgICAgLy8gSW5zZXJ0IGEgY2xvbmUgZm9yIGVhY2ggZmlsZSBpbnB1dCBmaWVsZDpcbiAgICAgICAgICAgICAgb3B0aW9ucy5maWxlSW5wdXQuYWZ0ZXIoZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVJbnB1dENsb25lc1tpbmRleF07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJhbU5hbWUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpbGVJbnB1dC5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKCduYW1lJywgcGFyYW1OYW1lc1tpbmRleF0gfHwgb3B0aW9ucy5wYXJhbU5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIEFwcGVuZGluZyB0aGUgZmlsZSBpbnB1dCBmaWVsZHMgdG8gdGhlIGhpZGRlbiBmb3JtXG4gICAgICAgICAgICAgIC8vIHJlbW92ZXMgdGhlbSBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uOlxuICAgICAgICAgICAgICBmb3JtXG4gICAgICAgICAgICAgICAgLmFwcGVuZChvcHRpb25zLmZpbGVJbnB1dClcbiAgICAgICAgICAgICAgICAucHJvcCgnZW5jdHlwZScsICdtdWx0aXBhcnQvZm9ybS1kYXRhJylcbiAgICAgICAgICAgICAgICAvLyBlbmN0eXBlIG11c3QgYmUgc2V0IGFzIGVuY29kaW5nIGZvciBJRTpcbiAgICAgICAgICAgICAgICAucHJvcCgnZW5jb2RpbmcnLCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpO1xuICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIEhUTUw1IGZvcm0gYXR0cmlidXRlIGZyb20gdGhlIGlucHV0KHMpOlxuICAgICAgICAgICAgICBvcHRpb25zLmZpbGVJbnB1dC5yZW1vdmVBdHRyKCdmb3JtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIFN1Ym1pdHRpbmcgdGhlIGZvcm0gaW4gYSBzZXRUaW1lb3V0IGNhbGwgZml4ZXMgYW4gaXNzdWUgd2l0aFxuICAgICAgICAgICAgICAvLyBTYWZhcmkgMTMgbm90IHRyaWdnZXJpbmcgdGhlIGlmcmFtZSBsb2FkIGV2ZW50IGFmdGVyIHJlc2V0dGluZ1xuICAgICAgICAgICAgICAvLyB0aGUgbG9hZCBldmVudCBoYW5kbGVyLCBzZWUgYWxzbzpcbiAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvalF1ZXJ5LUZpbGUtVXBsb2FkL2lzc3Vlcy8zNjMzXG4gICAgICAgICAgICAgIGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICAgIC8vIEluc2VydCB0aGUgZmlsZSBpbnB1dCBmaWVsZHMgYXQgdGhlaXIgb3JpZ2luYWwgbG9jYXRpb25cbiAgICAgICAgICAgICAgLy8gYnkgcmVwbGFjaW5nIHRoZSBjbG9uZXMgd2l0aCB0aGUgb3JpZ2luYWxzOlxuICAgICAgICAgICAgICBpZiAoZmlsZUlucHV0Q2xvbmVzICYmIGZpbGVJbnB1dENsb25lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpbGVJbnB1dC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjbG9uZSA9ICQoZmlsZUlucHV0Q2xvbmVzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBuYW1lIGFuZCBmb3JtIHByb3BlcnRpZXM6XG4gICAgICAgICAgICAgICAgICAkKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICAucHJvcCgnbmFtZScsIGNsb25lLnByb3AoJ25hbWUnKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Zvcm0nLCBjbG9uZS5hdHRyKCdmb3JtJykpO1xuICAgICAgICAgICAgICAgICAgY2xvbmUucmVwbGFjZVdpdGgoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JtLmFwcGVuZChpZnJhbWUpLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICB9LFxuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIC8vIGphdmFzY3JpcHQ6ZmFsc2UgYXMgaWZyYW1lIHNyYyBhYm9ydHMgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgIC8vIGFuZCBwcmV2ZW50cyB3YXJuaW5nIHBvcHVwcyBvbiBIVFRQUyBpbiBJRTYuXG4gICAgICAgICAgICBpZnJhbWUub2ZmKCdsb2FkJykucHJvcCgnc3JjJywgaW5pdGlhbElmcmFtZVNyYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmb3JtKSB7XG4gICAgICAgICAgICBmb3JtLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRoZSBpZnJhbWUgdHJhbnNwb3J0IHJldHVybnMgdGhlIGlmcmFtZSBjb250ZW50IGRvY3VtZW50IGFzIHJlc3BvbnNlLlxuICAvLyBUaGUgZm9sbG93aW5nIGFkZHMgY29udmVydGVycyBmcm9tIGlmcmFtZSB0byB0ZXh0LCBqc29uLCBodG1sLCB4bWxcbiAgLy8gYW5kIHNjcmlwdC5cbiAgLy8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgQ29udGVudC1UeXBlIGZvciBKU09OIHJlc3BvbnNlcyBoYXMgdG8gYmUgdGV4dC9wbGFpblxuICAvLyBvciB0ZXh0L2h0bWwsIGlmIHRoZSBicm93c2VyIGRvZXNuJ3QgaW5jbHVkZSBhcHBsaWNhdGlvbi9qc29uIGluIHRoZVxuICAvLyBBY2NlcHQgaGVhZGVyLCBlbHNlIElFIHdpbGwgc2hvdyBhIGRvd25sb2FkIGRpYWxvZy5cbiAgLy8gVGhlIENvbnRlbnQtVHlwZSBmb3IgWE1MIHJlc3BvbnNlcyBvbiB0aGUgb3RoZXIgaGFuZCBoYXMgdG8gYmUgYWx3YXlzXG4gIC8vIGFwcGxpY2F0aW9uL3htbCBvciB0ZXh0L3htbCwgc28gSUUgcHJvcGVybHkgcGFyc2VzIHRoZSBYTUwgcmVzcG9uc2UuXG4gIC8vIFNlZSBhbHNvXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL2pRdWVyeS1GaWxlLVVwbG9hZC93aWtpL1NldHVwI2NvbnRlbnQtdHlwZS1uZWdvdGlhdGlvblxuICAkLmFqYXhTZXR1cCh7XG4gICAgY29udmVydGVyczoge1xuICAgICAgJ2lmcmFtZSB0ZXh0JzogZnVuY3Rpb24gKGlmcmFtZSkge1xuICAgICAgICByZXR1cm4gaWZyYW1lICYmICQoaWZyYW1lWzBdLmJvZHkpLnRleHQoKTtcbiAgICAgIH0sXG4gICAgICAnaWZyYW1lIGpzb24nOiBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICAgIHJldHVybiBpZnJhbWUgJiYganNvbkFQSVtqc29uUGFyc2VdKCQoaWZyYW1lWzBdLmJvZHkpLnRleHQoKSk7XG4gICAgICB9LFxuICAgICAgJ2lmcmFtZSBodG1sJzogZnVuY3Rpb24gKGlmcmFtZSkge1xuICAgICAgICByZXR1cm4gaWZyYW1lICYmICQoaWZyYW1lWzBdLmJvZHkpLmh0bWwoKTtcbiAgICAgIH0sXG4gICAgICAnaWZyYW1lIHhtbCc6IGZ1bmN0aW9uIChpZnJhbWUpIHtcbiAgICAgICAgdmFyIHhtbERvYyA9IGlmcmFtZSAmJiBpZnJhbWVbMF07XG4gICAgICAgIHJldHVybiB4bWxEb2MgJiYgJC5pc1hNTERvYyh4bWxEb2MpXG4gICAgICAgICAgPyB4bWxEb2NcbiAgICAgICAgICA6ICQucGFyc2VYTUwoXG4gICAgICAgICAgICAgICh4bWxEb2MuWE1MRG9jdW1lbnQgJiYgeG1sRG9jLlhNTERvY3VtZW50LnhtbCkgfHxcbiAgICAgICAgICAgICAgICAkKHhtbERvYy5ib2R5KS5odG1sKClcbiAgICAgICAgICAgICk7XG4gICAgICB9LFxuICAgICAgJ2lmcmFtZSBzY3JpcHQnOiBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICAgIHJldHVybiBpZnJhbWUgJiYgJC5nbG9iYWxFdmFsKCQoaWZyYW1lWzBdLmJvZHkpLnRleHQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuIiwiZnVuY3Rpb24gaW5pdGlhbGl6ZUF0dGFjaGVkTWVkaWFGaWVsZChlbCwgaWRPZlVwbG9hZEJ1dHRvbiwgdXBsb2FkQWN0aW9uLCBtZWRpYUl0ZW1VcmwsIGFsbG93TXVsdGlwbGUsIGFsbG93TWVkaWFUZXh0LCBhbGxvd0NlbnRlckNyb3BwaW5nLCB0ZW1wVXBsb2FkRm9sZGVyKSB7XG5cbiAgICB2YXIgdGFyZ2V0ID0gJChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgkKGVsKS5kYXRhKCdmb3InKSkpO1xuICAgIHZhciBpbml0aWFsUGF0aHMgPSB0YXJnZXQuZGF0YShcImluaXRcIik7XG5cbiAgICB2YXIgbWVkaWFGaWVsZEVkaXRvciA9ICQoZWwpO1xuICAgIHZhciBpZHByZWZpeCA9IG1lZGlhRmllbGRFZGl0b3IuYXR0cihcImlkXCIpO1xuICAgIHZhciBtZWRpYUZpZWxkQXBwO1xuXG4gICAgbWVkaWFGaWVsZEFwcHMucHVzaChtZWRpYUZpZWxkQXBwID0gbmV3IFZ1ZSh7XG4gICAgICAgIGVsOiBtZWRpYUZpZWxkRWRpdG9yLmdldCgwKSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVkaWFJdGVtczogW10sXG4gICAgICAgICAgICBzZWxlY3RlZE1lZGlhOiBudWxsLFxuICAgICAgICAgICAgc21hbGxUaHVtYnM6IGZhbHNlLFxuICAgICAgICAgICAgaWRQcmVmaXg6IGlkcHJlZml4LFxuICAgICAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgYWxsb3dNZWRpYVRleHQ6IGFsbG93TWVkaWFUZXh0LFxuICAgICAgICAgICAgYmFja3VwTWVkaWFUZXh0OiAnJyxcbiAgICAgICAgICAgIGFsbG93Q2VudGVyQ3JvcHBpbmc6IGFsbG93Q2VudGVyQ3JvcHBpbmcsXG4gICAgICAgICAgICBiYWNrdXBDZW50ZXI6IFsgbnVsbCwgbnVsbCBdXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5jdXJyZW50UHJlZnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtZWRpYUZpZWxkUHJlZnMnKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgICAgICBwYXRoczoge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVkaWFQYXRocyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpbml0aWFsUGF0aHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeC5tZWRpYVBhdGggPT09ICdub3QtZm91bmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFQYXRocy5wdXNoKHsgcGF0aDogeC5tZWRpYVBhdGgsIGlzUmVtb3ZlZDogeC5pc1JlbW92ZWQsIGlzTmV3OiB4LmlzTmV3LCBtZWRpYVRleHQ6IHgubWVkaWFUZXh0LCBjZW50ZXI6IHguY2VudGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1lZGlhUGF0aHMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhUGF0aHMgPSB2YWx1ZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWduYWwgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFQYXRocy5mb3JFYWNoKGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgbmFtZTogJyAnICsgeC5wYXRoLCBtaW1lOiAnJywgbWVkaWFQYXRoOiAnJyB9KTsgLy8gZG9uJ3QgcmVtb3ZlIHRoZSBzcGFjZS4gU29tZXRoaW5nIGRpZmZlcmVudCBpcyBuZWVkZWQgb3IgaXQgd29udCByZWFjdCB3aGVuIHRoZSByZWFsIG5hbWUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkLndoZW4oc2lnbmFsKS5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1lZGlhSXRlbVVybCArIFwiP3BhdGg9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoeC5wYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudnVla2V5ID0gZGF0YS5uYW1lICsgaS50b1N0cmluZygpOyAvLyBCZWNhdXNlIGEgdW5pcXVlIGtleSBpcyByZXF1aXJlZCBieSBWdWUgb24gdi1mb3IgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1lZGlhVGV4dCA9IHgubWVkaWFUZXh0OyAvLyBUaGlzIHZhbHVlIGlzIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBhamF4IGNhbGwuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNlbnRlciA9IHguY2VudGVyOyAvLyBUaGlzIHZhbHVlIGlzIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBhamF4IGNhbGwuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSArK2xlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZWRpYUl0ZW1zLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMSwgeyBuYW1lOiB4LnBhdGgsIG1pbWU6ICcnLCBtZWRpYVBhdGg6ICdub3QtZm91bmQnLCBtZWRpYVRleHQ6ICcnLCBjZW50ZXI6IFsgbnVsbCwgbnVsbCBdICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09ICsrbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lZGlhSXRlbXMucHVzaCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGVTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5zZWxlY3RlZE1lZGlhLnNpemUgLyAxMDI0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5BZGRNZWRpYTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBub25SZW1vdmVkTWVkaWFJdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tZWRpYUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tZWRpYUl0ZW1zW2ldLmlzUmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9uUmVtb3ZlZE1lZGlhSXRlbXMucHVzaCh0aGlzLm1lZGlhSXRlbXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vblJlbW92ZWRNZWRpYUl0ZW1zLmxlbmd0aCA9PT0gMCB8fCBub25SZW1vdmVkTWVkaWFJdGVtcy5sZW5ndGggPiAwICYmIGFsbG93TXVsdGlwbGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGh1bWJTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc21hbGxUaHVtYnMgPyAxMjAgOiAyNDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3VycmVudFByZWZzOiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbWFsbFRodW1iczogdGhpcy5zbWFsbFRodW1ic1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3UHJlZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdQcmVmcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc21hbGxUaHVtYnMgPSBuZXdQcmVmcy5zbWFsbFRodW1icztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5wYXRocyA9IGluaXRpYWxQYXRocztcblxuICAgICAgICAgICAgc2VsZi4kb24oJ3NlbGVjdEFuZERlbGV0ZU1lZGlhUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RBbmREZWxldGVNZWRpYShtZWRpYSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi4kb24oJ3NlbGVjdE1lZGlhUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RNZWRpYShtZWRpYSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gJyMnICsgaWRPZlVwbG9hZEJ1dHRvbjtcbiAgICAgICAgICAgIHZhciBlZGl0b3JJZCA9IG1lZGlhRmllbGRFZGl0b3IuYXR0cignaWQnKTtcblxuICAgICAgICAgICAgJChzZWxlY3RvcikuZmlsZXVwbG9hZCh7XG4gICAgICAgICAgICAgICAgbGltaXRDb25jdXJyZW50VXBsb2FkczogMjAsXG4gICAgICAgICAgICAgICAgZHJvcFpvbmU6ICQoJyMnICsgZWRpdG9ySWQpLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgdXJsOiB1cGxvYWRBY3Rpb24sXG4gICAgICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBkYXRhLmZpbGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbGVzW2ldLnVwbG9hZE5hbWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ2V0VW5pcXVlSWQoKSArIGRhdGEuZmlsZXNbaV0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9ybURhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFudGlGb3JnZXJ5VG9rZW4gPSAkKFwiaW5wdXRbbmFtZT1fX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbl1cIikudmFsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3BhdGgnLCB2YWx1ZTogdGVtcFVwbG9hZEZvbGRlciB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4nLCB2YWx1ZTogYW50aUZvcmdlcnlUb2tlbiB9XG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TWVkaWFJdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3Jtc2cgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0LmZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5yZXN1bHQuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdC5maWxlc1tpXS5pc05ldyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBlcnJvciBpcyBkZWZpbmVkIHByb2JhYmx5IHRoZSBmaWxlIHR5cGUgaXMgbm90IGFsbG93ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnJlc3VsdC5maWxlc1tpXS5lcnJvciA9PT0gdW5kZWZpbmVkIHx8IGRhdGEucmVzdWx0LmZpbGVzW2ldLmVycm9yID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdNZWRpYUl0ZW1zLnB1c2goZGF0YS5yZXN1bHQuZmlsZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3Jtc2cgKz0gZGF0YS5yZXN1bHQuZmlsZXNbaV0uZXJyb3IgKyBcIlxcblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3Jtc2cgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KGVycm9ybXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdNZWRpYUl0ZW1zLmxlbmd0aCA+IDEgJiYgYWxsb3dNdWx0aXBsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCQoJyNvbmx5T25lSXRlbU1lc3NhZ2UnKS52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUZpZWxkQXBwLm1lZGlhSXRlbXMucHVzaChuZXdNZWRpYUl0ZW1zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRmllbGRBcHAuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFGaWVsZEFwcC5tZWRpYUl0ZW1zID0gbWVkaWFGaWVsZEFwcC5tZWRpYUl0ZW1zLmNvbmNhdChuZXdNZWRpYUl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRmllbGRBcHAuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igb24gdXBsb2FkISEnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanFYSFIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBzZWxlY3RNZWRpYTogZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhID0gbWVkaWE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0VW5pcXVlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlU2VsZWN0ZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRNZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLm1lZGlhSXRlbXMgJiYgdGhpcy5tZWRpYUl0ZW1zLmluZGV4T2YodGhpcy5zZWxlY3RlZE1lZGlhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0aGlzLm1lZGlhSXRlbXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZC5pc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzLm1lZGlhSXRlbXMuc3BsaWNlKFtpbmRleF0sIDEsIHJlbW92ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYUl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZW1vdmUgYnV0dG9uIGNhbiBhbHNvIHJlbW92ZSBhIHVuaXF1ZSBtZWRpYSBpdGVtXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lZGlhSXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkID0gdGhpcy5tZWRpYUl0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQuaXNSZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5tZWRpYUl0ZW1zLnNwbGljZSgwLCAxLCByZW1vdmVkKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFJdGVtcy5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhID0gbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaG93TWVkaWFUZXh0TW9kYWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICQodGhpcy4kcmVmcy5tZWRpYVRleHRNb2RhbCkubW9kYWwoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2t1cE1lZGlhVGV4dCA9IHRoaXMuc2VsZWN0ZWRNZWRpYS5tZWRpYVRleHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hvd0NlbnRlckNyb3BwaW5nTW9kYWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICQodGhpcy4kcmVmcy5jZW50ZXJDcm9wcGluZ01vZGFsKS5tb2RhbCgpO1xuICAgICAgICAgICAgICAgIC8vIENhdXNlIGEgcmVmcmVzaCB0byByZWNhbGMgaGVpZ2h0cy5cbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMCwgdGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlclswXSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIsIDEsIHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXJbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja3VwQ2VudGVyID0gdGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWxNZWRpYVRleHRNb2RhbDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzLiRyZWZzLm1lZGlhVGV4dE1vZGFsKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYS5tZWRpYVRleHQgPSB0aGlzLmJhY2t1cE1lZGlhVGV4dDtcbiAgICAgICAgICAgIH0sICAgICAgICAgICBcbiAgICAgICAgICAgIGNhbmNlbENlbnRlckNyb3BwaW5nTW9kYWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICQodGhpcy4kcmVmcy5jZW50ZXJDcm9wcGluZ01vZGFsKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIgPSB0aGlzLmJhY2t1cENlbnRlcjtcbiAgICAgICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgICBjbGVhckNlbnRlckNyb3A6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMSwgbnVsbCk7XG4gICAgICAgICAgICB9LCAgXG4gICAgICAgICAgICBvbkNyb3BEcm9wOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXMuJHJlZnMuY3JvcEltYWdlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIsIDAsIGV2ZW50Lm9mZnNldFggLyBpbWFnZS5jbGllbnRXaWR0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIsIDEsIGV2ZW50Lm9mZnNldFkgLyBpbWFnZS5jbGllbnRIZWlnaHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyb3BMZWZ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJHJlZnMuY3JvcEltYWdlICYmIHRoaXMuc2VsZWN0ZWRNZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyWzBdICogdGhpcy4kcmVmcy5jcm9wSW1hZ2UuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IDE3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDE3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbiArICdweCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAgICAgICAgICAgIFxuICAgICAgICAgICAgY3JvcFRvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiRyZWZzLmNyb3BJbWFnZSAmJiB0aGlzLnNlbGVjdGVkTWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlclsxXSAqIHRoaXMuJHJlZnMuY3JvcEltYWdlLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDwgMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gMTU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRDcm9wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSB0aGlzLiRyZWZzLmNyb3BJbWFnZTtcbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMCwgZXZlbnQub2Zmc2V0WCAvIGltYWdlLmNsaWVudFdpZHRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMSwgZXZlbnQub2Zmc2V0WSAvIGltYWdlLmNsaWVudEhlaWdodCk7XG4gICAgICAgICAgICB9LCAgICAgICAgICBcbiAgICAgICAgICAgIGFkZE1lZGlhRmlsZXM6IGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICAgICAgICAgIGlmICgoZmlsZXMubGVuZ3RoID4gMSkgJiYgKGFsbG93TXVsdGlwbGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgkKCcjb25seU9uZUl0ZW1NZXNzYWdlJykudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICBtZWRpYUZpZWxkQXBwLm1lZGlhSXRlbXMucHVzaChmaWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhRmllbGRBcHAuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhRmllbGRBcHAubWVkaWFJdGVtcyA9IG1lZGlhRmllbGRBcHAubWVkaWFJdGVtcy5jb25jYXQoZmlsZXMpO1xuICAgICAgICAgICAgICAgICAgICBtZWRpYUZpZWxkQXBwLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0QW5kRGVsZXRlTWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkTWVkaWEgPSBtZWRpYTtcbiAgICAgICAgICAgICAgICAvLyBzZXRUaW1lb3V0IGJlY2F1c2Ugc29tZXRpbWVzIFxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZVNlbGVjdGVkIHdhcyBjYWxsZWQgZXZlbiBiZWZvcmUgdGhlIG1lZGlhIHdhcyBzZXQuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YXRjaDoge1xuICAgICAgICAgICAgbWVkaWFJdGVtczoge1xuICAgICAgICAgICAgICAgIGRlZXA6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlciAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgcHJldmlldyByZW5kZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICQoZG9jdW1lbnQpLnRyaWdnZXIoJ2NvbnRlbnRwcmV2aWV3OnJlbmRlcicpOyB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgY3VycmVudFByZWZzOiBmdW5jdGlvbiAobmV3UHJlZnMpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWVkaWFGaWVsZFByZWZzJywgSlNPTi5zdHJpbmdpZnkobmV3UHJlZnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcbn1cbiIsIi8vIDxtZWRpYS1maWVsZC10aHVtYnMtY29udGFpbmVyPiBjb21wb25lbnQgXG4vLyBkaWZmZXJlbnQgbWVkaWEgZmllbGQgZWRpdG9ycyBzaGFyZSB0aGlzIGNvbXBvbmVudCB0byBwcmVzZW50IHRoZSB0aHVtYnMuXG5WdWUuY29tcG9uZW50KCdtZWRpYUZpZWxkVGh1bWJzQ29udGFpbmVyJywge1xuICAgIHRlbXBsYXRlOiAnXFxcbiAgICAgICA8ZGl2IDppZD1cImlkUHJlZml4ICsgXFwnX21lZGlhQ29udGFpbmVyTWFpblxcJ1wiIHYtY2xvYWs+XFxcbiAgICAgICAgIDxkaXYgdi1pZj1cIm1lZGlhSXRlbXMubGVuZ3RoIDwgMVwiIGNsYXNzPVwiY2FyZCB0ZXh0LWNlbnRlclwiPlxcXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz0gXCJjYXJkLWJvZHlcIiA+XFxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImhpbnRcIj57e1Qubm9JbWFnZXN9fTwvc3Bhbj5cXFxuICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgPGRyYWdnYWJsZSA6bGlzdD1cIm1lZGlhSXRlbXNcIiB0YWc9XCJvbFwiIGNsYXNzPVwicm93IG1lZGlhLWl0ZW1zLWdyaWRcIiA+XFxcbiAgICAgICAgICAgIDxsaSB2LWZvcj1cIm1lZGlhIGluIG1lZGlhSXRlbXNcIlxcXG4gICAgICAgICAgICAgICAgOmtleT1cIm1lZGlhLnZ1ZWtleVwiIFxcXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtZWRpYS1jb250YWluZXItbWFpbi1saXN0LWl0ZW0gY2FyZFwiXFxcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7d2lkdGg6IHRodW1iU2l6ZSArIDIgKyBcXCdweFxcJ31cIlxcXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwie3NlbGVjdGVkOiBzZWxlY3RlZE1lZGlhID09IG1lZGlhfVwiXFxcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwic2VsZWN0TWVkaWEobWVkaWEpXCIgdi1pZj1cIiFtZWRpYS5pc1JlbW92ZWRcIj5cXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJtZWRpYS5tZWRpYVBhdGghPT0gXFwnbm90LWZvdW5kXFwnXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aHVtYi1jb250YWluZXJcIiA6c3R5bGU9XCJ7aGVpZ2h0OiB0aHVtYlNpemUgKyBcXCdweFxcJ31cIiA+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHYtaWY9XCJtZWRpYS5taW1lLnN0YXJ0c1dpdGgoXFwnaW1hZ2VcXCcpXCIgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPVwiYnVpbGRNZWRpYVVybChtZWRpYS51cmwsIHRodW1iU2l6ZSlcIiBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLW1pbWU9XCJtZWRpYS5taW1lXCJcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT1cInttYXhIZWlnaHQ6IHRodW1iU2l6ZSArIFxcJ3B4XFwnICwgbWF4V2lkdGg6IHRodW1iU2l6ZSArIFxcJ3B4XFwnfVwiLz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhIGZhLWZpbGUtbyBmYS1sZ1wiIDpkYXRhLW1pbWU9XCJtZWRpYS5taW1lXCI+PC9pPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVkaWEtY29udGFpbmVyLW1haW4taXRlbS10aXRsZSBjYXJkLWJvZHlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLWxpZ2h0IGJ0bi1zbSBmbG9hdC1yaWdodCBpbmxpbmUtbWVkaWEtYnV0dG9uIGRlbGV0ZS1idXR0b25cIlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uOmNsaWNrLnN0b3A9XCJzZWxlY3RBbmREZWxldGVNZWRpYShtZWRpYSlcIj48aSBjbGFzcz1cImZhIGZhLXRyYXNoXCI+PC9pPjwvYT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSA6aHJlZj1cIm1lZGlhLnVybFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBidG4tc20gZmxvYXQtcmlnaHQgaW5saW5lLW1lZGlhLWJ1dHRvbiB2aWV3LWJ1dHRvblwiXCI+PGkgY2xhc3M9XCJmYSBmYS1kb3dubG9hZFwiPjwvaT48L2E+IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWVkaWEtZmlsZW5hbWUgY2FyZC10ZXh0IHNtYWxsXCIgOnRpdGxlPVwibWVkaWEubWVkaWFQYXRoXCI+e3sgbWVkaWEuaXNOZXcgPyBtZWRpYS5uYW1lLnN1YnN0cigzNikgOiBtZWRpYS5uYW1lIH19PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2U+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aHVtYi1jb250YWluZXIgZmxleC1jb2x1bW5cIiA6c3R5bGU9XCJ7aGVpZ2h0OiB0aHVtYlNpemUgKyBcXCdweFxcJ31cIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYmFuIHRleHQtZGFuZ2VyIGQtYmxvY2tcIj48L2k+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZGFuZ2VyIHNtYWxsIGQtYmxvY2tcIj57eyBULm1lZGlhTm90Rm91bmQgfX08L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZGFuZ2VyIHNtYWxsIGQtYmxvY2sgdGV4dC1jZW50ZXJcIj57eyBULmRpc2NhcmRXYXJuaW5nIH19PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lZGlhLWNvbnRhaW5lci1tYWluLWl0ZW0tdGl0bGUgY2FyZC1ib2R5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLWxpZ2h0IGJ0bi1zbSBmbG9hdC1yaWdodCBpbmxpbmUtbWVkaWEtYnV0dG9uIGRlbGV0ZS1idXR0b25cIlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb246Y2xpY2suc3RvcD1cInNlbGVjdEFuZERlbGV0ZU1lZGlhKG1lZGlhKVwiPjxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIj48L2k+PC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZWRpYS1maWxlbmFtZSBjYXJkLXRleHQgc21hbGwgdGV4dC1kYW5nZXJcIiA6dGl0bGU9XCJtZWRpYS5uYW1lXCI+e3sgbWVkaWEubmFtZSB9fTwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgPC9saT5cXFxuICAgICAgICAgPC9kcmFnZ2FibGU+XFxcbiAgICAgICA8L2Rpdj5cXFxuICAgICcsXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgVDoge31cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIG1lZGlhSXRlbXM6IEFycmF5LFxuICAgICAgICBzZWxlY3RlZE1lZGlhOiBPYmplY3QsXG4gICAgICAgIHRodW1iU2l6ZTogTnVtYmVyLFxuICAgICAgICBpZFByZWZpeDogU3RyaW5nXG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIHJldHJpZXZpbmcgbG9jYWxpemVkIHN0cmluZ3MgZnJvbSB2aWV3XG4gICAgICAgIHNlbGYuVC5tZWRpYU5vdEZvdW5kID0gJCgnI3QtbWVkaWEtbm90LWZvdW5kJykudmFsKCk7XG4gICAgICAgIHNlbGYuVC5kaXNjYXJkV2FybmluZyA9ICQoJyN0LWRpc2NhcmQtd2FybmluZycpLnZhbCgpO1xuICAgICAgICBzZWxmLlQubm9JbWFnZXMgPSAkKCcjdC1uby1pbWFnZXMnKS52YWwoKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc2VsZWN0QW5kRGVsZXRlTWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kcGFyZW50LiRlbWl0KCdzZWxlY3RBbmREZWxldGVNZWRpYVJlcXVlc3RlZCcsIG1lZGlhKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0TWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgdGhpcy4kcGFyZW50LiRlbWl0KCdzZWxlY3RNZWRpYVJlcXVlc3RlZCcsIG1lZGlhKTtcbiAgICAgICAgfSxcbiAgICAgICAgYnVpbGRNZWRpYVVybDogZnVuY3Rpb24gKHVybCwgdGh1bWJTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKCc/JykgPT0gLTEgPyAnPycgOiAnJicpICsgJ3dpZHRoPScgKyB0aHVtYlNpemUgKyAnJmhlaWdodD0nICsgdGh1bWJTaXplO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iLCJmdW5jdGlvbiBpbml0aWFsaXplTWVkaWFGaWVsZChlbCwgbW9kYWxCb2R5RWxlbWVudCwgbWVkaWFJdGVtVXJsLCBhbGxvd011bHRpcGxlLCBhbGxvd01lZGlhVGV4dCwgYWxsb3dDZW50ZXJDcm9wcGluZykge1xuXG4gICAgdmFyIHRhcmdldCA9ICQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJChlbCkuZGF0YSgnZm9yJykpKTtcbiAgICB2YXIgaW5pdGlhbFBhdGhzID0gdGFyZ2V0LmRhdGEoXCJpbml0XCIpO1xuXG4gICAgdmFyIG1lZGlhRmllbGRFZGl0b3IgPSAkKGVsKTtcbiAgICB2YXIgaWRwcmVmaXggPSBtZWRpYUZpZWxkRWRpdG9yLmF0dHIoXCJpZFwiKTtcbiAgICB2YXIgbWVkaWFGaWVsZEFwcDtcblxuICAgIG1lZGlhRmllbGRBcHBzLnB1c2gobWVkaWFGaWVsZEFwcCA9IG5ldyBWdWUoe1xuICAgICAgICBlbDogbWVkaWFGaWVsZEVkaXRvci5nZXQoMCksXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1lZGlhSXRlbXM6IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWRNZWRpYTogbnVsbCxcbiAgICAgICAgICAgIHNtYWxsVGh1bWJzOiBmYWxzZSxcbiAgICAgICAgICAgIGlkUHJlZml4OiBpZHByZWZpeCxcbiAgICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93TWVkaWFUZXh0OiBhbGxvd01lZGlhVGV4dCxcbiAgICAgICAgICAgIGJhY2t1cE1lZGlhVGV4dDogJycsXG4gICAgICAgICAgICBhbGxvd0NlbnRlckNyb3BwaW5nOiBhbGxvd0NlbnRlckNyb3BwaW5nLFxuICAgICAgICAgICAgYmFja3VwQ2VudGVyOiBbIG51bGwsIG51bGwgXVxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHNlbGYuY3VycmVudFByZWZzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWVkaWFGaWVsZFByZWZzJykpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wdXRlZDoge1xuICAgICAgICAgICAgcGF0aHM6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhUGF0aHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaW5pdGlhbFBhdGhzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHgubWVkaWFQYXRoID09PSAnbm90LWZvdW5kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhUGF0aHMucHVzaCh7IHBhdGg6IHgubWVkaWFQYXRoLCBtZWRpYVRleHQ6IHgubWVkaWFUZXh0LCBjZW50ZXI6IHguY2VudGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1lZGlhUGF0aHMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhUGF0aHMgPSB2YWx1ZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWduYWwgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFQYXRocy5mb3JFYWNoKGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHsgbmFtZTogJyAnICsgeC5wYXRoLCBtaW1lOiAnJywgbWVkaWFQYXRoOiAnJyB9KTsgLy8gZG9uJ3QgcmVtb3ZlIHRoZSBzcGFjZS4gU29tZXRoaW5nIGRpZmZlcmVudCBpcyBuZWVkZWQgb3IgaXQgd29udCByZWFjdCB3aGVuIHRoZSByZWFsIG5hbWUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkLndoZW4oc2lnbmFsKS5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1lZGlhSXRlbVVybCArIFwiP3BhdGg9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoeC5wYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudnVla2V5ID0gZGF0YS5uYW1lICsgaS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tZWRpYVRleHQgPSB4Lm1lZGlhVGV4dDsgLy8gVGhpcyB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZnJvbSB0aGUgYWpheCBjYWxsLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jZW50ZXIgPSB4LmNlbnRlcjsgLy8gVGhpcyB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZnJvbSB0aGUgYWpheCBjYWxsLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuc3BsaWNlKGksIDEsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gKytsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFJdGVtcy5wdXNoKHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMSwgeyBuYW1lOiB4LnBhdGgsIG1pbWU6ICcnLCBtZWRpYVBhdGg6ICdub3QtZm91bmQnLCBtZWRpYVRleHQ6ICcnLCBjZW50ZXI6IFsgbnVsbCwgbnVsbCBdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gKytsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFJdGVtcy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsZVNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLnNlbGVjdGVkTWVkaWEuc2l6ZSAvIDEwMjQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbkFkZE1lZGlhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFJdGVtcy5sZW5ndGggPT09IDAgfHwgdGhpcy5tZWRpYUl0ZW1zLmxlbmd0aCA+IDAgJiYgYWxsb3dNdWx0aXBsZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aHVtYlNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zbWFsbFRodW1icyA/IDEyMCA6IDI0MDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJyZW50UHJlZnM6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsVGh1bWJzOiB0aGlzLnNtYWxsVGh1bWJzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQcmVmcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1ByZWZzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbWFsbFRodW1icyA9IG5ld1ByZWZzLnNtYWxsVGh1bWJzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5wYXRocyA9IGluaXRpYWxQYXRocztcblxuICAgICAgICAgICAgc2VsZi4kb24oJ3NlbGVjdEFuZERlbGV0ZU1lZGlhUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RBbmREZWxldGVNZWRpYShtZWRpYSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi4kb24oJ3NlbGVjdE1lZGlhUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RNZWRpYShtZWRpYSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi4kb24oJ2ZpbGVzVXBsb2FkZWQnLCBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFkZE1lZGlhRmlsZXMoZmlsZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgIHNlbGVjdE1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVkaWEgPSBtZWRpYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaG93TW9kYWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jYW5BZGRNZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICAkKFwiI21lZGlhQXBwXCIpLmRldGFjaCgpLmFwcGVuZFRvKCQobW9kYWxCb2R5RWxlbWVudCkuZmluZCgnLm1vZGFsLWJvZHknKSk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjbWVkaWFBcHBcIikuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWwgPSAkKG1vZGFsQm9keUVsZW1lbnQpLm1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICQobW9kYWxCb2R5RWxlbWVudCkuZmluZCgnLm1lZGlhRmllbGRTZWxlY3RCdXR0b24nKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkTWVkaWFGaWxlcyhtZWRpYUFwcC5zZWxlY3RlZE1lZGlhcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdGhlIGluY2x1ZGVkIG1lZGlhcyB0byBiZSBzdGlsbCBzZWxlY3RlZCB0aGUgbmV4dCB0aW1lIHdlIG9wZW4gdGhlIG1vZGFsLlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFBcHAuc2VsZWN0ZWRNZWRpYXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hvd01lZGlhVGV4dE1vZGFsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJHJlZnMubWVkaWFUZXh0TW9kYWwpLm1vZGFsKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrdXBNZWRpYVRleHQgPSB0aGlzLnNlbGVjdGVkTWVkaWEubWVkaWFUZXh0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbmNlbE1lZGlhVGV4dE1vZGFsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJHJlZnMubWVkaWFUZXh0TW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhLm1lZGlhVGV4dCA9IHRoaXMuYmFja3VwTWVkaWFUZXh0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNob3dDZW50ZXJDcm9wcGluZ01vZGFsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJHJlZnMuY2VudGVyQ3JvcHBpbmdNb2RhbCkubW9kYWwoKTtcbiAgICAgICAgICAgICAgICAvLyBDYXVzZSBhIHJlZnJlc2ggdG8gcmVjYWxjIGhlaWdodHMuXG4gICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIsIDAsIHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXJbMF0pO1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyLCAxLCB0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyWzFdKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2t1cENlbnRlciA9IHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXI7XG4gICAgICAgICAgICB9LCAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FuY2VsQ2VudGVyQ3JvcHBpbmdNb2RhbDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzLiRyZWZzLmNlbnRlckNyb3BwaW5nTW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciA9IHRoaXMuYmFja3VwQ2VudGVyO1xuICAgICAgICAgICAgfSwgICAgICAgICAgICBcbiAgICAgICAgICAgIGNsZWFyQ2VudGVyQ3JvcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXIsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyLCAxLCBudWxsKTtcbiAgICAgICAgICAgIH0sICBcbiAgICAgICAgICAgIG9uQ3JvcERyb3A6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gdGhpcy4kcmVmcy5jcm9wSW1hZ2U7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMCwgZXZlbnQub2Zmc2V0WCAvIGltYWdlLmNsaWVudFdpZHRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5zZWxlY3RlZE1lZGlhLmNlbnRlciwgMSwgZXZlbnQub2Zmc2V0WSAvIGltYWdlLmNsaWVudEhlaWdodCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3JvcExlZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kcmVmcy5jcm9wSW1hZ2UgJiYgdGhpcy5zZWxlY3RlZE1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuc2VsZWN0ZWRNZWRpYS5jZW50ZXJbMF0gKiB0aGlzLiRyZWZzLmNyb3BJbWFnZS5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDwgMTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gMTc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgICBjcm9wVG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJHJlZnMuY3JvcEltYWdlICYmIHRoaXMuc2VsZWN0ZWRNZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyWzFdICogdGhpcy4kcmVmcy5jcm9wSW1hZ2UuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPCAxNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAxNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldENyb3A6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXMuJHJlZnMuY3JvcEltYWdlO1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyLCAwLCBldmVudC5vZmZzZXRYIC8gaW1hZ2UuY2xpZW50V2lkdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnNlbGVjdGVkTWVkaWEuY2VudGVyLCAxLCBldmVudC5vZmZzZXRZIC8gaW1hZ2UuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgICAgIH0sICAgICAgICAgXG4gICAgICAgICAgICBhZGRNZWRpYUZpbGVzOiBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGZpbGVzLmxlbmd0aCA+IDEpICYmIChhbGxvd011bHRpcGxlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJCgnI29ubHlPbmVJdGVtTWVzc2FnZScpLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFGaWVsZEFwcC5tZWRpYUl0ZW1zLnB1c2goZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBtZWRpYUZpZWxkQXBwLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZWRpYUZpZWxkQXBwLm1lZGlhSXRlbXMgPSBtZWRpYUZpZWxkQXBwLm1lZGlhSXRlbXMuY29uY2F0KGZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFGaWVsZEFwcC5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZVNlbGVjdGVkOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMubWVkaWFJdGVtcyAmJiB0aGlzLm1lZGlhSXRlbXMuaW5kZXhPZih0aGlzLnNlbGVjdGVkTWVkaWEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYUl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZW1vdmUgYnV0dG9uIGNhbiBhbHNvIHJlbW92ZSBhIHVuaXF1ZSBtZWRpYSBpdGVtXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lZGlhSXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhSXRlbXMuc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYSA9IG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZWN0QW5kRGVsZXRlTWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkTWVkaWEgPSBtZWRpYTtcbiAgICAgICAgICAgICAgICAvLyBzZXRUaW1lb3V0IGJlY2F1c2Ugc29tZXRpbWVzIFxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZVNlbGVjdGVkIHdhcyBjYWxsZWQgZXZlbiBiZWZvcmUgdGhlIG1lZGlhIHdhcyBzZXQuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YXRjaDoge1xuICAgICAgICAgICAgbWVkaWFJdGVtczoge1xuICAgICAgICAgICAgICAgIGRlZXA6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlciAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgcHJldmlldyByZW5kZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICQoZG9jdW1lbnQpLnRyaWdnZXIoJ2NvbnRlbnRwcmV2aWV3OnJlbmRlcicpOyB9LCAxMDApOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAgICAgICAgICAgIFxuICAgICAgICAgICAgY3VycmVudFByZWZzOiBmdW5jdGlvbiAobmV3UHJlZnMpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWVkaWFGaWVsZFByZWZzJywgSlNPTi5zdHJpbmdpZnkobmV3UHJlZnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcbn0iLCIvLyBkaWZmZXJlbnQgbWVkaWEgZmllbGQgZWRpdG9ycyB3aWxsIGFkZCB0aGVtc2VsdmVzIHRvIHRoaXMgYXJyYXlcbnZhciBtZWRpYUZpZWxkQXBwcyA9IFtdO1xuIiwiLy8gPHVwbG9hZD4gY29tcG9uZW50XG5WdWUuY29tcG9uZW50KCd1cGxvYWQnLCB7XG4gICAgdGVtcGxhdGU6ICdcXFxuICAgICAgICA8ZGl2IDpjbGFzcz1cInsgXFwndXBsb2FkLXdhcm5pbmdcXCcgOiBtb2RlbC5lcnJvck1lc3NhZ2UgfVwiIGNsYXNzPVwidXBsb2FkIG0tMiBwLTIgcHQtMFwiPiBcXFxuICAgICAgICAgICAgPHNwYW4gdi1pZj1cIm1vZGVsLmVycm9yTWVzc2FnZVwiIHYtb246Y2xpY2s9XCJkaXNtaXNzV2FybmluZygpXCIgY2xhc3M9XCJjbG9zZS13YXJuaW5nXCI+PGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiPjwvaT4gPC9zcGFuPlxcXG4gICAgICAgICAgICA8cCBjbGFzcz1cInVwbG9hZC1uYW1lXCIgOnRpdGxlPVwibW9kZWwuZXJyb3JNZXNzYWdlXCI+e3sgbW9kZWwubmFtZSB9fTwvcD4gXFxcbiAgICAgICAgICAgIDxkaXY+IFxcXG4gICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCIhbW9kZWwuZXJyb3JNZXNzYWdlXCIgOnN0eWxlPVwieyB3aWR0aDogbW9kZWwucGVyY2VudGFnZSArIFxcJyVcXCd9XCIgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIj4gPC9zcGFuPiBcXFxuICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cIm1vZGVsLmVycm9yTWVzc2FnZVwiIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiIDp0aXRsZT1cIm1vZGVsLmVycm9yTWVzc2FnZVwiPiBFcnJvcjoge3sgbW9kZWwuZXJyb3JNZXNzYWdlIH19IDwvc3Bhbj4gXFxcbiAgICAgICAgICAgIDwvZGl2PiBcXFxuICAgICAgICA8L2Rpdj4gXFxcbiAgICAgICAgJyxcbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlbDogT2JqZWN0XG4gICAgfSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgJCgnI2ZpbGV1cGxvYWQnKS5iaW5kKCdmaWxldXBsb2FkcHJvZ3Jlc3MnLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuZmlsZXNbMF0ubmFtZSAhPT0gc2VsZi5tb2RlbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VsZi5tb2RlbC5wZXJjZW50YWdlID0gcGFyc2VJbnQoZGF0YS5sb2FkZWQgLyBkYXRhLnRvdGFsICogMTAwLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNmaWxldXBsb2FkJykuYmluZCgnZmlsZXVwbG9hZGRvbmUnLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuZmlsZXNbMF0ubmFtZSAhPT0gc2VsZi5tb2RlbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0LmZpbGVzWzBdLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVGYWlsdXJlKGRhdGEuZmlsZXNbMF0ubmFtZSwgZGF0YS5yZXN1bHQuZmlsZXNbMF0uZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHsgIFxuICAgICAgICAgICAgICAgIGJ1cy4kZW1pdCgncmVtb3ZhbFJlcXVlc3QnLCBzZWxmLm1vZGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnI2ZpbGV1cGxvYWQnKS5iaW5kKCdmaWxldXBsb2FkZmFpbCcsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5maWxlc1swXS5uYW1lICE9PSBzZWxmLm1vZGVsLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmhhbmRsZUZhaWx1cmUoZGF0YS5maWxlc1swXS5uYW1lICwgZGF0YS50ZXh0U3RhdHVzKTsgICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGhhbmRsZUZhaWx1cmU6IGZ1bmN0aW9uIChmaWxlTmFtZSwgbWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKGZpbGVOYW1lICE9PSB0aGlzLm1vZGVsLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vZGVsLmVycm9yTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBidXMuJGVtaXQoJ0Vycm9yT25VcGxvYWQnLCB0aGlzLm1vZGVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzbWlzc1dhcm5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgncmVtb3ZhbFJlcXVlc3QnLCB0aGlzLm1vZGVsKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIiwiLy8gPHVwbG9hZC1saXN0PiBjb21wb25lbnRcblZ1ZS5jb21wb25lbnQoJ3VwbG9hZExpc3QnLCB7XG4gICAgdGVtcGxhdGU6ICdcXFxuICAgICAgICA8ZGl2IGNsYXNzPVwidXBsb2FkLWxpc3RcIiB2LXNob3c9XCJmaWxlcy5sZW5ndGggPiAwXCI+IFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCIgQGNsaWNrPVwiZXhwYW5kZWQgPSAhZXhwYW5kZWRcIj4gXFxcbiAgICAgICAgICAgICAgICA8c3Bhbj4ge3sgVC51cGxvYWRzIH19IDwvc3Bhbj4gXFxcbiAgICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJwZW5kaW5nQ291bnRcIj4gKFBlbmRpbmc6IHt7IHBlbmRpbmdDb3VudCB9fSkgPC9zcGFuPiBcXFxuICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cImVycm9yQ291bnRcIiA6Y2xhc3M9XCJ7IFxcJ3RleHQtZGFuZ2VyXFwnIDogZXJyb3JDb3VudCB9XCI+ICgge3sgVC5lcnJvcnMgfX06IHt7IGVycm9yQ291bnQgfX0gLyA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgdi1vbjpjbGljay5zdG9wPVwiY2xlYXJFcnJvcnNcIiA+IHt7IFQuY2xlYXJFcnJvcnMgfX0gPC9hPik8L3NwYW4+IFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b2dnbGUtYnV0dG9uXCI+IFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PVwiZXhwYW5kZWRcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2hldnJvbi1kb3duXCI+PC9pPiBcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9XCIhZXhwYW5kZWRcIj4gXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2hldnJvbi11cFwiPjwvaT4gXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgICAgICA8L2Rpdj4gXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIiB2LXNob3c9XCJleHBhbmRlZFwiPiBcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC13cmFwXCI+IFxcXG4gICAgICAgICAgICAgICAgICAgIDx1cGxvYWQgdi1mb3I9XCJmIGluIGZpbGVzXCIgOmtleT1cImYubmFtZVwiICA6bW9kZWw9XCJmXCI+PC91cGxvYWQ+IFxcXG4gICAgICAgICAgICAgICAgPC9kaXYgPiBcXFxuICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgIDwvZGl2PiBcXFxuICAgICAgICAnLFxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGVzOiBbXSxcbiAgICAgICAgICAgIFQ6IHt9LFxuICAgICAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcGVuZGluZ0NvdW50OiAwLFxuICAgICAgICAgICAgZXJyb3JDb3VudDogMFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gcmV0cmlldmluZyBsb2NhbGl6ZWQgc3RyaW5ncyBmcm9tIHZpZXdcbiAgICAgICAgc2VsZi5ULnVwbG9hZHMgPSAkKCcjdC11cGxvYWRzJykudmFsKCk7XG4gICAgICAgIHNlbGYuVC5lcnJvcnMgPSAkKCcjdC1lcnJvcnMnKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULmNsZWFyRXJyb3JzID0gJCgnI3QtY2xlYXItZXJyb3JzJykudmFsKCk7XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBmaWxlQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgJCgnI2ZpbGV1cGxvYWQnKS5iaW5kKCdmaWxldXBsb2FkYWRkJywgZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghZGF0YS5maWxlcykgeyBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmZpbGVzLmZvckVhY2goZnVuY3Rpb24gKG5ld0ZpbGUpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGFscmVhZHlJbkxpc3QgPSBzZWxmLmZpbGVzLnNvbWUoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYubmFtZSA9PSBuZXdGaWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlJbkxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5maWxlcy5wdXNoKHsgbmFtZTogbmV3RmlsZS5uYW1lLCBwZXJjZW50YWdlOiAwLCBlcnJvck1lc3NhZ2U6ICcnIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0EgZmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgaXMgYWxyZWFkeSBvbiB0aGUgcXVldWU6JyArIG5ld0ZpbGUubmFtZSk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgIFxuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJ1cy4kb24oJ3JlbW92YWxSZXF1ZXN0JywgZnVuY3Rpb24gKGZpbGVVcGxvYWQpIHtcbiAgICAgICAgICAgIHNlbGYuZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PSBmaWxlVXBsb2FkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnVzLiRvbignRXJyb3JPblVwbG9hZCcsIGZ1bmN0aW9uIChmaWxlVXBsb2FkKSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvdW50KCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICB1cGRhdGVDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvckNvdW50ID0gdGhpcy5maWxlcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5lcnJvck1lc3NhZ2UgIT0gJyc7XG4gICAgICAgICAgICB9KS5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdDb3VudCA9IHRoaXMuZmlsZXMubGVuZ3RoIC0gdGhpcy5lcnJvckNvdW50O1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJFcnJvcnM6IGZ1bmN0aW9uICgpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZmlsZXMgPSB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmVycm9yTWVzc2FnZSA9PSAnJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICBmaWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb3VudCgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iLCJ2YXIgaW5pdGlhbGl6ZWQ7XG52YXIgbWVkaWFBcHA7XG5cbnZhciByb290ID0ge1xuICAgIG5hbWU6ICdNZWRpYSBMaWJyYXJ5JyxcbiAgICBwYXRoOiAnJyxcbiAgICBmb2xkZXI6ICcnLFxuICAgIGlzRGlyZWN0b3J5OiB0cnVlXG59XG5cbnZhciBidXMgPSBuZXcgVnVlKCk7XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVNZWRpYUFwcGxpY2F0aW9uKGRpc3BsYXlNZWRpYUFwcGxpY2F0aW9uLCBtZWRpYUFwcGxpY2F0aW9uVXJsLCBwYXRoQmFzZSkge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgaWYgKCFtZWRpYUFwcGxpY2F0aW9uVXJsKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ21lZGlhQXBwbGljYXRpb25VcmwgdmFyaWFibGUgaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IG1lZGlhQXBwbGljYXRpb25VcmwsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICAkKCcudGEtY29udGVudCcpLmFwcGVuZChjb250ZW50KTtcblxuICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignbWVkaWFhcHBsaWNhdGlvbjpyZWFkeScpO1xuXG4gICAgICAgICAgICBtZWRpYUFwcCA9IG5ldyBWdWUoe1xuICAgICAgICAgICAgICAgIGVsOiAnI21lZGlhQXBwJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRm9sZGVyOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFJdGVtczogW10sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTWVkaWFzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ0Ryb3BUaHVtYm5haWw6IG5ldyBJbWFnZSgpLFxuICAgICAgICAgICAgICAgICAgICBzbWFsbFRodW1iczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGdyaWRWaWV3OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFGaWx0ZXI6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzb3J0Qnk6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzb3J0QXNjOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpdGVtc0luUGFnZTogW11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZHJhZ0Ryb3BUaHVtYm5haWwuc3JjID0gKHBhdGhCYXNlIHx8ICcnKSArICcvT3JjaGFyZENvcmUuTWVkaWEvSW1hZ2VzL2RyYWctdGh1bWJuYWlsLnBuZyc7XG5cbiAgICAgICAgICAgICAgICAgICAgYnVzLiRvbignZm9sZGVyU2VsZWN0ZWQnLCBmdW5jdGlvbiAoZm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRm9sZGVyID0gZm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidXMuJG9uKCdmb2xkZXJEZWxldGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RSb290KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ2ZvbGRlckFkZGVkJywgZnVuY3Rpb24gKGZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZEZvbGRlciA9IGZvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlci5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ2JlZm9yZUZvbGRlckFkZGVkJywgZnVuY3Rpb24gKGZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkRm9sZGVyKGZvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ21lZGlhTGlzdE1vdmVkJywgZnVuY3Rpb24gKGVycm9ySW5mbykgeyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkRm9sZGVyKHNlbGYuc2VsZWN0ZWRGb2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9ySW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZXJyb3JzLnB1c2goZXJyb3JJbmZvKTsgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidXMuJG9uKCdtZWRpYVJlbmFtZWQnLCBmdW5jdGlvbiAobmV3TmFtZSwgbmV3UGF0aCwgb2xkUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhID0gc2VsZi5tZWRpYUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5tZWRpYVBhdGggPT09IG9sZFBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWEubWVkaWFQYXRoID0gbmV3UGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLm5hbWUgPSBuZXdOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidXMuJG9uKCdjcmVhdGVGb2xkZXJSZXF1ZXN0ZWQnLCBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3JlYXRlRm9sZGVyKCk7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ2RlbGV0ZUZvbGRlclJlcXVlc3RlZCcsIGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kZWxldGVGb2xkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29tbW9uIGhhbmRsZXJzIGZvciBhY3Rpb25zIGluIGJvdGggZ3JpZCBhbmQgdGFibGUgdmlldy5cbiAgICAgICAgICAgICAgICAgICAgYnVzLiRvbignc29ydENoYW5nZVJlcXVlc3RlZCcsIGZ1bmN0aW9uIChuZXdTb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYW5nZVNvcnQobmV3U29ydCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ21lZGlhVG9nZ2xlUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZVNlbGVjdGlvbk9mTWVkaWEobWVkaWEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidXMuJG9uKCdyZW5hbWVNZWRpYVJlcXVlc3RlZCcsIGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW5hbWVNZWRpYShtZWRpYSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ2RlbGV0ZU1lZGlhUmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlbGV0ZU1lZGlhSXRlbShtZWRpYSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ21lZGlhRHJhZ1N0YXJ0UmVxdWVzdGVkJywgZnVuY3Rpb24gKG1lZGlhLCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZURyYWdTdGFydChtZWRpYSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlciBmb3IgcGFnZXIgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGJ1cy4kb24oJ3BhZ2VyRXZlbnQnLCBmdW5jdGlvbiAoaXRlbXNJblBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXRlbXNJblBhZ2UgPSBpdGVtc0luUGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRNZWRpYXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21lZGlhQXBwbGljYXRpb25QcmVmcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRm9sZGVyID0gcm9vdFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UHJlZnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtZWRpYUFwcGxpY2F0aW9uUHJlZnMnKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wdXRlZDoge1xuICAgICAgICAgICAgICAgICAgICBpc0hvbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkRm9sZGVyID09IHJvb3Q7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRGb2xkZXIgPSB0aGlzLnNlbGVjdGVkRm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudEZvbGRlciAmJiBwYXJlbnRGb2xkZXIucGF0aCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAudW5zaGlmdChwYXJlbnRGb2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEZvbGRlciA9IHBhcmVudEZvbGRlci5wYXJlbnQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb290O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZE1lZGlhSXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE1lZGlhcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSBzZWxmLm1lZGlhSXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VsZi5tZWRpYUZpbHRlci50b0xvd2VyQ2FzZSgpKSA+IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlbGYuc29ydEJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2l6ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNvcnRBc2MgPyBhLnNpemUgLSBiLnNpemUgOiBiLnNpemUgLSBhLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW1lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc29ydEFzYyA/IGEubWltZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi5taW1lLnRvTG93ZXJDYXNlKCkpIDogYi5taW1lLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShhLm1pbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsYXN0TW9kaWZ5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc29ydEFzYyA/IGEubGFzdE1vZGlmeSAtIGIubGFzdE1vZGlmeSA6IGIubGFzdE1vZGlmeSAtIGEubGFzdE1vZGlmeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNvcnRBc2MgPyBhLm5hbWUudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIubmFtZS50b0xvd2VyQ2FzZSgpKSA6IGIubmFtZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYS5uYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW5Db3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1lZGlhSXRlbXMubGVuZ3RoIC0gdGhpcy5maWx0ZXJlZE1lZGlhSXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zbWFsbFRodW1icyA/IDEwMCA6IDI0MDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFByZWZzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFsbFRodW1iczogdGhpcy5zbWFsbFRodW1icyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRGb2xkZXI6IHRoaXMuc2VsZWN0ZWRGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRWaWV3OiB0aGlzLmdyaWRWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ByZWZzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdQcmVmcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbWFsbFRodW1icyA9IG5ld1ByZWZzLnNtYWxsVGh1bWJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGb2xkZXIgPSBuZXdQcmVmcy5zZWxlY3RlZEZvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRWaWV3ID0gbmV3UHJlZnMuZ3JpZFZpZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHdhdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQcmVmczogZnVuY3Rpb24gKG5ld1ByZWZzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWVkaWFBcHBsaWNhdGlvblByZWZzJywgSlNPTi5zdHJpbmdpZnkobmV3UHJlZnMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRGb2xkZXI6IGZ1bmN0aW9uIChuZXdGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFGaWx0ZXIgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGb2xkZXIgPSBuZXdGb2xkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGb2xkZXIobmV3Rm9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMucm9vdEZvbGRlci50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkVXJsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEZvbGRlciA/ICQoJyN1cGxvYWRGaWxlcycpLnZhbCgpICsgXCI/cGF0aD1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnNlbGVjdGVkRm9sZGVyLnBhdGgpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Um9vdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZvbGRlciA9IHRoaXMucm9vdDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbG9hZEZvbGRlcjogZnVuY3Rpb24gKGZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjZ2V0TWVkaWFJdGVtc1VybCcpLnZhbCgpICsgXCI/cGF0aD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChmb2xkZXIucGF0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZWRpYUl0ZW1zID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE1lZGlhcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvcnRCeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvcnRBc2MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgbG9hZGluZyBmb2xkZXI6JyArIGZvbGRlci5wYXRoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdFJvb3QoKTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbHRlcmVkTWVkaWFJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYXMucHVzaCh0aGlzLmZpbHRlcmVkTWVkaWFJdGVtc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVuU2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVkaWFzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGludmVydFNlbGVjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJlZE1lZGlhSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc01lZGlhU2VsZWN0ZWQodGhpcy5maWx0ZXJlZE1lZGlhSXRlbXNbaV0pID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAucHVzaCh0aGlzLmZpbHRlcmVkTWVkaWFJdGVtc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhcyA9IHRlbXA7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNlbGVjdGlvbk9mTWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNNZWRpYVNlbGVjdGVkKG1lZGlhKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhcy5zcGxpY2UodGhpcy5zZWxlY3RlZE1lZGlhcy5pbmRleE9mKG1lZGlhKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYXMucHVzaChtZWRpYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlzTWVkaWFTZWxlY3RlZDogZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zZWxlY3RlZE1lZGlhcy5zb21lKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC51cmwudG9Mb3dlckNhc2UoKSA9PT0gbWVkaWEudXJsLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvbGRlciA9IHRoaXMuc2VsZWN0ZWRGb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByb290IGZvbGRlciBjYW4ndCBiZSBkZWxldGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9sZGVyID09IHRoaXMucm9vdC5tb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybURpYWxvZyh7Li4uJChcIiNkZWxldGVGb2xkZXJcIikuZGF0YSgpLCBjYWxsYmFjazogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjZGVsZXRlRm9sZGVyVXJsJykudmFsKCkgKyBcIj9wYXRoPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZvbGRlci5wYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuOiAkKFwiaW5wdXRbbmFtZT0nX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4nXVwiKS52YWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzLiRlbWl0KCdkZWxldGVGb2xkZXInLCBmb2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH19KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRm9sZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlRm9sZGVyTW9kYWwtZXJyb3JzJykuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjcmVhdGVGb2xkZXJNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlRm9sZGVyTW9kYWwgLm1vZGFsLWJvZHkgaW5wdXQnKS52YWwoJycpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlbmFtZU1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNyZW5hbWVNZWRpYU1vZGFsLWVycm9ycycpLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVuYW1lTWVkaWFNb2RhbCcpLm1vZGFsKCdzaG93Jyk7ICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvbGQtaXRlbS1uYW1lJykudmFsKG1lZGlhLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlbmFtZU1lZGlhTW9kYWwgLm1vZGFsLWJvZHkgaW5wdXQnKS52YWwobWVkaWEubmFtZSkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0QW5kRGVsZXRlTWVkaWE6IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVNZWRpYSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVNZWRpYUxpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZWRpYUxpc3QgPSB0aGlzLnNlbGVjdGVkTWVkaWFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVkaWFMaXN0Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1EaWFsb2coey4uLiQoXCIjZGVsZXRlTWVkaWFcIikuZGF0YSgpLCBjYWxsYmFjazogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzLnB1c2gobWVkaWFMaXN0W2ldLm1lZGlhUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjZGVsZXRlTWVkaWFMaXN0VXJsJykudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbjogJChcImlucHV0W25hbWU9J19fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuJ11cIikudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHM6IHBhdGhzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuc2VsZWN0ZWRNZWRpYXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZi5tZWRpYUl0ZW1zICYmIHNlbGYubWVkaWFJdGVtcy5pbmRleE9mKHNlbGYuc2VsZWN0ZWRNZWRpYXNbaV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lZGlhSXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1cy4kZW1pdCgnbWVkaWFEZWxldGVkJywgc2VsZi5zZWxlY3RlZE1lZGlhc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE1lZGlhcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH19KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWVkaWFJdGVtOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1EaWFsb2coey4uLiQoXCIjZGVsZXRlTWVkaWFcIikuZGF0YSgpLCBjYWxsYmFjazogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjZGVsZXRlTWVkaWFVcmwnKS52YWwoKSArIFwiP3BhdGg9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobWVkaWEubWVkaWFQYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuOiAkKFwiaW5wdXRbbmFtZT0nX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4nXVwiKS52YWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZi5tZWRpYUl0ZW1zICYmIHNlbGYubWVkaWFJdGVtcy5pbmRleE9mKG1lZGlhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVkaWFJdGVtcy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1cy4kZW1pdCgnbWVkaWFEZWxldGVkJywgbWVkaWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlbGYuc2VsZWN0ZWRNZWRpYSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfX0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVEcmFnU3RhcnQ6IGZ1bmN0aW9uIChtZWRpYSwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyc3QgcGFydCBvZiBtb3ZlIG1lZGlhIHRvIGZvbGRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgdGhlIGRhdGEgdGhhdCB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIGZvbGRlciBjb21wb25lbnQgb24gZHJvcCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lZGlhTmFtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZWRpYXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhTmFtZXMucHVzaChpdGVtLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIHVzZXIgZHJhZ3MgYW4gdW5zZWxlY3RlZCBpdGVtLCB3ZSBzZWxlY3QgaXQgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTWVkaWFTZWxlY3RlZChtZWRpYSkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYU5hbWVzLnB1c2gobWVkaWEubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lZGlhcy5wdXNoKG1lZGlhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgnbWVkaWFOYW1lcycsIEpTT04uc3RyaW5naWZ5KG1lZGlhTmFtZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3NvdXJjZUZvbGRlcicsIHRoaXMuc2VsZWN0ZWRGb2xkZXIucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UodGhpcy5kcmFnRHJvcFRodW1ibmFpbCwgMTAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNjcm9sbFdoaWxlRHJhZzogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmNsaWVudFkgPCAxNTApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIC0xMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmNsaWVudFkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAxMDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlU29ydDogZnVuY3Rpb24gKG5ld1NvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvcnRCeSA9PSBuZXdTb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0QXNjID0gIXRoaXMuc29ydEFzYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0QXNjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRCeSA9IG5ld1NvcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCgnI2NyZWF0ZS1mb2xkZXItbmFtZScpLmtleXByZXNzKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGUud2hpY2g7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSAxMykgeyAgLy8gdGhlIGVudGVyIGtleSBjb2RlXG4gICAgICAgICAgICAgICAgICAgICQoJyNtb2RhbEZvb3Rlck9rJykuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcjbW9kYWxGb290ZXJPaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAkKCcjY3JlYXRlLWZvbGRlci1uYW1lJykudmFsKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjY3JlYXRlRm9sZGVyVXJsJykudmFsKCkgKyBcIj9wYXRoPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG1lZGlhQXBwLnNlbGVjdGVkRm9sZGVyLnBhdGgpICsgXCImbmFtZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuOiAkKFwiaW5wdXRbbmFtZT0nX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4nXVwiKS52YWwoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVzLiRlbWl0KCdhZGRGb2xkZXInLCBtZWRpYUFwcC5zZWxlY3RlZEZvbGRlciwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlRm9sZGVyTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JlYXRlRm9sZGVyTW9kYWwtZXJyb3JzJykuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBKU09OLnBhcnNlKGVycm9yLnJlc3BvbnNlVGV4dCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+PC9kaXY+JykudGV4dChlcnJvck1lc3NhZ2UpLmFwcGVuZFRvKCQoJyNjcmVhdGVGb2xkZXJNb2RhbC1lcnJvcnMnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcjcmVuYW1lTWVkaWFNb2RhbEZvb3Rlck9rJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3TmFtZSA9ICQoJyNuZXctaXRlbS1uYW1lJykudmFsKCk7XG4gICAgICAgICAgICAgICAgdmFyIG9sZE5hbWUgPSAkKCcjb2xkLWl0ZW0tbmFtZScpLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5ld05hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Rm9sZGVyID0gbWVkaWFBcHAuc2VsZWN0ZWRGb2xkZXIucGF0aCArIFwiL1wiIDtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEZvbGRlciA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZvbGRlciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG5ld1BhdGggPSBjdXJyZW50Rm9sZGVyICsgbmV3TmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkUGF0aCA9IGN1cnJlbnRGb2xkZXIgKyBvbGROYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5ld1BhdGgudG9Mb3dlckNhc2UoKSA9PT0gb2xkUGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNyZW5hbWVNZWRpYU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJCgnI3JlbmFtZU1lZGlhVXJsJykudmFsKCkgKyBcIj9vbGRQYXRoPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9sZFBhdGgpICsgXCImbmV3UGF0aD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChuZXdQYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuOiAkKFwiaW5wdXRbbmFtZT0nX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4nXVwiKS52YWwoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlbmFtZU1lZGlhTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVzLiRlbWl0KCdtZWRpYVJlbmFtZWQnLCBuZXdOYW1lLCBuZXdQYXRoLCBvbGRQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlbmFtZU1lZGlhTW9kYWwtZXJyb3JzJykuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBKU09OLnBhcnNlKGVycm9yLnJlc3BvbnNlVGV4dCkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+PC9kaXY+JykudGV4dChlcnJvck1lc3NhZ2UpLmFwcGVuZFRvKCQoJyNyZW5hbWVNZWRpYU1vZGFsLWVycm9ycycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChkaXNwbGF5TWVkaWFBcHBsaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZWRpYUFwcCcpLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYUFwcDpyZWFkeScpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiJChkb2N1bWVudCkub24oJ21lZGlhQXBwOnJlYWR5JywgZnVuY3Rpb24gKCkge1xuICAgICQoJyNmaWxldXBsb2FkJykuZmlsZXVwbG9hZCh7XG4gICAgICAgIGRyb3Bab25lOiAkKCcjbWVkaWFBcHAnKSxcbiAgICAgICAgbGltaXRDb25jdXJyZW50VXBsb2FkczogMjAsXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIHVybDogJCgnI3VwbG9hZEZpbGVzJykudmFsKCksXG4gICAgICAgIGZvcm1EYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYW50aUZvcmdlcnlUb2tlbiA9ICQoXCJpbnB1dFtuYW1lPV9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuXVwiKS52YWwoKTtcblxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdwYXRoJywgdmFsdWU6IG1lZGlhQXBwLnNlbGVjdGVkRm9sZGVyLnBhdGggfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbicsIHZhbHVlOiBhbnRpRm9yZ2VyeVRva2VuIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGRvbmU6IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAkLmVhY2goZGF0YS5yZXN1bHQuZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkge1xuICAgICAgICAgICAgICAgIGlmICghZmlsZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBtZWRpYUFwcC5tZWRpYUl0ZW1zLnB1c2goZmlsZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cblxuJChkb2N1bWVudCkuYmluZCgnZHJhZ292ZXInLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkdCA9IGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXI7XG4gICAgaWYgKGR0LnR5cGVzICYmIChkdC50eXBlcy5pbmRleE9mID8gZHQudHlwZXMuaW5kZXhPZignRmlsZXMnKSAhPSAtMSA6IGR0LnR5cGVzLmNvbnRhaW5zKCdGaWxlcycpKSkge1xuICAgICAgICB2YXIgZHJvcFpvbmUgPSAkKCcjY3VzdG9tZHJvcHpvbmUnKSxcbiAgICAgICAgICAgIHRpbWVvdXQgPSB3aW5kb3cuZHJvcFpvbmVUaW1lb3V0O1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJvcFpvbmUuYWRkQ2xhc3MoJ2luJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvdmVyZWREcm9wWm9uZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoZHJvcFpvbmUpO1xuICAgICAgICB3aW5kb3cuZHJvcFpvbmVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cuZHJvcFpvbmVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGRyb3Bab25lLnJlbW92ZUNsYXNzKCdpbicpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH0gICAgXG59KTsiLCIvLyA8Zm9sZGVyPiBjb21wb25lbnRcblZ1ZS5jb21wb25lbnQoJ2ZvbGRlcicsIHtcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bGkgOmNsYXNzPVwie3NlbGVjdGVkOiBpc1NlbGVjdGVkfVwiIFxuICAgICAgICAgICAgICAgIHYtb246ZHJhZ2xlYXZlLnByZXZlbnQgPSBcImhhbmRsZURyYWdMZWF2ZSgkZXZlbnQpO1wiIFxuICAgICAgICAgICAgICAgIHYtb246ZHJhZ292ZXIucHJldmVudC5zdG9wPVwiaGFuZGxlRHJhZ092ZXIoJGV2ZW50KTtcIiBcbiAgICAgICAgICAgICAgICB2LW9uOmRyb3AucHJldmVudC5zdG9wID0gXCJtb3ZlTWVkaWFUb0ZvbGRlcihtb2RlbCwgJGV2ZW50KVwiID5cbiAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwie2ZvbGRlcmhvdmVyZWQ6IGlzSG92ZXJlZCAsIHRyZWVyb290OiBsZXZlbCA9PSAxfVwiID5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgOnN0eWxlPVwieyBwYWRkaW5nJHtkb2N1bWVudC5kaXIgPT0gXCJsdHJcIiA/IFwiTGVmdFwiIDogXCJSaWdodFwifTpwYWRkaW5nICsgJ3B4JyB9XCIgdi1vbjpjbGljaz1cInNlbGVjdFwiICBkcmFnZ2FibGU9XCJmYWxzZVwiIGNsYXNzPVwiZm9sZGVyLW1lbnUtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gdi1vbjpjbGljay5zdG9wPVwidG9nZ2xlXCIgY2xhc3M9XCJleHBhbmRcIiA6Y2xhc3M9XCJ7b3BlbmVkOiBvcGVuLCBjbG9zZWQ6ICFvcGVuLCBlbXB0eTogZW1wdHl9XCI+PGkgdi1pZj1cIm9wZW5cIiBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLXJpZ2h0XCI+PC9pPjwvc3Bhbj4gXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9sZGVyLW5hbWUgbWwtMlwiPnt7bW9kZWwubmFtZX19PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgZm9sZGVyLWFjdGlvbnNcIiA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1jbG9hayBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLXNtXCIgdi1vbjpjbGljaz1cImNyZWF0ZUZvbGRlclwiIHYtaWY9XCJpc1NlbGVjdGVkIHx8IGlzUm9vdFwiPjxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtY2xvYWsgaHJlZj1cImphdmFzY3JpcHQ6O1wiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIHYtb246Y2xpY2s9XCJkZWxldGVGb2xkZXJcIiB2LWlmPVwiaXNTZWxlY3RlZCAmJiAhaXNSb290XCI+PGkgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxvbCB2LXNob3c9XCJvcGVuXCI+XG4gICAgICAgICAgICAgICAgPGZvbGRlciB2LWZvcj1cImZvbGRlciBpbiBjaGlsZHJlblwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6a2V5PVwiZm9sZGVyLnBhdGhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm1vZGVsPVwiZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpzZWxlY3RlZC1pbi1tZWRpYS1hcHA9XCJzZWxlY3RlZEluTWVkaWFBcHBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmxldmVsPVwibGV2ZWwgKyAxXCI+XG4gICAgICAgICAgICAgICAgPC9mb2xkZXI+XG4gICAgICAgICAgICA8L29sPlxuICAgICAgICA8L2xpPlxuICAgICAgICBgLFxuICAgIHByb3BzOiB7XG4gICAgICAgIG1vZGVsOiBPYmplY3QsXG4gICAgICAgIHNlbGVjdGVkSW5NZWRpYUFwcDogT2JqZWN0LFxuICAgICAgICBsZXZlbDogTnVtYmVyXG4gICAgfSxcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBudWxsLCAvLyBub3QgaW5pdGlhbGl6ZWQgc3RhdGUgKGZvciBsYXp5LWxvYWRpbmcpXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBpc0hvdmVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBlbXB0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmNoaWxkcmVuIHx8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RlZEluTWVkaWFBcHAubmFtZSA9PSB0aGlzLm1vZGVsLm5hbWUpICYmICh0aGlzLnNlbGVjdGVkSW5NZWRpYUFwcC5wYXRoID09IHRoaXMubW9kZWwucGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzUm9vdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwucGF0aCA9PT0gJyc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCh0aGlzLmlzUm9vdCA9PSBmYWxzZSkgJiYgKHRoaXMuaXNBbmNlc3Rvck9mU2VsZWN0ZWRGb2xkZXIoKSkpe1xuICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFkZGluZyA9IHRoaXMubGV2ZWwgPCAzID8gIDE2IDogMTYgKyAodGhpcy5sZXZlbCAqIDgpO1xuICAgIH0sXG4gICAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGJ1cy4kb24oJ2RlbGV0ZUZvbGRlcicsIGZ1bmN0aW9uIChmb2xkZXIpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZi5jaGlsZHJlbiAmJiBzZWxmLmNoaWxkcmVuLmluZGV4T2YoZm9sZGVyKVxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgICAgICAgICBidXMuJGVtaXQoJ2ZvbGRlckRlbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJ1cy4kb24oJ2FkZEZvbGRlcicsIGZ1bmN0aW9uICh0YXJnZXQsIGZvbGRlcikge1xuICAgICAgICAgICAgaWYgKHNlbGYubW9kZWwgPT0gdGFyZ2V0KSB7XG5cbiAgICAgICAgICAgICAgICBidXMuJGVtaXQoJ2JlZm9yZUZvbGRlckFkZGVkJywgc2VsZi5tb2RlbCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGlsZHJlbi5wdXNoKGZvbGRlcik7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmb2xkZXIucGFyZW50ID0gc2VsZi5tb2RlbDtcbiAgICAgICAgICAgICAgICBidXMuJGVtaXQoJ2ZvbGRlckFkZGVkJywgZm9sZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGlzQW5jZXN0b3JPZlNlbGVjdGVkRm9sZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwYXJlbnRGb2xkZXIgPSBtZWRpYUFwcC5zZWxlY3RlZEZvbGRlcjtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnRGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Rm9sZGVyLnBhdGggPT0gdGhpcy5tb2RlbC5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudEZvbGRlciA9IHBhcmVudEZvbGRlci5wYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuO1xuICAgICAgICAgICAgaWYgKHRoaXMub3BlbiAmJiAhdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZENoaWxkcmVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnVzLiRlbWl0KCdmb2xkZXJTZWxlY3RlZCcsIHRoaXMubW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5sb2FkQ2hpbGRyZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRm9sZGVyOiBmdW5jdGlvbiAoKSB7ICAgICAgICAgICBcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnY3JlYXRlRm9sZGVyUmVxdWVzdGVkJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUZvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnVzLiRlbWl0KCdkZWxldGVGb2xkZXJSZXF1ZXN0ZWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZENoaWxkcmVuOiBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodGhpcy5vcGVuID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiAkKCcjZ2V0Rm9sZGVyc1VybCcpLnZhbCgpICsgXCI/cGF0aD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzZWxmLm1vZGVsLnBhdGgpLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGlsZHJlbiA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5wYXJlbnQgPSBzZWxmLm1vZGVsO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZW10cHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVEcmFnT3ZlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlRHJhZ0xlYXZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5pc0hvdmVyZWQgPSBmYWxzZTsgICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgbW92ZU1lZGlhVG9Gb2xkZXI6IGZ1bmN0aW9uIChmb2xkZXIsIGUpIHtcblxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5pc0hvdmVyZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIG1lZGlhTmFtZXMgPSBKU09OLnBhcnNlKGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ21lZGlhTmFtZXMnKSk7IFxuXG4gICAgICAgICAgICBpZiAobWVkaWFOYW1lcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc291cmNlRm9sZGVyID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgnc291cmNlRm9sZGVyJyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0Rm9sZGVyID0gZm9sZGVyLnBhdGg7XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2VGb2xkZXIgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgc291cmNlRm9sZGVyID0gJ3Jvb3QnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0Rm9sZGVyID09PSAnJykge1xuICAgICAgICAgICAgICAgIHRhcmdldEZvbGRlciA9ICdyb290JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNvdXJjZUZvbGRlciA9PT0gdGFyZ2V0Rm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJCgnI3NhbWVGb2xkZXJNZXNzYWdlJykudmFsKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlybURpYWxvZyh7Li4uJChcIiNtb3ZlTWVkaWFcIikuZGF0YSgpLCBjYWxsYmFjazogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbW92ZU1lZGlhTGlzdFVybCcpLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW46ICQoXCJpbnB1dFtuYW1lPSdfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbiddXCIpLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhTmFtZXM6IG1lZGlhTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRm9sZGVyOiBzb3VyY2VGb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Rm9sZGVyOiB0YXJnZXRGb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzLiRlbWl0KCdtZWRpYUxpc3RNb3ZlZCcpOyAvLyBNZWRpYUFwcCB3aWxsIGxpc3RlbiB0byB0aGlzLCBhbmQgdGhlbiBpdCB3aWxsIHJlbG9hZCBwYWdlIHNvIHRoZSBtb3ZlZCBtZWRpYXMgd29uJ3QgYmUgdGhlcmUgYW55bW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzLiRlbWl0KCdtZWRpYUxpc3RNb3ZlZCcsIGVycm9yLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19KTtcbiAgICAgICAgfVxuXG4gICAgfVxufSk7XG4iLCIvLyA8bWVkaWEtaXRlbXMtZ3JpZD4gY29tcG9uZW50XG5WdWUuY29tcG9uZW50KCdtZWRpYS1pdGVtcy1ncmlkJywge1xuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxvbCBjbGFzcz1cInJvdyBtZWRpYS1pdGVtcy1ncmlkXCI+XG4gICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwibWVkaWEgaW4gZmlsdGVyZWRNZWRpYUl0ZW1zXCJcbiAgICAgICAgICAgICAgICAgICAgOmtleT1cIm1lZGlhLm5hbWVcIiBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJtZWRpYS1pdGVtIG1lZGlhLWNvbnRhaW5lci1tYWluLWxpc3QtaXRlbSBjYXJkXCJcbiAgICAgICAgICAgICAgICAgICAgOnN0eWxlPVwie3dpZHRoOiB0aHVtYlNpemUgKyAyICsgJ3B4J31cIlxuICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7c2VsZWN0ZWQ6IGlzTWVkaWFTZWxlY3RlZChtZWRpYSl9XCJcbiAgICAgICAgICAgICAgICAgICAgdi1vbjpjbGljay5zdG9wPVwidG9nZ2xlU2VsZWN0aW9uT2ZNZWRpYShtZWRpYSlcIlxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJ0cnVlXCIgdi1vbjpkcmFnc3RhcnQ9XCJkcmFnU3RhcnQobWVkaWEsICRldmVudClcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRodW1iLWNvbnRhaW5lclwiIDpzdHlsZT1cIntoZWlnaHQ6IHRodW1iU2l6ZSArJ3B4J31cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgdi1pZj1cIm1lZGlhLm1pbWUuc3RhcnRzV2l0aCgnaW1hZ2UnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9XCJidWlsZE1lZGlhVXJsKG1lZGlhLnVybCwgdGh1bWJTaXplKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLW1pbWU9XCJtZWRpYS5taW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnN0eWxlPVwie21heEhlaWdodDogdGh1bWJTaXplICsncHgnLCBtYXhXaWR0aDogdGh1bWJTaXplICsncHgnfVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSB2LWVsc2UgY2xhc3M9XCJmYSBmYS1maWxlLW8gZmEtbGdcIiA6ZGF0YS1taW1lPVwibWVkaWEubWltZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lZGlhLWNvbnRhaW5lci1tYWluLWl0ZW0tdGl0bGUgY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLWxpZ2h0IGJ0bi1zbSBmbG9hdC1yaWdodCBpbmxpbmUtbWVkaWEtYnV0dG9uIGVkaXQtYnV0dG9uXCIgdi1vbjpjbGljay5zdG9wPVwicmVuYW1lTWVkaWEobWVkaWEpXCI+PGkgY2xhc3M9XCJmYSBmYS1lZGl0XCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBjbGFzcz1cImJ0biBidG4tbGlnaHQgYnRuLXNtIGZsb2F0LXJpZ2h0IGlubGluZS1tZWRpYS1idXR0b24gZGVsZXRlLWJ1dHRvblwiIHYtb246Y2xpY2suc3RvcD1cImRlbGV0ZU1lZGlhKG1lZGlhKVwiPjxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJtZWRpYS51cmxcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImJ0biBidG4tbGlnaHQgYnRuLXNtIGZsb2F0LXJpZ2h0IGlubGluZS1tZWRpYS1idXR0b24gdmlldy1idXR0b25cIlwiPjxpIGNsYXNzPVwiZmEgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZWRpYS1maWxlbmFtZSBjYXJkLXRleHQgc21hbGxcIiA6dGl0bGU9XCJtZWRpYS5uYW1lXCI+e3sgbWVkaWEubmFtZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvb2w+XG4gICAgICAgIGAsXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgVDoge31cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZmlsdGVyZWRNZWRpYUl0ZW1zOiBBcnJheSxcbiAgICAgICAgc2VsZWN0ZWRNZWRpYXM6IEFycmF5LFxuICAgICAgICB0aHVtYlNpemU6IE51bWJlclxuICAgIH0sXG4gICAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vIHJldHJpZXZpbmcgbG9jYWxpemVkIHN0cmluZ3MgZnJvbSB2aWV3XG4gICAgICAgIHNlbGYuVC5lZGl0QnV0dG9uID0gJCgnI3QtZWRpdC1idXR0b24nKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULmRlbGV0ZUJ1dHRvbiA9ICQoJyN0LWRlbGV0ZS1idXR0b24nKS52YWwoKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgaXNNZWRpYVNlbGVjdGVkOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnNlbGVjdGVkTWVkaWFzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnVybC50b0xvd2VyQ2FzZSgpID09PSBtZWRpYS51cmwudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgYnVpbGRNZWRpYVVybDogZnVuY3Rpb24gKHVybCwgdGh1bWJTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsICsgKHVybC5pbmRleE9mKCc/JykgPT0gLTEgPyAnPycgOiAnJicpICsgJ3dpZHRoPScgKyB0aHVtYlNpemUgKyAnJmhlaWdodD0nICsgdGh1bWJTaXplO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb25PZk1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnbWVkaWFUb2dnbGVSZXF1ZXN0ZWQnLCBtZWRpYSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmFtZU1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgncmVuYW1lTWVkaWFSZXF1ZXN0ZWQnLCBtZWRpYSk7ICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZU1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnZGVsZXRlTWVkaWFSZXF1ZXN0ZWQnLCBtZWRpYSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdTdGFydDogZnVuY3Rpb24gKG1lZGlhLCBlKSB7XG4gICAgICAgICAgICBidXMuJGVtaXQoJ21lZGlhRHJhZ1N0YXJ0UmVxdWVzdGVkJywgbWVkaWEsIGUpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iLCIvLyA8bWVkaWEtaXRlbXMtdGFibGU+IGNvbXBvbmVudFxuVnVlLmNvbXBvbmVudCgnbWVkaWEtaXRlbXMtdGFibGUnLCB7XG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgbWVkaWEtaXRlbXMtdGFibGUgbS0wXCI+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwiaGVhZGVyLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIiBjbGFzcz1cInRodW1ibmFpbC1jb2x1bW5cIj57eyBULmltYWdlSGVhZGVyIH19PC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCIgdi1vbjpjbGljaz1cImNoYW5nZVNvcnQoJ25hbWUnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICB7eyBULm5hbWVIZWFkZXIgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICA8c29ydC1pbmRpY2F0b3IgY29sbmFtZT1cIm5hbWVcIiA6c2VsZWN0ZWRjb2xuYW1lPVwic29ydEJ5XCIgOmFzYz1cInNvcnRBc2NcIj48L3NvcnQtaW5kaWNhdG9yPlxuICAgICAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIiB2LW9uOmNsaWNrPVwiY2hhbmdlU29ydCgnbGFzdE1vZGlmeScpXCI+IFxuICAgICAgICAgICAgICAgICAgICAgICB7eyBULmxhc3RNb2RpZnlIZWFkZXIgfX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgPHNvcnQtaW5kaWNhdG9yIGNvbG5hbWU9XCJsYXN0TW9kaWZ5XCIgOnNlbGVjdGVkY29sbmFtZT1cInNvcnRCeVwiIDphc2M9XCJzb3J0QXNjXCI+PC9zb3J0LWluZGljYXRvcj4gXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+IFxuICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIiB2LW9uOmNsaWNrPVwiY2hhbmdlU29ydCgnc2l6ZScpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm9wdGlvbmFsLWNvbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IFQuc2l6ZUhlYWRlciB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3J0LWluZGljYXRvciBjb2xuYW1lPVwic2l6ZVwiIDpzZWxlY3RlZGNvbG5hbWU9XCJzb3J0QnlcIiA6YXNjPVwic29ydEFzY1wiPjwvc29ydC1pbmRpY2F0b3I+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIHYtb246Y2xpY2s9XCJjaGFuZ2VTb3J0KCdtaW1lJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib3B0aW9uYWwtY29sXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBULnR5cGVIZWFkZXIgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICA8c29ydC1pbmRpY2F0b3IgY29sbmFtZT1cIm1pbWVcIiA6c2VsZWN0ZWRjb2xuYW1lPVwic29ydEJ5XCIgOmFzYz1cInNvcnRBc2NcIj48L3NvcnQtaW5kaWNhdG9yPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICA8dHIgdi1mb3I9XCJtZWRpYSBpbiBmaWx0ZXJlZE1lZGlhSXRlbXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1lZGlhLWl0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7c2VsZWN0ZWQ6IGlzTWVkaWFTZWxlY3RlZChtZWRpYSl9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbjpjbGljay5zdG9wPVwidG9nZ2xlU2VsZWN0aW9uT2ZNZWRpYShtZWRpYSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJ0cnVlXCIgdi1vbjpkcmFnc3RhcnQ9XCJkcmFnU3RhcnQobWVkaWEsICRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PVwibWVkaWEubmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0aHVtYm5haWwtY29sdW1uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyB2LWlmPVwibWVkaWEubWltZS5zdGFydHNXaXRoKCdpbWFnZScpXCIgZHJhZ2dhYmxlPVwiZmFsc2VcIiA6c3JjPVwiYnVpbGRNZWRpYVVybChtZWRpYS51cmwsIHRodW1iU2l6ZSlcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgdi1lbHNlIGNsYXNzPVwiZmEgZmEtZmlsZS1vIGZhLWxnXCIgOmRhdGEtbWltZT1cIm1lZGlhLm1pbWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVkaWEtbmFtZS1jZWxsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYnJlYWstd29yZFwiPiB7eyBtZWRpYS5uYW1lIH19IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc20gbXItMSBlZGl0LWJ1dHRvblwiIHYtb246Y2xpY2suc3RvcD1cInJlbmFtZU1lZGlhKG1lZGlhKVwiPiB7eyBULmVkaXRCdXR0b24gfX0gPC9hID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtIGRlbGV0ZS1idXR0b25cIiB2LW9uOmNsaWNrLnN0b3A9XCJkZWxldGVNZWRpYShtZWRpYSlcIj4ge3sgVC5kZWxldGVCdXR0b24gfX0gPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwibWVkaWEudXJsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtIHZpZXctYnV0dG9uXCI+IHt7IFQudmlld0J1dHRvbiB9fSA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNvbFwiPiB7eyBwcmludERhdGVUaW1lKG1lZGlhLmxhc3RNb2RpZnkpIH19IDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jb2wgb3B0aW9uYWwtY29sXCI+IHt7IGlzTmFOKG1lZGlhLnNpemUpPyAwIDogTWF0aC5yb3VuZChtZWRpYS5zaXplIC8gMTAyNCkgfX0gS0I8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY29sIG9wdGlvbmFsLWNvbFwiPnt7IG1lZGlhLm1pbWUgfX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICBgLFxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFQ6IHt9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIHNvcnRCeTogU3RyaW5nLFxuICAgICAgICBzb3J0QXNjOiBCb29sZWFuLFxuICAgICAgICBmaWx0ZXJlZE1lZGlhSXRlbXM6IEFycmF5LFxuICAgICAgICBzZWxlY3RlZE1lZGlhczogQXJyYXksXG4gICAgICAgIHRodW1iU2l6ZTogTnVtYmVyXG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi5ULmltYWdlSGVhZGVyID0gJCgnI3QtaW1hZ2UtaGVhZGVyJykudmFsKCk7XG4gICAgICAgIHNlbGYuVC5uYW1lSGVhZGVyID0gJCgnI3QtbmFtZS1oZWFkZXInKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULmxhc3RNb2RpZnlIZWFkZXIgPSAkKCcjdC1sYXN0TW9kaWZ5LWhlYWRlcicpLnZhbCgpO1xuICAgICAgICBzZWxmLlQuc2l6ZUhlYWRlciA9ICQoJyN0LXNpemUtaGVhZGVyJykudmFsKCk7XG4gICAgICAgIHNlbGYuVC50eXBlSGVhZGVyID0gJCgnI3QtdHlwZS1oZWFkZXInKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULmVkaXRCdXR0b24gPSAkKCcjdC1lZGl0LWJ1dHRvbicpLnZhbCgpO1xuICAgICAgICBzZWxmLlQuZGVsZXRlQnV0dG9uID0gJCgnI3QtZGVsZXRlLWJ1dHRvbicpLnZhbCgpO1xuICAgICAgICBzZWxmLlQudmlld0J1dHRvbiA9ICQoJyN0LXZpZXctYnV0dG9uJykudmFsKCk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGlzTWVkaWFTZWxlY3RlZDogZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zZWxlY3RlZE1lZGlhcy5zb21lKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC51cmwudG9Mb3dlckNhc2UoKSA9PT0gbWVkaWEudXJsLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGJ1aWxkTWVkaWFVcmw6IGZ1bmN0aW9uICh1cmwsIHRodW1iU2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVybCArICh1cmwuaW5kZXhPZignPycpID09IC0xID8gJz8nIDogJyYnKSArICd3aWR0aD0nICsgdGh1bWJTaXplICsgJyZoZWlnaHQ9JyArIHRodW1iU2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hhbmdlU29ydDogZnVuY3Rpb24gKG5ld1NvcnQpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnc29ydENoYW5nZVJlcXVlc3RlZCcsIG5ld1NvcnQpO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb25PZk1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnbWVkaWFUb2dnbGVSZXF1ZXN0ZWQnLCBtZWRpYSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmFtZU1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgncmVuYW1lTWVkaWFSZXF1ZXN0ZWQnLCBtZWRpYSk7ICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZU1lZGlhOiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIGJ1cy4kZW1pdCgnZGVsZXRlTWVkaWFSZXF1ZXN0ZWQnLCBtZWRpYSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdTdGFydDogZnVuY3Rpb24gKG1lZGlhLCBlKSB7XG4gICAgICAgICAgICBidXMuJGVtaXQoJ21lZGlhRHJhZ1N0YXJ0UmVxdWVzdGVkJywgbWVkaWEsIGUpO1xuICAgICAgICB9LFxuICAgICAgICBwcmludERhdGVUaW1lOiBmdW5jdGlvbiAoZGF0ZW1pbGxpcyl7XG4gICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGRhdGVtaWxsaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGQudG9Mb2NhbGVTdHJpbmcoKTsgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIiwiLy8gVGhpcyBjb21wb25lbnQgcmVjZWl2ZXMgYSBsaXN0IG9mIGFsbCB0aGUgaXRlbXMsIHVucGFnZWQuXG4vLyBBcyB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgcGFnZXIsIGl0IHJhaXNlcyBldmVudHMgd2l0aCB0aGUgaXRlbXMgaW4gdGhlIGN1cnJlbnQgcGFnZS5cbi8vIEl0J3MgdGhlIHBhcmVudCdzIHJlc3BvbnNpYmlsaXR5IHRvIGxpc3RlbiBmb3IgdGhlc2UgZXZlbnRzIGFuZCBkaXNwbGF5IHRoZSByZWNlaXZlZCBpdGVtc1xuLy8gPHBhZ2VyPiBjb21wb25lbnRcblZ1ZS5jb21wb25lbnQoJ3BhZ2VyJywge1xuICAgIHRlbXBsYXRlOiBgXG4gICAgPGRpdj5cbiAgICAgICAgPG5hdiBpZD1cIm1lZGlhLXBhZ2VyXCIgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlclwiIGFyaWEtbGFiZWw9XCJQYWdpbmF0aW9uIE5hdmlnYXRpb25cIiByb2xlPVwibmF2aWdhdGlvblwiIDpkYXRhLWNvbXB1dGVkLXRyaWdnZXI9XCJpdGVtc0luQ3VycmVudFBhZ2UubGVuZ3RoXCI+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJwYWdpbmF0aW9uIHBhZ2luYXRpb24tc20gbS0wXCI+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtIG1lZGlhLWZpcnN0LWJ1dHRvblwiIDpjbGFzcz1cIntkaXNhYmxlZCA6ICFjYW5Eb0ZpcnN0fVwiPlxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInBhZ2UtbGlua1wiIGhyZWY9XCIjXCIgOnRhYmluZGV4PVwiY2FuRG9GaXJzdCA/IDAgOiAtMVwiIHYtb246Y2xpY2s9XCJnb0ZpcnN0XCI+e3sgVC5wYWdlckZpcnN0QnV0dG9uIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtXCIgOmNsYXNzPVwie2Rpc2FibGVkIDogIWNhbkRvUHJldn1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJwYWdlLWxpbmtcIiBocmVmPVwiI1wiIDp0YWJpbmRleD1cImNhbkRvUHJldiA/IDAgOiAtMVwiIHYtb246Y2xpY2s9XCJwcmV2aW91c1wiPnt7IFQucGFnZXJQcmV2aW91c0J1dHRvbiB9fTwvYT5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSB2LWlmPVwibGluayAhPT0gLTFcIiBjbGFzcz1cInBhZ2UtaXRlbSBwYWdlLW51bWJlclwiICA6Y2xhc3M9XCJ7YWN0aXZlIDogY3VycmVudCA9PSBsaW5rIC0gMX1cIiB2LWZvcj1cImxpbmsgaW4gcGFnZUxpbmtzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCIgaHJlZj1cIiNcIiB2LW9uOmNsaWNrPVwiZ29UbyhsaW5rIC0gMSlcIiA6YXJpYS1sYWJlbD1cIidHb3RvIFBhZ2UnICsgbGlua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3tsaW5rfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJjdXJyZW50ID09IGxpbmsgLTFcIiBjbGFzcz1cInNyLW9ubHlcIj4oY3VycmVudCk8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiIDpjbGFzcz1cIntkaXNhYmxlZCA6ICFjYW5Eb05leHR9XCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCIgaHJlZj1cIiNcIiA6dGFiaW5kZXg9XCJjYW5Eb05leHQgPyAwIDogLTFcIiB2LW9uOmNsaWNrPVwibmV4dFwiPnt7IFQucGFnZXJOZXh0QnV0dG9uIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtIG1lZGlhLWxhc3QtYnV0dG9uXCIgOmNsYXNzPVwie2Rpc2FibGVkIDogIWNhbkRvTGFzdH1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJwYWdlLWxpbmtcIiBocmVmPVwiI1wiIDp0YWJpbmRleD1cImNhbkRvTGFzdCA/IDAgOiAtMVwiIHYtb246Y2xpY2s9XCJnb0xhc3RcIj57eyBULnBhZ2VyTGFzdEJ1dHRvbiB9fTwvYT5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbSBtbC00IHBhZ2Utc2l6ZS1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgZGlzYWJsZWQgdGV4dC1tdXRlZCBwYWdlLXNpemUtbGFiZWxcIj57eyBULnBhZ2VyUGFnZVNpemVMYWJlbCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJwYWdlU2l6ZVNlbGVjdFwiIGNsYXNzPVwicGFnZS1saW5rXCIgdi1tb2RlbD1cInBhZ2VTaXplXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2LWZvcj1cIm9wdGlvbiBpbiBwYWdlU2l6ZU9wdGlvbnNcIiB2LWJpbmQ6dmFsdWU9XCJvcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3tvcHRpb259fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICA8L25hdj5cbiAgICAgICAgPG5hdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJwYWdpbmF0aW9uIHBhZ2luYXRpb24tc20gbS0wIG10LTJcIj5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gbWwtNCBwYWdlLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgZGlzYWJsZWQgdGV4dC1tdXRlZCBcIj57eyBULnBhZ2VyUGFnZUxhYmVsIH19IHt7Y3VycmVudCArIDF9fS97e3RvdGFsUGFnZXN9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInBhZ2UtaXRlbSBtbC00IHRvdGFsLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgZGlzYWJsZWQgdGV4dC1tdXRlZCBcIj4ge3sgVC5wYWdlclRvdGFsTGFiZWwgfX0ge3t0b3RhbH19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICA8L25hdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGAsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgc291cmNlSXRlbXM6IEFycmF5XG4gICAgfSxcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICAgICAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMzAsIDUwLCAxMDBdLFxuICAgICAgICAgICAgY3VycmVudDogMCxcbiAgICAgICAgICAgIFQ6IHt9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyByZXRyaWV2aW5nIGxvY2FsaXplZCBzdHJpbmdzIGZyb20gdmlld1xuICAgICAgICBzZWxmLlQucGFnZXJGaXJzdEJ1dHRvbiA9ICQoJyN0LXBhZ2VyLWZpcnN0LWJ1dHRvbicpLnZhbCgpO1xuICAgICAgICBzZWxmLlQucGFnZXJQcmV2aW91c0J1dHRvbiA9ICQoJyN0LXBhZ2VyLXByZXZpb3VzLWJ1dHRvbicpLnZhbCgpO1xuICAgICAgICBzZWxmLlQucGFnZXJOZXh0QnV0dG9uID0gJCgnI3QtcGFnZXItbmV4dC1idXR0b24nKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULnBhZ2VyTGFzdEJ1dHRvbiA9ICQoJyN0LXBhZ2VyLWxhc3QtYnV0dG9uJykudmFsKCk7XG4gICAgICAgIHNlbGYuVC5wYWdlclBhZ2VTaXplTGFiZWwgPSAkKCcjdC1wYWdlci1wYWdlLXNpemUtbGFiZWwnKS52YWwoKTtcbiAgICAgICAgc2VsZi5ULnBhZ2VyUGFnZUxhYmVsID0gJCgnI3QtcGFnZXItcGFnZS1sYWJlbCcpLnZhbCgpO1xuICAgICAgICBzZWxmLlQucGFnZXJUb3RhbExhYmVsID0gJCgnI3QtcGFnZXItdG90YWwtbGFiZWwnKS52YWwoKTsgICAgICAgIFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLmN1cnJlbnQgKyAxO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aW91czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5jdXJyZW50IC0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgZ29GaXJzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZ29MYXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnRvdGFsUGFnZXMgLSAxO1xuICAgICAgICB9LFxuICAgICAgICBnb1RvOiBmdW5jdGlvbiAodGFyZ2V0UGFnZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGFyZ2V0UGFnZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgdG90YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZUl0ZW1zID8gdGhpcy5zb3VyY2VJdGVtcy5sZW5ndGggOiAwO1xuICAgICAgICB9LFxuICAgICAgICB0b3RhbFBhZ2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGFnZXMgPSBNYXRoLmNlaWwodGhpcy50b3RhbCAvIHRoaXMucGFnZVNpemUpO1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2VzID4gMCA/IHBhZ2VzIDogMTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNMYXN0UGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCArIDEgPj0gdGhpcy50b3RhbFBhZ2VzO1xuICAgICAgICB9LFxuICAgICAgICBpc0ZpcnN0UGFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCA9PT0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuRG9OZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNMYXN0UGFnZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuRG9QcmV2OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNGaXJzdFBhZ2U7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbkRvRmlyc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0ZpcnN0UGFnZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuRG9MYXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNMYXN0UGFnZTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdGhpcyBjb21wdXRlZCBpcyBvbmx5IHRvIGhhdmUgYSBjZW50cmFsIHBsYWNlIHdoZXJlIHdlIGRldGVjdCBjaGFuZ2VzIGFuZCBsZXZlcmFnZSBWdWUgSlMgcmVhY3Rpdml0eSB0byByYWlzZSBvdXIgZXZlbnQuXG4gICAgICAgIC8vIFRoYXQgZXZlbnQgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBwYXJlbnQgbWVkaWEgYXBwIHRvIGRpc3BsYXkgdGhlIGl0ZW1zIGluIHRoZSBwYWdlLlxuICAgICAgICAvLyB0aGlzIGxvZ2ljIHdpbGwgbm90IHJ1biBpZiB0aGUgY29tcHV0ZWQgcHJvcGVydHkgaXMgbm90IHVzZWQgaW4gdGhlIHRlbXBsYXRlLiBXZSB1c2UgYSBkdW1teSBcImRhdGEtY29tcHV0ZWQtdHJpZ2dlclwiIGF0dHJpYnV0ZSBmb3IgdGhhdC5cbiAgICAgICAgaXRlbXNJbkN1cnJlbnRQYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnBhZ2VTaXplICogdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgdGhpcy5wYWdlU2l6ZTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnNvdXJjZUl0ZW1zLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgYnVzLiRlbWl0KCdwYWdlckV2ZW50JywgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHBhZ2VMaW5rczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgbGlua3MgPSBbXTtcblxuICAgICAgICAgICAgbGlua3MucHVzaCh0aGlzLmN1cnJlbnQgKyAxKTtcblxuICAgICAgICAgICAgLy8gQWRkIDIgaXRlbXMgYmVmb3JlIGN1cnJlbnRcbiAgICAgICAgICAgIHZhciBiZWZvcmVDdXJyZW50ID0gdGhpcy5jdXJyZW50ID4gMCA/IHRoaXMuY3VycmVudCA6IC0xO1xuICAgICAgICAgICAgbGlua3MudW5zaGlmdChiZWZvcmVDdXJyZW50KTtcblxuICAgICAgICAgICAgdmFyIGJlZm9yZUJlZm9yZUN1cnJlbnQgPSB0aGlzLmN1cnJlbnQgPiAxID8gdGhpcy5jdXJyZW50IC0gMSA6IC0xO1xuICAgICAgICAgICAgbGlua3MudW5zaGlmdChiZWZvcmVCZWZvcmVDdXJyZW50KTtcblxuXG4gICAgICAgICAgICAvLyBBZGQgMiBpdGVtcyBhZnRlciBjdXJyZW50XG4gICAgICAgICAgICB2YXIgYWZ0ZXJDdXJyZW50ID0gdGhpcy50b3RhbFBhZ2VzIC0gdGhpcy5jdXJyZW50ID4gMSA/IHRoaXMuY3VycmVudCArIDIgOiAtMTtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goYWZ0ZXJDdXJyZW50KTtcblxuICAgICAgICAgICAgdmFyIGFmdGVyQWZ0ZXJDdXJyZW50ID0gdGhpcy50b3RhbFBhZ2VzIC0gdGhpcy5jdXJyZW50ID4gMiA/IHRoaXMuY3VycmVudCArIDMgOiAtMTtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goYWZ0ZXJBZnRlckN1cnJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gbGlua3M7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIHNvdXJjZUl0ZW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSAwOyAvLyByZXNldHRpbmcgY3VycmVudCBwYWdlIGFmdGVyIHJlY2VpdmluZyBhIG5ldyBsaXN0IG9mIHVucGFnZWQgaXRlbXNcbiAgICAgICAgfSxcbiAgICAgICAgcGFnZVNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiIsIi8vIDxzb3J0LWluZGljYXRvcj4gY29tcG9uZW50XG5WdWUuY29tcG9uZW50KCdzb3J0SW5kaWNhdG9yJywge1xuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgdi1zaG93PVwiaXNBY3RpdmVcIiBjbGFzcz1cInNvcnQtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJhc2NcIj48aSBjbGFzcz1cInNtYWxsIGZhIGZhLWNoZXZyb24tdXBcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gdi1zaG93PVwiIWFzY1wiPjxpIGNsYXNzPVwic21hbGwgZmEgZmEtY2hldnJvbi1kb3duXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGAsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgY29sbmFtZTogU3RyaW5nLFxuICAgICAgICBzZWxlY3RlZGNvbG5hbWU6IFN0cmluZyxcbiAgICAgICAgYXNjOiBCb29sZWFuXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbmFtZS50b0xvd2VyQ2FzZSgpID09IHRoaXMuc2VsZWN0ZWRjb2xuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiJdfQ==
