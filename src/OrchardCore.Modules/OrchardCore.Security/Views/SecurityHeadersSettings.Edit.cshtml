@using Microsoft.AspNetCore.Mvc.Localization
@using OrchardCore.Security.Options
@using OrchardCore.Security.ViewModels
@model SecuritySettingsViewModel

@functions
{
    public LocalizedHtmlString GetPermissionPolicyName(string value)
    {
        LocalizedHtmlString name = null;
        if(value == PermissionsPolicyValue.Accelerometer)
        {
            name = T["Accelerometer"];
        }
        else if(value == PermissionsPolicyValue.AmbientLightSensor)
        {
            name = T["Ambient Light Sensor"];
        }
        else if(value == PermissionsPolicyValue.Autoplay)
        {
            name = T["Autoplay"];
        }
        else if(value == PermissionsPolicyValue.Camera)
        {
            name = T["Camera"];
        }
        else if(value == PermissionsPolicyValue.EncryptedMedia)
        {
            name = T["Encrypted Media"];
        }
        else if(value == PermissionsPolicyValue.FullScreen)
        {
            name = T["Full Screen"];
        }
        else if(value == PermissionsPolicyValue.Geolocation)
        {
            name = T["Geolocation"];
        }
        else if(value == PermissionsPolicyValue.Gyroscope)
        {
            name = T["Gyroscope"];
        }
        else if(value == PermissionsPolicyValue.Magnetometer)
        {
            name = T["Magnetometer"];
        }
        else if(value == PermissionsPolicyValue.Microphone)
        {
            name = T["Microphone"];
        }
        else if(value == PermissionsPolicyValue.Midi)
        {
            name = T["Midi"];
        }
        else if(value == PermissionsPolicyValue.Notifications)
        {
            name = T["Notifications"];
        }
        else if(value == PermissionsPolicyValue.Payment)
        {
            name = T["Payment"];
        }
        else if(value == PermissionsPolicyValue.PictureInPicture)
        {
            name = T["Picture In Picture"];
        }
        else if(value == PermissionsPolicyValue.Push)
        {
            name = T["Push"];
        }
        else if(value == PermissionsPolicyValue.Speaker)
        {
            name = T["Speaker"];
        }
        else if(value == PermissionsPolicyValue.SyncXhr)
        {
            name = T["Synchronous XML Http Request"];
        }
        else if(value == PermissionsPolicyValue.Usb)
        {
            name = T["USB"];
        }
        else if(value == PermissionsPolicyValue.Vibrate)
        {
            name = T["Vibrate"];
        }
        else if(value == PermissionsPolicyValue.VR)
        {
            name = T["VR"];
        }

        return name;
    }
}

<p class="alert alert-warning">
    @T["The current tenant will be reloaded when the settings are saved."]
</p>

<div class="form-group" asp-validation-class-for="FrameOptions">
    <label asp-for="FrameOptions">@T["Frame Options"]</label>
    <select asp-for="FrameOptions" class="form-control">
        <option value="@FrameOptionsValue.Deny" selected="@(Model.FrameOptions == FrameOptionsValue.Deny)">
            @T["Deny"]
        </option>
        <option value="@FrameOptionsValue.SameOrigin" selected="@(Model.FrameOptions == FrameOptionsValue.SameOrigin)">
            @T["Same origin"]
        </option>
    </select>
    <span asp-validation-for="FrameOptions"></span>
    <span class="hint">@T["Tells the browser whether you want to allow your site to be displayed in a frame or not."]</span>
</div>
<div class="form-group">
    <label asp-for="PermissionsPolicy">@T["Permissions Policy"]</label>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>@T["Name"]</th>
                <th>@T["None"]</th>
                <th>@T["Any"]</th>
                <th>@T["Self"]</th>
                <th style="width:40%"></th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < Model.PermissionsPolicy.Length; i++)
            {
                var keyValueSeparatorIndex = Model.PermissionsPolicy[i].IndexOf('=');
                var key = Model.PermissionsPolicy[i].Substring(0, keyValueSeparatorIndex);
                var value = Model.PermissionsPolicy[i].Substring(keyValueSeparatorIndex + 1);
                var originSeparatorIndex = value.IndexOf(' ');
                var originType = Model.PermissionsPolicy[i].Substring(keyValueSeparatorIndex + 1);
                var allowedOrigins = String.Empty;
                if (originSeparatorIndex > -1)
                {
                    originType = value.Substring(0, originSeparatorIndex);
                    allowedOrigins = value.Substring(originSeparatorIndex + 1);
                }
                <tr>
                    <td>@GetPermissionPolicyName(key)</td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="@key" value="None" @(originType == PermissionsPolicyOriginValue.None ? "checked" : null) onchange="changeOrigin(this, '@PermissionsPolicyOriginValue.None');">
                        </div>
                    </td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="@key" value="Any" @(originType == PermissionsPolicyOriginValue.Any ? "checked" : null) onchange="changeOrigin(this, '@PermissionsPolicyOriginValue.Any');">
                        </div>
                    </td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="@key" value="Self" @(originType == PermissionsPolicyOriginValue.Self ? "checked" : null) onchange="changeOrigin(this, '@PermissionsPolicyOriginValue.Self');">
                        </div>
                    </td>
                    <td>
                        <div class="form-group mb-0">
                            <input class="form-control d-@(originType == PermissionsPolicyOriginValue.Self ? "block" : "none")" id="@(key)AllowedOrigins" placeholder="https://www.domain.com https://www.another.domain.com" value="@allowedOrigins" oninput="changeAllowedOrigins(this)" />
                            @Html.HiddenFor(m => m.PermissionsPolicy[i])
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <span class="hint">@T["Allows a site to control which features and APIs can be used in the browser."]</span>
</div>
<div class="form-group" asp-validation-class-for="ReferrerPolicy">
    <label asp-for="ReferrerPolicy">@T["Referrer Policy"]</label>
    <select asp-for="ReferrerPolicy" class="form-control">
        <option value="@ReferrerPolicyValue.NoReferrer" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.NoReferrer)">
            @T["No referrer"]
        </option>
        <option value="@ReferrerPolicyValue.NoReferrerWhenDowngrade" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.NoReferrerWhenDowngrade)">
            @T["No referrer when downgrade"]
        </option>
        <option value="@ReferrerPolicyValue.Origin" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.Origin)">
            @T["Origin"]
        </option>
        <option value="@ReferrerPolicyValue.OriginWhenCrossOrigin" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.OriginWhenCrossOrigin)">
            @T["Origin when cross origin"]
        </option>
        <option value="@ReferrerPolicyValue.SameOrigin" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.SameOrigin)">
            @T["Same origin"]
        </option>
        <option value="@ReferrerPolicyValue.StrictOrigin" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.StrictOrigin)">
            @T["Strict origin"]
        </option>
        <option value="@ReferrerPolicyValue.StrictOriginWhenCrossOrigin" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.StrictOriginWhenCrossOrigin)">
            @T["Strict origin when cross origin"]
        </option>
        <option value="@ReferrerPolicyValue.UnsafeUrl" selected="@(Model.ReferrerPolicy == ReferrerPolicyValue.UnsafeUrl)">
            @T["Unsafe URL"]
        </option>
    </select>
    <span asp-validation-for="ReferrerPolicy"></span>
    <span class="hint">@T["Allows a site to control how much information the browser includes when navigating away from a page."]</span>
</div>
<script>
    function changeOrigin(e, origin) {
        var ele = $('#' + e.name + 'AllowedOrigins');

        if (e.value == "Self") {
            ele.removeClass('d-none').addClass('d-block');

            var allowedOrigins = ele.val();

            if (ele.val() != '') {
                origin += ' ' + allowedOrigins;
            }
        }
        else {
            ele.removeClass('d-block').addClass('d-none');
        }

        var permissionValue = ele.siblings();

        ele.siblings().val(permissionValue.val().substr(0, permissionValue.val().indexOf('=') + 1) +  origin);
    }

    function changeAllowedOrigins(e) {
        var permissionValue = $(e).siblings();
        var value = permissionValue.val().substr(0, permissionValue.val().indexOf('=self') + 5);
        
        if (e.value != '') {
            value += ' ';
        }

        permissionValue.val(value + e.value);
    }
</script>
