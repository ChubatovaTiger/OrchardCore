@using OrchardCore.Forms.Models
@model ShapeViewModel<TextAreaPart>
@{
    var formElementPart = Model.Value.ContentItem.As<FormElementPart>();
    var formInputElementPart = Model.Value.ContentItem.As<FormInputElementPart>();
    var elementId = formElementPart.Id;
    var fieldName = formInputElementPart.Name;
    var fieldId = !string.IsNullOrEmpty(elementId) ? elementId : !string.IsNullOrEmpty(fieldName) ? Html.GenerateIdFromName(fieldName) : default(string);
    var fieldValue = Model.Value.DefaultValue?.Trim();
    var fieldClass = "form-control";

    if (ViewData.ModelState.TryGetValue(fieldName, out var fieldEntry))
    {
        fieldValue = fieldEntry.AttemptedValue;
        if (fieldEntry.Errors.Count > 0)
        {
            fieldClass = "form-control input-validation-error";
        }
    }
}

@if (Model.Value.LabelOption == LabelOptions.Standard)
{
    <label for="@fieldId">@Model.Value.Label</label>
}
else if (Model.Value.LabelOption == LabelOptions.ScreenReaders)
{
    <label for="@fieldId" class="visually-hidden">@Model.Value.Label</label>
}

<textarea id="@fieldId" name="@fieldName" class="@fieldClass" placeholder="@Model.Value.Placeholder">@fieldValue</textarea>

@if (Model.Value.ValidationOption == ValidationOptions.Standard)
{
    // HtmlFieldPrefix is the PartName i.e. ValidationPart, which is not needed in Display.
    var htmlFieldPrefix = ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix;
    ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = String.Empty;

    @Html.ValidationMessage(fieldName)

    ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix;
}
