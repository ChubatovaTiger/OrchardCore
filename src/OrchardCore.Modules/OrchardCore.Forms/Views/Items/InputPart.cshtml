@using OrchardCore.Forms.Models
@model ShapeViewModel<InputPart>
@{
    var formElementPart = Model.Value.ContentItem.As<FormElementPart>();
    var formInputElementPart = Model.Value.ContentItem.As<FormInputElementPart>();
    var elementId = formElementPart.Id;
    var fieldName = formInputElementPart.Name;
    var fieldId = !String.IsNullOrEmpty(elementId) ? elementId : !String.IsNullOrEmpty(fieldName) ? Html.GenerateIdFromName(fieldName) : default(string);
    var fieldValue = Model.Value.DefaultValue;
    var fieldClass = "form-control";
    var isChecked = false;

    if (ViewData.ModelState.TryGetValue(fieldName, out var fieldEntry))
    {
        if (Model.Value.Type == "checkbox" || Model.Value.Type == "radio")
        {
            isChecked = fieldEntry.AttemptedValue == fieldValue;
        }
        else
        {
            fieldValue = fieldEntry.AttemptedValue;
        }

        if (fieldEntry.Errors.Count > 0)
        {
            fieldClass = "form-control input-validation-error";
        }
    }
}
@if (Model.Value.LabelOption == LabelOptions.Standard)
{
    <label for="@fieldId">@Model.Value.Label</label>
}
else if (Model.Value.LabelOption == LabelOptions.ScreenReaders)
{
    <label for="@fieldId" class="visually-hidden">@Model.Value.Label</label>
}

<input id="@fieldId" name="@fieldName" type="@Model.Value.Type" class="@fieldClass" value="@fieldValue" placeholder="@Model.Value.Placeholder" @(isChecked ? "checked" : "") />

@if (Model.Value.ValidationOption == ValidationOptions.Standard)
{
    // HtmlFieldPrefix is the PartName i.e. ValidationPart, which is not needed in Display.
    var htmlFieldPrefix = ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix;
    ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = String.Empty;

    @Html.ValidationMessage(fieldName)

    ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix;
}
