/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function initializeKvpEditor(elem, keys, values) {
  var data = [];

  for (i = 0; i < keys.length; i++) {
    data.push({
      key: keys[i],
      value: values[i]
    });
  }

  var store = {
    debug: false,
    state: {
      options: data
    },
    addOption: function addOption() {
      if (this.debug) {
        console.log('add option triggered');
      }

      ;
      this.state.options.push({
        key: '',
        value: ''
      });
    },
    removeOption: function removeOption(index) {
      if (this.debug) {
        console.log('remove option triggered with', index);
      }

      ;
      this.state.options.splice(index, 1);
    },
    getKeys: function getKeys() {
      if (this.debug) {
        console.log('getKeys triggered');
      }

      ;
      return JSON.stringify(this.state.options.map(function (x) {
        return x.key;
      }));
    },
    getValues: function getValues() {
      if (this.debug) {
        console.log('getValues triggered');
      }

      ;
      return JSON.stringify(this.state.options.map(function (x) {
        return x.value;
      }));
    }
  };
  var kvpTable = {
    template: '#kvp-table',
    props: ['data'],
    name: 'kvp-table',
    methods: {
      add: function add() {
        store.addOption();
      },
      remove: function remove(index) {
        store.removeOption(index);
      },
      getKeys: function getKeys() {
        return store.getKeys();
      },
      getValues: function getValues() {
        return store.getValues();
      }
    }
  };
  new Vue({
    components: {
      kvpTable: kvpTable
    },
    data: {
      sharedState: store.state
    },
    el: elem,
    methods: {}
  });
}