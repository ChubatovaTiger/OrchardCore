@model OrchardCore.ContentFields.ViewModels.EditHtmlFieldViewModel

@{
    var settings = Model.PartFieldDefinition.GetSettings<HtmlFieldSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.Field.ContentItem);
}

<script name="tinymce" depends-on="admin" asp-src="~/OrchardCore.ContentFields/Scripts/tinymce/tinymce.min.js" at="Foot"></script>
<script name="tinymceconfig" depends-on="admin, tinymce" asp-src="~/OrchardCore.ContentFields/Scripts/config.tinymce.media.js" at="Foot"></script>

<fieldset class="form-group">
    <label asp-for="Html">@Model.PartFieldDefinition.DisplayName()</label>
    @if (culture.IsRightToLeft())
    {
        <div style="text-align:right">
            <textarea asp-for="Html" class="form-control"></textarea>
        </div>
    }
    else
    {
        <textarea asp-for="Html" class="form-control"></textarea>
    }

    @if (!String.IsNullOrEmpty(settings.Hint))
    {
        <span class="hint">@settings.Hint</span>
    }
</fieldset>

<script at="Foot" depends-on="admin, tinymceconfig"> 
    tinymceConfig.selector = '#@Html.IdFor(m => m.Html)';
    tinymceConfig.init_instance_callback = function (editor) {
        editor.on('Change', function (e) {
            console.log('Editor contents was changed.');
            editor.save();
            $(document).trigger('contentpreview:render');
        });
    };
    tinymceConfig.init_instance_callback = function (editor) {
        editor.on('NodeChange', function (e) {
            console.log('Editor node contents was changed.');
            editor.save();
            $(document).trigger('contentpreview:render');
        });
    };

    tinymce.init(tinymceConfig);
</script>