@model OrchardCore.ContentFields.ViewModels.EditContentPickerFieldViewModel
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.ContentFields.Settings;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
    var settings = Model.PartFieldDefinition.Settings.ToObject<ContentPickerFieldSettings>();
    var selectedItems = Html.Raw(JsonConvert.SerializeObject(Model.SelectedItems, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }));
}

<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" at="Foot"></script>
<style asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></style>

<div id="vue-multiselect">
    <fieldset class="form-group">
        <label asp-for="ContentItemIds">@Model.PartFieldDefinition.DisplayName()</label>
        <input asp-for="ContentItemIds" type="hidden" v-model="selectedIds" />
        <vue-multiselect v-model="value" :options="options" track-by="contentItemId" label="displayText" @@input="onInput" @@open="initialize" @@search-change="asyncFind" :multiple="@settings.Multiple.ToString().ToLowerInvariant()" :searchable="true" :close-on-select="true" :show-labels="true" placeholder="Pick a value"></vue-multiselect>
        @if (!String.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint">@settings.Hint</span>
        }
        <pre class="language-json"><code>{{ value }}</code></pre>
    </fieldset>
</div>

<script at="Foot">
    Vue.component('vue-multiselect', window.VueMultiselect.default);

    new Vue({
        el: '#vue-multiselect',
        data: {
            initialized: false,
            value: @selectedItems,
            options: [],
            selectedIds: '@Model.ContentItemIds'
        },
        methods: {
            asyncFind(query) {
                this.isLoading = true;
                return fetch('/test1/ContentPicker?contentTypes=LiquidPage&contentTypes=LandingPage&page=1&pageSize=10') // TODO: get tenant from config, send query
                    .then(res => {
                        res.json().then(json => {
                            this.options = json;
                            this.isLoading = false;
                        })
                    })
            },
            initialize() {
                if (this.initialized) {
                    return;
                }
                this.asyncFind().then(this.initialized = true);
            },
            onInput(value) {
                if (Array.isArray(value)) {
                    this.selectedIds = value.map(x => x.contentItemId).join(',');
                } else if (value) {
                    this.selectedIds = value.contentItemId;
                } else {
                    this.selectedIds = '';
                }
            }
        }
    })
</script>
