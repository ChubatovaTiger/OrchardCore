@model OrchardCore.ContentTypes.GraphQL.ViewModels.GraphQLContentTypePartSettingsViewModel

@{
    var options = Model.Options;
    var settings = Model.Settings;

    var collapsedByDefault = options.IsCollapsedByDefault(Model.Definition);
    var collapsed = collapsedByDefault ? true : settings.Collapse;

    var hiddenByDefault = options.IsHiddenByDefault(Model.Definition);
    var hidden = hiddenByDefault ? true : settings.Hidden;
}


<div class="form-check">
    <input type="checkbox" class="form-check-input" asp-for="Settings.Collapse" checked="@collapsed" asp-is-disabled="@collapsedByDefault" />
    <label class="form-check-label" asp-for="Settings.Collapse">@T["Collapse"]</label>
    @if (collapsedByDefault)
    {
        <span class="hint">@T["NB. Setting is collapsed by default, and cannot be overwritten."]</span>
    }
    else
    {
        <span class="hint">@T["Check to collapse fields in the GraphQL schema."]</span>
    }
</div>

<div class="form-group mb-3 mt-3">
    <label class="form-label" asp-for="Settings.PreventFieldNameCollisionMethod">@T["Prevent Field Name Collision Method"]</label>
    <select class="form-select" asp-for="Settings.PreventFieldNameCollisionMethod" asp-items="settings.AvailablePreventFieldNameCollisionMethods">
        <option value="" disabled>@T["Choose prevent name collision method"]</option>
    </select>
</div>

<div class="form-group mb-3" asp-validation-class-for="Settings.PreventFieldNameCollisionCustomValue">
    <label class="form-label" asp-for="Settings.PreventFieldNameCollisionCustomValue">@T["Custom Suffix/Prefix"]</label>
    <input class="form-control" asp-for="Settings.PreventFieldNameCollisionCustomValue" />
    <span class="text-danger" asp-validation-for="Settings.PreventFieldNameCollisionCustomValue"></span>
</div>

<div class="form-check mb-3">
    <input type="checkbox" class="form-check-input" asp-for="Settings.Hidden" checked="@hidden" asp-is-disabled="@hiddenByDefault" />
    <label class="form-check-label" asp-for="Settings.Hidden">@T["Hide"]</label>
    @if (hiddenByDefault)
    {
        <span class="hint">@T["Setting is hidden by default, and cannot be overwritten."]</span>
    }
    else
    {
        <span class="hint">@T["Check to hide part from the GraphQL schema."]</span>
    }
</div>

<script at="Foot">
    (function () {
        const collapseCheck = document.getElementById("@(Html.IdFor(x => x.Settings.Collapse))");
        const methodSelector = document.getElementById("@(Html.IdFor(x => x.Settings.PreventFieldNameCollisionMethod))");
        const customValueInput = document.getElementById("@Html.IdFor(x => x.Settings.PreventFieldNameCollisionCustomValue)");
        const setCustomValueInputVisibility = (checked = true) => customValueInput.parentElement.style.display = checked &&
            ["AddCustomPrefix", "AddCustomSuffix"].includes(methodSelector.value) ? 'block' : 'none';
        methodSelector.addEventListener('change', (e) => {
            setCustomValueInputVisibility();
        });
        const setFieldsVisibility = (checked) => {
            methodSelector.parentElement.style.display = checked ? 'block' : 'none';
            setCustomValueInputVisibility(checked);
        };
        collapseCheck.addEventListener('change', (e) => {
            setFieldsVisibility(e.target.checked);
        });
        setFieldsVisibility(@(collapsed.ToString().ToLower()));   
    })();
</script>