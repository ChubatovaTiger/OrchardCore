@using OrchardCore.ContentManagement
@using OrchardCore.Flows.Models
@using OrchardCore.Flows.ViewModels
@using OrchardCore.Mvc.Utilities

@model FlowPartViewModel
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetShapes = await Task.WhenAll(Model.FlowPart.Widgets.Select(widget => ContentItemDisplayManager.BuildDisplayAsync(widget, Model.BuildPartDisplayContext.Updater, Model.BuildPartDisplayContext.DisplayType, Model.BuildPartDisplayContext.GroupId)));
}

<section class="flow">
    @foreach (dynamic widgetContent in widgetShapes)
    {
        if (widgetContent.ContentItem is ContentItem widget)
        {
            var flowMetadata = widget.As<FlowMetadata>();

            if (flowMetadata != null)
            {
                widgetContent.Classes.Add("widget");
                widgetContent.Classes.Add("widget-" + widget.ContentItem.ContentType.HtmlClassify());
                widgetContent.Classes.Add("widget-align-" + flowMetadata.Alignment.ToString().ToLowerInvariant());
                widgetContent.Classes.Add("widget-size-" + flowMetadata.Size);
            }

            @await DisplayAsync(widgetContent)
        }
    }
</section>