@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.Flows.Models;
@using OrchardCore.Flows.ViewModels;
@using OrchardCore.Mvc.Utilities;

@model BagPartEditViewModel

@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetTemplatePlaceholderId = Html.Id("widgetTemplatePlaceholder");
    var parentContentType = Model.BagPart.ContentItem.ContentType;
    string partName = ((dynamic)Model).Metadata.Name;
}

<script asp-name="jQuery-ui" at="Foot"></script>
<style asp-name="oc-flows-edit" at="Head"></style>
<script asp-name="oc-flows-edit" at="Foot"></script>

<div class="form-group">
    <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder widget-template-placeholder-bagpart bagpart-@partName.HtmlClassify() row mx-0" >
        @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }
        @foreach (var widget in Model.BagPart.ContentItems)
        {
            //Create a Card Shape
            dynamic contentCard = await New.ContentCard(
                // FOR Updater
                CollectionShape: Model,
                //Shape Specific
                CollectionShapeType: nameof(BagPart),
                ContentItem: widget,
                BuildEditor: true,
                ParentContentType: parentContentType,
                CollectionPartName :partName,
                CollectionPartName: partName,
                ContainedContentTypes: Model.ContainedContentTypeDefinitions,
                //Card Specific Properties
                TargetId: widgetTemplatePlaceholderId,
                Inline: false,
                CanMove: true,
                CanDelete: true,
                CanInsert: false,
                InsertArea : "OrchardCore.Flows",
                //Input hidden
                //Prefixes
                PrefixValue: widget.ContentItemId,
                HtmlFieldPrefix: htmlFieldPrefix,
                PrefixesId: Html.IdFor(x => x.Prefixes),
                PrefixesName: Html.NameFor(x => x.Prefixes),
                //Content Types
                ContentTypesId: Html.IdFor(x => x.ContentTypes),
                ContentTypesName: Html.NameFor(x => x.ContentTypes)
            );
            @await DisplayAsync(contentCard)
        }
    </div>

    @await DisplayAsync(await New.ToolInsertWidget(
                 CanInsert: true,
                 AppendWidget: true,
                 ShowInsertLabel : true,
                 TargetId: widgetTemplatePlaceholderId,
                 ContainedContentTypes: Model.ContainedContentTypeDefinitions,
                 BuildEditorRouteValues: new RouteValueDictionary(new
                 {
                    area = "OrchardCore.Flows",
                    prefixesName = Html.NameFor(x => x.Prefixes),
                    contentTypesName = Html.NameFor(x => x.ContentTypes),
                    targetId = widgetTemplatePlaceholderId,
                    flowmetadata = false,
                    parentContentType = parentContentType,
                    partName = partName
                })))

    <script at="Foot">
    @*Only apply sortable if element is present in dom, do not call sortable on scripts for mock widgets *@
    if ($('#@widgetTemplatePlaceholderId').length == 1) {
        $("#@widgetTemplatePlaceholderId").sortable({
            handle: ".widget-editor-handle",
            cursor: "move",
            opacity: 0.7,
            tolerance: "pointer",
            placeholder: {
                element: function(currentItem) {
                    return $('<div class="widget-dragdrop-placeholder"><div></div></div>')[0];
                },
                update: function (container, p) {
                    return;
                }
            },
            toleranceElement: '> div',
            start: function (event, ui) {
                widgetDragItem = ui.item;
                lastContainer = ui.item.parent();
                lastContainer.toggleClass('widget-dropzone-hint');
                widgetDragItem.find('.card').first().toggleClass('border-primary');
                var classList = widgetDragItem.attr('class').split(' ');
                $.each(classList, function (id, item) {
                    if (item.indexOf('col-md-') === 0) ui.placeholder.addClass(item);
                });

            },
            stop: function (event, ui) {
                lastContainer.toggleClass('widget-dropzone-hint');
                widgetDragItem.find('.card').first().toggleClass('border-primary');

                //clear the global variables
                widgetDragItem = null;
                lastContainer = null;
                widgetItemSourceId = null;
                widgetItemDestId = null;
                $(document).trigger('contentpreview:render');
            },
            over: function (event, ui) {
                var $self = $(this);
                if (lastContainer[0] != this) {
                    lastContainer.toggleClass('widget-dropzone-hint');
                    lastContainer = $self;
                    $self.toggleClass('widget-dropzone-hint');
                }
            }
        });
    }
    </script>
</div>
