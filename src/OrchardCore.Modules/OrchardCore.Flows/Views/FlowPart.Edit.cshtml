@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.Flows.ViewModels;
@using OrchardCore.ContentManagement;

@model FlowPartEditViewModel

@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.Settings.ToObject<ContentTypeSettings>().Stereotype == "Widget");
    var widgetTemplatePlaceholderId = Html.Id("widgetTemplatePlaceholder");
}

<script asp-name="jQuery-ui" at="Foot"></script>

<fieldset class="form-group">
    <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder row " style="min-height:50px;">
        @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }
        @foreach (var widget in Model.FlowPart.Widgets)
        {
            var prefix = Guid.NewGuid().ToString("n");
            dynamic widgetEditor = await ContentItemDisplayManager.BuildEditorAsync(widget, Model.Updater, false, "", prefix);

            var metadata = ((ContentItem)widgetEditor.ContentItem).As<OrchardCore.Flows.Models.FlowMetadata>();

            var colSize = 100;
            switch (metadata.Size)
            {
                case 25:
                    colSize = 3;
                    break;
                case 33:
                    colSize = 4;
                    break;
                case 50:
                    colSize = 6;
                    break;
                case 66:
                    colSize = 8;
                    break;
                case 75:
                    colSize = 9;
                    break;
                default:
                    colSize = 12;
                    break;

            }
            <div class="widget-template col-@colSize">
                @{
                    widgetEditor.PrefixesName = Html.NameFor(x => x.Prefixes);
                    widgetEditor.ContentTypesName = Html.NameFor(x => x.ContentTypes);
                    widgetEditor.TargetId = widgetTemplatePlaceholderId;

                    widgetEditor.Metadata.Alternates.Add("Widget_Edit__Flow");
                }

                @await DisplayAsync(widgetEditor)

                @{ this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix; }
                <input type="hidden" asp-for="Prefixes" value="@prefix" />
                <input type="hidden" asp-for="ContentTypes" value="@widget.ContentType" />
            </div>
        }
    </div>

    <div class="btn-group ">
        <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @T["Add Widget"]
        </button>
        <div class="dropdown-menu">
            @foreach (var type in widgetContentTypes)
            {
                <a class="dropdown-item add-widget  btn-sm"
                   data-target-id="@widgetTemplatePlaceholderId"
                   data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
                   data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
                   data-widget-type="@type.Name"
                   data-flowmetadata="true"
                   href="javascript:;">@type.DisplayName</a>
            }
        </div>
    </div>


    @if (Context.Items["FlowPart.Edit"] == null)
    {
        Context.Items["FlowPart.Edit"] = new object();
        <input type="hidden" id="buildEditorUrl" value="@Url.Action("BuildEditor", "Admin", new { area = "OrchardCore.Flows" })" />

        @foreach (var type in widgetContentTypes)
        {
            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, true, "", Guid.NewGuid().ToString("n")));
        }

        <script asp-src="~/OrchardCore.Flows/Scripts/flows.edit.js" at="Foot" depends-on="admin"></script>
        <style asp-src="~/OrchardCore.Flows/Styles/flows.edit.css"></style>
    }

    <script at="Foot">
        var oldList, newList, item, lastOver, sourceId, destId;      
        $("#@widgetTemplatePlaceholderId").sortable({
            handle: ".widget-editor-header",
            cursor: "move",            
            
            toleranceElement: '> div',
            connectWith: '.widget-template-placeholder',
            start: function (event, ui) {
                item = ui.item;
                lastOver = item.parent();
                lastOver.toggleClass('highlight'); 
                sourceId = item.parent().attr('id');
                ui.placeholder.height(ui.helper.outerHeight());
            },
            stop: function (event, ui) {
                lastOver.toggleClass('highlight');
         
                destId = item.parent().attr('id');

                if (destId !== sourceId) {

                    var inputs = item.children('input');

                    var destination = $('#' + destId).closest('.widget-template')                    
                    var source = $('#' + sourceId).closest('.widget-template');

                    var sourceGuid = sourceId.substring(0, sourceId.indexOf('_') + 1);
                    
                    var sourceNameGuid = source.children("input[name*='Prefixes']").val() + '.';
                    
                    if (destination.length > 0) {

                        var destGuid = destId.substring(0, destId.indexOf('_') + 1);

                        var destNameGuid = destination.children("input[name*='Prefixes']").val() + '.';

                        if (source.length) {
                       
                            inputs.each(function (index, item) {
                                $(this).attr('id', $(this).attr('id').replace(sourceGuid, destGuid));
                                $(this).attr('name', $(this).attr('name').replace(sourceNameGuid, destNameGuid));
                            });

                        } else {

                            inputs.each(function (index, item) {
                                $(this).attr('id', destGuid + $(this).attr('id'));
                                $(this).attr('name', destNameGuid  + $(this).attr('name'));
                            });
                        }

                    }
                    else if (source.length > 0) {
                    
                        inputs.each(function (index, item) {
                            $(this).attr('id', $(this).attr('id').replace(sourceGuid, '') );
                            $(this).attr('name', $(this).attr('name').replace(sourceNameGuid, ''));
                        });
                    }

                }                               

                $(document).trigger('contentpreview:render');
            },            
            change: function (event, ui) {
                if (ui.sender) newList = ui.placeholder.parent().parent();
            },
            update: function (event, ui) {
                
            },
            over: function (event, ui) {
                
                if (lastOver[0] != this) {
                    lastOver.toggleClass('highlight');
                    lastOver = $(this);
                    $(this).toggleClass('highlight');
                }
            }
        });          
    </script>
</fieldset>