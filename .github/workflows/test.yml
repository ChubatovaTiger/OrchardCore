name: Build and Test on multiple OS
on: 
 # pull_request:
  push:
    branches:
   #   - 'dev'
    #  - 'master'
      - 'jptissot/github_actions'
jobs:
  test:
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        dotnet: ['3.1.404']
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: Unit Tests
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core ${{ matrix.dotnet }} on ${{ matrix.os }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}
    - name: Build and test
      run: |
        dotnet build --configuration Release
        dotnet test -c Release --no-build ./test/OrchardCore.Tests/OrchardCore.Tests.csproj
  test_functional_mvc:
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node12.13.0-chrome78-ff70
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
    - name: Functional test
      run: |
        cd test/Functional
        npm install
        npm run mvc:test
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: functional-mvc-screenshots
        path: test/Functional/mvc-tests/cypress/screenshots
        retention-days: 3
  test_functional_cms_sqlite:
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node12.13.0-chrome78-ff70
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
    - name: Functional test
      run: |
        cd test/Functional
        npm install
        npm run cms:test
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: functional-cms-sqlite-screenshots
        path: test/Functional/cms-tests/cypress/screenshots
        retention-days: 3
  test_functional_cms_postgresql:
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node12.13.0-chrome78-ff70
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: app
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
    - name: Functional test
      run: |
        export OrchardCore__ConnectionString="User ID=postgres;Password=admin;Host=postgres;Port=5432;Database=app;"
        export OrchardCore__DatabaseProvider="Postgres"
        cd test/Functional
        npm install
        npm run cms:test
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: functional-cms-postgresql-screenshots
        path: test/Functional/cms-tests/cypress/screenshots
        retention-days: 3
  test_functional_cms_mysql:
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node12.13.0-chrome78-ff70
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: test123
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404
    - name: Functional test
      run: |
        export OrchardCore__ConnectionString="server=mariadb;uid=root;pwd=test123;database=test"
        export OrchardCore__DatabaseProvider="Mysql"
        cd test/Functional
        npm install
        npm run cms:test
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: functional-cms-mysql-screenshots
        path: test/Functional/cms-tests/cypress/screenshots
        retention-days: 3
