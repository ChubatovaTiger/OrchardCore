name: Frontend Assets Build Validation

on: 
  push:
    paths-ignore:
      - '**/*.md'
      - 'mkdocs.yml'
      - 'src/docs/**/*'
    branches: [ main ]
  pull_request:
    branches: [ main, release/** ]

# concurrency:
#   group: ${{ github.head_ref || github.run_id }}-assets_validation
#   cancel-in-progress: true

jobs:
  test-npm-build:
    name: Test building assets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Rebuild packages
      run: |
        npm install
        gulp rebuild
    - name: Check if git has changes
      shell: pwsh
      run: |
        $changes = git status --porcelain
        $pattern = "warning: in the working copy of '.*', CRLF will be replaced by LF the next time Git touches it"
        $filteredChangeLines = $changes -split "`n" | Where-Object { $PSItem -notmatch $pattern }

        if ($changes)
        {
            Write-Output 'Please make sure to build the assets properly before pushing, see https://docs.orchardcore.net/en/latest/docs/guides/gulp-pipeline/.'
            Write-Output 'The following files changed (not counting files with "warning: in the working copy of '/path/to/file', CRLF will be replaced by LF the next time Git touches it"):'
            Write-Output $($filteredChangeLines -join "`r`n")
            Write-Output 'You can also download the attached artifact to see the changes.'
            Write-Output ''
            Write-Output '---------------------------------------'
            Write-Output ''

            $changedFiles = @()

            foreach ($line in $filteredChangeLines) {
                if ($line -match '^\s?(M|A|\?\?)\s+(.*)$')
                {
                    $changeType = $matches[1]
                    $file = $matches[2]

                    Write-Output "Diff for: $file"

                    if ($changeType -eq 'M')
                    {
                        # File is modified; use git diff to get the diff of the modified file.
                        git diff -- $file
                    }
                    elseif ($changeType -eq '??')
                    {
                        # File is (untracked); display the file contents.
                        Get-Content -Path $file
                    }

                    $changedFiles += $file

                    Write-Output ''
                    Write-Output '---------------------------------------'
                    Write-Output ''
                }
            }

            # Convert the array of changed files to a single string with each file on a new line so actions/upload-artifact
            # can consume it.
            $changedFilesString = $changedFiles -join "`n"
            "CHANGED_FILES<<ENDOFSTRING`n$($changedFilesString)`nENDOFSTRING" >> $Env:GITHUB_ENV

            exit -1
        }
        else
        {
            Write-Host "No uncommitted changes found. Repository is clean."
        }
    - name: Upload changed files as artifact
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: changed-files
        path: ${{ env.CHANGED_FILES }}
        retention-days: 30
